2024-02-27 20:56:54,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-02-27 20:56:54,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-02-27 20:56:54,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-02-27 20:56:54,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-02-27 20:56:54,687:INFO:PyCaret RegressionExperiment
2024-02-27 20:56:54,688:INFO:Logging name: reg-default-name
2024-02-27 20:56:54,688:INFO:ML Usecase: MLUsecase.REGRESSION
2024-02-27 20:56:54,688:INFO:version 3.3.0
2024-02-27 20:56:54,688:INFO:Initializing setup()
2024-02-27 20:56:54,688:INFO:self.USI: 0cf9
2024-02-27 20:56:54,688:INFO:self._variable_keys: {'y_test', 'transform_target_param', 'target_param', 'X_test', 'idx', 'X', 'seed', 'gpu_n_jobs_param', 'y_train', 'USI', 'fold_generator', 'exp_id', 'X_train', 'data', 'n_jobs_param', '_available_plots', 'gpu_param', '_ml_usecase', 'pipeline', 'memory', 'fold_groups_param', 'y', 'html_param', 'fold_shuffle_param', 'exp_name_log', 'log_plots_param', 'logging_param'}
2024-02-27 20:56:54,688:INFO:Checking environment
2024-02-27 20:56:54,688:INFO:python_version: 3.11.5
2024-02-27 20:56:54,688:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-02-27 20:56:54,688:INFO:machine: AMD64
2024-02-27 20:56:54,688:INFO:platform: Windows-10-10.0.19045-SP0
2024-02-27 20:56:54,688:INFO:Memory: svmem(total=16889192448, available=7373668352, percent=56.3, used=9515524096, free=7373668352)
2024-02-27 20:56:54,688:INFO:Physical Core: 4
2024-02-27 20:56:54,688:INFO:Logical Core: 8
2024-02-27 20:56:54,688:INFO:Checking libraries
2024-02-27 20:56:54,688:INFO:System:
2024-02-27 20:56:54,688:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-02-27 20:56:54,688:INFO:executable: d:\anaconda\python.exe
2024-02-27 20:56:54,688:INFO:   machine: Windows-10-10.0.19045-SP0
2024-02-27 20:56:54,688:INFO:PyCaret required dependencies:
2024-02-27 20:56:54,688:INFO:                 pip: 23.2.1
2024-02-27 20:56:54,688:INFO:          setuptools: 68.0.0
2024-02-27 20:56:54,688:INFO:             pycaret: 3.3.0
2024-02-27 20:56:54,688:INFO:             IPython: 8.15.0
2024-02-27 20:56:54,688:INFO:          ipywidgets: 8.0.4
2024-02-27 20:56:54,688:INFO:                tqdm: 4.65.0
2024-02-27 20:56:54,688:INFO:               numpy: 1.24.3
2024-02-27 20:56:54,688:INFO:              pandas: 2.0.3
2024-02-27 20:56:54,688:INFO:              jinja2: 3.1.2
2024-02-27 20:56:54,688:INFO:               scipy: 1.11.1
2024-02-27 20:56:54,688:INFO:              joblib: 1.2.0
2024-02-27 20:56:54,688:INFO:             sklearn: 1.4.1.post1
2024-02-27 20:56:54,688:INFO:                pyod: 1.1.3
2024-02-27 20:56:54,688:INFO:            imblearn: 0.10.1
2024-02-27 20:56:54,688:INFO:   category_encoders: 2.6.3
2024-02-27 20:56:54,688:INFO:            lightgbm: 4.3.0
2024-02-27 20:56:54,688:INFO:               numba: 0.57.1
2024-02-27 20:56:54,688:INFO:            requests: 2.31.0
2024-02-27 20:56:54,688:INFO:          matplotlib: 3.7.2
2024-02-27 20:56:54,688:INFO:          scikitplot: 0.3.7
2024-02-27 20:56:54,688:INFO:         yellowbrick: 1.5
2024-02-27 20:56:54,688:INFO:              plotly: 5.19.0
2024-02-27 20:56:54,688:INFO:    plotly-resampler: Not installed
2024-02-27 20:56:54,688:INFO:             kaleido: 0.2.1
2024-02-27 20:56:54,688:INFO:           schemdraw: 0.15
2024-02-27 20:56:54,688:INFO:         statsmodels: 0.14.0
2024-02-27 20:56:54,688:INFO:              sktime: 0.26.1
2024-02-27 20:56:54,688:INFO:               tbats: 1.1.3
2024-02-27 20:56:54,688:INFO:            pmdarima: 2.0.4
2024-02-27 20:56:54,688:INFO:              psutil: 5.9.0
2024-02-27 20:56:54,688:INFO:          markupsafe: 2.1.1
2024-02-27 20:56:54,688:INFO:             pickle5: Not installed
2024-02-27 20:56:54,688:INFO:         cloudpickle: 2.2.1
2024-02-27 20:56:54,688:INFO:         deprecation: 2.1.0
2024-02-27 20:56:54,688:INFO:              xxhash: 2.0.2
2024-02-27 20:56:54,688:INFO:           wurlitzer: Not installed
2024-02-27 20:56:54,688:INFO:PyCaret optional dependencies:
2024-02-27 20:56:54,704:INFO:                shap: Not installed
2024-02-27 20:56:54,704:INFO:           interpret: Not installed
2024-02-27 20:56:54,704:INFO:                umap: Not installed
2024-02-27 20:56:54,704:INFO:     ydata_profiling: Not installed
2024-02-27 20:56:54,704:INFO:  explainerdashboard: Not installed
2024-02-27 20:56:54,704:INFO:             autoviz: Not installed
2024-02-27 20:56:54,704:INFO:           fairlearn: Not installed
2024-02-27 20:56:54,704:INFO:          deepchecks: Not installed
2024-02-27 20:56:54,704:INFO:             xgboost: 2.0.3
2024-02-27 20:56:54,704:INFO:            catboost: 1.2.2
2024-02-27 20:56:54,704:INFO:              kmodes: Not installed
2024-02-27 20:56:54,704:INFO:             mlxtend: Not installed
2024-02-27 20:56:54,704:INFO:       statsforecast: Not installed
2024-02-27 20:56:54,704:INFO:        tune_sklearn: Not installed
2024-02-27 20:56:54,704:INFO:                 ray: Not installed
2024-02-27 20:56:54,704:INFO:            hyperopt: Not installed
2024-02-27 20:56:54,704:INFO:              optuna: Not installed
2024-02-27 20:56:54,704:INFO:               skopt: Not installed
2024-02-27 20:56:54,704:INFO:              mlflow: Not installed
2024-02-27 20:56:54,704:INFO:              gradio: Not installed
2024-02-27 20:56:54,704:INFO:             fastapi: Not installed
2024-02-27 20:56:54,704:INFO:             uvicorn: Not installed
2024-02-27 20:56:54,704:INFO:              m2cgen: Not installed
2024-02-27 20:56:54,704:INFO:           evidently: Not installed
2024-02-27 20:56:54,704:INFO:               fugue: Not installed
2024-02-27 20:56:54,704:INFO:           streamlit: Not installed
2024-02-27 20:56:54,704:INFO:             prophet: Not installed
2024-02-27 20:56:54,704:INFO:None
2024-02-27 20:56:54,704:INFO:Set up data.
2024-02-27 20:56:55,071:INFO:Set up folding strategy.
2024-02-27 20:56:55,071:INFO:Set up train/test split.
2024-02-27 20:56:55,672:INFO:Set up index.
2024-02-27 20:56:55,755:INFO:Assigning column types.
2024-02-27 20:56:56,288:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-02-27 20:56:56,288:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-02-27 20:56:56,288:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-02-27 20:56:56,305:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:56:57,005:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:56:57,038:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:56:57,038:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:56:57,038:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:56:57,054:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-02-27 20:56:57,056:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-02-27 20:56:57,056:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:56:57,823:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:56:57,873:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:56:57,873:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:56:57,873:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:56:57,873:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-02-27 20:56:57,873:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-02-27 20:56:57,889:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:56:58,555:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:56:58,589:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:56:58,589:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:56:58,606:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:56:58,606:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-02-27 20:56:58,606:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:56:59,322:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:56:59,373:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:56:59,373:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:56:59,373:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:56:59,373:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-02-27 20:56:59,373:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:57:00,158:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:00,190:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:00,190:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:00,190:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:00,206:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:57:00,923:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:00,973:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:00,973:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:00,973:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:00,973:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-02-27 20:57:01,723:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:01,759:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:01,759:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:01,759:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:02,474:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:02,507:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:02,507:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:02,507:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:02,507:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-02-27 20:57:03,241:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:03,275:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:03,275:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:03,974:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:04,025:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:04,027:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:04,027:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-02-27 20:57:04,900:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:04,911:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:05,834:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:05,845:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:05,847:INFO:Preparing preprocessing pipeline...
2024-02-27 20:57:05,847:INFO:Set up simple imputation.
2024-02-27 20:57:07,226:INFO:Finished creating preprocessing pipeline.
2024-02-27 20:57:07,226:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\dell\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP',
                                             'Current_Y', 'Current_Z',
                                             'Current_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2024-02-27 20:57:07,226:INFO:Creating final display dataframe.
2024-02-27 20:57:10,311:INFO:Setup _display_container:                     Description             Value
0                    Session id              7575
1                        Target         Current_X
2                   Target type        Regression
3           Original data shape     (1795901, 16)
4        Transformed data shape     (1795901, 16)
5   Transformed train set shape     (1257130, 16)
6    Transformed test set shape      (538771, 16)
7              Numeric features                15
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              0cf9
2024-02-27 20:57:11,216:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:11,216:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:12,066:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:12,066:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:12,066:WARNING:C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\metrics.py:51: FutureWarning: The `needs_threshold` and `needs_proba` parameter are deprecated in version 1.4 and will be removed in 1.6. You can either let `response_method` be `None` or set it to `predict` to preserve the same behaviour.
  warnings.warn(

2024-02-27 20:57:12,066:INFO:setup() successfully completed in 17.4s...............
2024-02-27 20:57:12,066:INFO:Initializing compare_models()
2024-02-27 20:57:12,066:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019429DE0350>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000019429DE0350>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-02-27 20:57:12,066:INFO:Checking exceptions
2024-02-27 20:57:12,448:INFO:Preparing display monitor
2024-02-27 20:57:12,483:INFO:Initializing Linear Regression
2024-02-27 20:57:12,484:INFO:Total runtime is 1.428524653116862e-05 minutes
2024-02-27 20:57:12,489:INFO:SubProcess create_model() called ==================================
2024-02-27 20:57:12,489:INFO:Initializing create_model()
2024-02-27 20:57:12,489:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019429DE0350>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000194526D7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:57:12,489:INFO:Checking exceptions
2024-02-27 20:57:12,489:INFO:Importing libraries
2024-02-27 20:57:12,489:INFO:Copying training dataset
2024-02-27 20:57:13,578:INFO:Defining folds
2024-02-27 20:57:13,578:INFO:Declaring metric variables
2024-02-27 20:57:13,578:INFO:Importing untrained model
2024-02-27 20:57:13,578:INFO:Linear Regression Imported successfully
2024-02-27 20:57:13,592:INFO:Starting cross validation
2024-02-27 20:57:13,597:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:57:26,654:INFO:Calculating mean and std
2024-02-27 20:57:26,654:INFO:Creating metrics dataframe
2024-02-27 20:57:26,654:INFO:Uploading results into container
2024-02-27 20:57:26,654:INFO:Uploading model into container now
2024-02-27 20:57:26,654:INFO:_master_model_container: 1
2024-02-27 20:57:26,654:INFO:_display_container: 2
2024-02-27 20:57:26,654:INFO:LinearRegression(n_jobs=-1)
2024-02-27 20:57:26,654:INFO:create_model() successfully completed......................................
2024-02-27 20:57:26,785:INFO:SubProcess create_model() end ==================================
2024-02-27 20:57:26,785:INFO:Creating metrics dataframe
2024-02-27 20:57:26,789:INFO:Initializing Lasso Regression
2024-02-27 20:57:26,789:INFO:Total runtime is 0.23843533198038735 minutes
2024-02-27 20:57:26,798:INFO:SubProcess create_model() called ==================================
2024-02-27 20:57:26,799:INFO:Initializing create_model()
2024-02-27 20:57:26,799:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019429DE0350>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000194526D7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:57:26,800:INFO:Checking exceptions
2024-02-27 20:57:26,800:INFO:Importing libraries
2024-02-27 20:57:26,800:INFO:Copying training dataset
2024-02-27 20:57:27,768:INFO:Defining folds
2024-02-27 20:57:27,768:INFO:Declaring metric variables
2024-02-27 20:57:27,774:INFO:Importing untrained model
2024-02-27 20:57:27,774:INFO:Lasso Regression Imported successfully
2024-02-27 20:57:27,785:INFO:Starting cross validation
2024-02-27 20:57:27,785:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:57:32,321:INFO:Calculating mean and std
2024-02-27 20:57:32,321:INFO:Creating metrics dataframe
2024-02-27 20:57:32,321:INFO:Uploading results into container
2024-02-27 20:57:32,321:INFO:Uploading model into container now
2024-02-27 20:57:32,321:INFO:_master_model_container: 2
2024-02-27 20:57:32,321:INFO:_display_container: 2
2024-02-27 20:57:32,321:INFO:Lasso(random_state=7575)
2024-02-27 20:57:32,321:INFO:create_model() successfully completed......................................
2024-02-27 20:57:32,402:INFO:SubProcess create_model() end ==================================
2024-02-27 20:57:32,402:INFO:Creating metrics dataframe
2024-02-27 20:57:32,420:INFO:Initializing Ridge Regression
2024-02-27 20:57:32,420:INFO:Total runtime is 0.33227810462315877 minutes
2024-02-27 20:57:32,420:INFO:SubProcess create_model() called ==================================
2024-02-27 20:57:32,420:INFO:Initializing create_model()
2024-02-27 20:57:32,420:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019429DE0350>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000194526D7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:57:32,420:INFO:Checking exceptions
2024-02-27 20:57:32,420:INFO:Importing libraries
2024-02-27 20:57:32,420:INFO:Copying training dataset
2024-02-27 20:57:33,402:INFO:Defining folds
2024-02-27 20:57:33,402:INFO:Declaring metric variables
2024-02-27 20:57:33,406:INFO:Importing untrained model
2024-02-27 20:57:33,410:INFO:Ridge Regression Imported successfully
2024-02-27 20:57:33,410:INFO:Starting cross validation
2024-02-27 20:57:33,419:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:57:35,131:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.15303e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:57:35,137:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.14873e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:57:35,137:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.15186e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:57:35,154:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.14582e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:57:35,182:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.14881e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:57:35,207:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.14228e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:57:35,239:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.15074e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:57:35,239:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.14796e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:57:36,106:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.14617e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:57:36,121:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.15393e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:57:48,693:INFO:PyCaret RegressionExperiment
2024-02-27 20:57:48,693:INFO:Logging name: reg-default-name
2024-02-27 20:57:48,693:INFO:ML Usecase: MLUsecase.REGRESSION
2024-02-27 20:57:48,693:INFO:version 3.3.0
2024-02-27 20:57:48,693:INFO:Initializing setup()
2024-02-27 20:57:48,693:INFO:self.USI: b6fe
2024-02-27 20:57:48,693:INFO:self._variable_keys: {'y_test', 'transform_target_param', 'target_param', 'X_test', 'idx', 'X', 'seed', 'gpu_n_jobs_param', 'y_train', 'USI', 'fold_generator', 'exp_id', 'X_train', 'data', 'n_jobs_param', '_available_plots', 'gpu_param', '_ml_usecase', 'pipeline', 'memory', 'fold_groups_param', 'y', 'html_param', 'fold_shuffle_param', 'exp_name_log', 'log_plots_param', 'logging_param'}
2024-02-27 20:57:48,693:INFO:Checking environment
2024-02-27 20:57:48,693:INFO:python_version: 3.11.5
2024-02-27 20:57:48,693:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-02-27 20:57:48,693:INFO:machine: AMD64
2024-02-27 20:57:48,694:INFO:platform: Windows-10-10.0.19045-SP0
2024-02-27 20:57:48,694:INFO:Memory: svmem(total=16889192448, available=7222935552, percent=57.2, used=9666256896, free=7222935552)
2024-02-27 20:57:48,694:INFO:Physical Core: 4
2024-02-27 20:57:48,694:INFO:Logical Core: 8
2024-02-27 20:57:48,694:INFO:Checking libraries
2024-02-27 20:57:48,694:INFO:System:
2024-02-27 20:57:48,694:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-02-27 20:57:48,694:INFO:executable: d:\anaconda\python.exe
2024-02-27 20:57:48,694:INFO:   machine: Windows-10-10.0.19045-SP0
2024-02-27 20:57:48,694:INFO:PyCaret required dependencies:
2024-02-27 20:57:48,694:INFO:                 pip: 23.2.1
2024-02-27 20:57:48,694:INFO:          setuptools: 68.0.0
2024-02-27 20:57:48,694:INFO:             pycaret: 3.3.0
2024-02-27 20:57:48,694:INFO:             IPython: 8.15.0
2024-02-27 20:57:48,695:INFO:          ipywidgets: 8.0.4
2024-02-27 20:57:48,695:INFO:                tqdm: 4.65.0
2024-02-27 20:57:48,695:INFO:               numpy: 1.24.3
2024-02-27 20:57:48,695:INFO:              pandas: 2.0.3
2024-02-27 20:57:48,695:INFO:              jinja2: 3.1.2
2024-02-27 20:57:48,695:INFO:               scipy: 1.11.1
2024-02-27 20:57:48,695:INFO:              joblib: 1.2.0
2024-02-27 20:57:48,695:INFO:             sklearn: 1.4.1.post1
2024-02-27 20:57:48,695:INFO:                pyod: 1.1.3
2024-02-27 20:57:48,695:INFO:            imblearn: 0.10.1
2024-02-27 20:57:48,695:INFO:   category_encoders: 2.6.3
2024-02-27 20:57:48,695:INFO:            lightgbm: 4.3.0
2024-02-27 20:57:48,695:INFO:               numba: 0.57.1
2024-02-27 20:57:48,695:INFO:            requests: 2.31.0
2024-02-27 20:57:48,696:INFO:          matplotlib: 3.7.2
2024-02-27 20:57:48,696:INFO:          scikitplot: 0.3.7
2024-02-27 20:57:48,696:INFO:         yellowbrick: 1.5
2024-02-27 20:57:48,696:INFO:              plotly: 5.19.0
2024-02-27 20:57:48,696:INFO:    plotly-resampler: Not installed
2024-02-27 20:57:48,696:INFO:             kaleido: 0.2.1
2024-02-27 20:57:48,697:INFO:           schemdraw: 0.15
2024-02-27 20:57:48,697:INFO:         statsmodels: 0.14.0
2024-02-27 20:57:48,697:INFO:              sktime: 0.26.1
2024-02-27 20:57:48,697:INFO:               tbats: 1.1.3
2024-02-27 20:57:48,697:INFO:            pmdarima: 2.0.4
2024-02-27 20:57:48,697:INFO:              psutil: 5.9.0
2024-02-27 20:57:48,697:INFO:          markupsafe: 2.1.1
2024-02-27 20:57:48,697:INFO:             pickle5: Not installed
2024-02-27 20:57:48,697:INFO:         cloudpickle: 2.2.1
2024-02-27 20:57:48,697:INFO:         deprecation: 2.1.0
2024-02-27 20:57:48,697:INFO:              xxhash: 2.0.2
2024-02-27 20:57:48,697:INFO:           wurlitzer: Not installed
2024-02-27 20:57:48,697:INFO:PyCaret optional dependencies:
2024-02-27 20:57:48,697:INFO:                shap: Not installed
2024-02-27 20:57:48,697:INFO:           interpret: Not installed
2024-02-27 20:57:48,697:INFO:                umap: Not installed
2024-02-27 20:57:48,697:INFO:     ydata_profiling: Not installed
2024-02-27 20:57:48,697:INFO:  explainerdashboard: Not installed
2024-02-27 20:57:48,697:INFO:             autoviz: Not installed
2024-02-27 20:57:48,697:INFO:           fairlearn: Not installed
2024-02-27 20:57:48,697:INFO:          deepchecks: Not installed
2024-02-27 20:57:48,697:INFO:             xgboost: 2.0.3
2024-02-27 20:57:48,697:INFO:            catboost: 1.2.2
2024-02-27 20:57:48,697:INFO:              kmodes: Not installed
2024-02-27 20:57:48,697:INFO:             mlxtend: Not installed
2024-02-27 20:57:48,697:INFO:       statsforecast: Not installed
2024-02-27 20:57:48,697:INFO:        tune_sklearn: Not installed
2024-02-27 20:57:48,697:INFO:                 ray: Not installed
2024-02-27 20:57:48,697:INFO:            hyperopt: Not installed
2024-02-27 20:57:48,697:INFO:              optuna: Not installed
2024-02-27 20:57:48,698:INFO:               skopt: Not installed
2024-02-27 20:57:48,698:INFO:              mlflow: Not installed
2024-02-27 20:57:48,698:INFO:              gradio: Not installed
2024-02-27 20:57:48,698:INFO:             fastapi: Not installed
2024-02-27 20:57:48,698:INFO:             uvicorn: Not installed
2024-02-27 20:57:48,698:INFO:              m2cgen: Not installed
2024-02-27 20:57:48,698:INFO:           evidently: Not installed
2024-02-27 20:57:48,698:INFO:               fugue: Not installed
2024-02-27 20:57:48,698:INFO:           streamlit: Not installed
2024-02-27 20:57:48,698:INFO:             prophet: Not installed
2024-02-27 20:57:48,698:INFO:None
2024-02-27 20:57:48,699:INFO:Set up data.
2024-02-27 20:57:48,776:INFO:Set up folding strategy.
2024-02-27 20:57:48,776:INFO:Set up train/test split.
2024-02-27 20:57:49,008:INFO:Set up index.
2024-02-27 20:57:49,091:INFO:Assigning column types.
2024-02-27 20:57:49,191:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-02-27 20:57:49,192:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-02-27 20:57:49,192:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-02-27 20:57:49,192:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:57:49,642:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:49,692:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:49,692:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:49,692:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:49,692:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-02-27 20:57:49,692:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-02-27 20:57:49,710:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:57:50,125:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:50,175:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:50,175:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:50,175:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:50,175:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-02-27 20:57:50,175:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-02-27 20:57:50,175:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:57:50,560:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:50,592:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:50,592:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:50,592:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:50,592:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-02-27 20:57:50,609:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:57:50,976:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:51,009:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:51,009:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:51,009:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:51,009:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-02-27 20:57:51,026:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:57:51,395:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:51,443:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:51,443:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:51,461:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:51,461:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-02-27 20:57:51,826:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:51,876:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:51,876:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:51,876:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:51,892:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-02-27 20:57:52,281:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:52,328:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:52,328:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:52,328:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:52,781:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:52,825:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-02-27 20:57:52,827:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:52,831:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:52,831:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-02-27 20:57:53,248:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:53,298:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:53,298:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:53,747:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-02-27 20:57:53,796:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:53,796:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:53,796:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-02-27 20:57:54,296:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:54,296:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:54,764:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:54,764:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:54,764:INFO:Preparing preprocessing pipeline...
2024-02-27 20:57:54,764:INFO:Set up simple imputation.
2024-02-27 20:57:55,244:INFO:Finished creating preprocessing pipeline.
2024-02-27 20:57:55,247:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\dell\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Accel_X'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2024-02-27 20:57:55,247:INFO:Creating final display dataframe.
2024-02-27 20:57:56,595:INFO:Setup _display_container:                     Description             Value
0                    Session id              5142
1                        Target         Current_X
2                   Target type        Regression
3           Original data shape      (1795901, 3)
4        Transformed data shape      (1795901, 3)
5   Transformed train set shape      (1257130, 3)
6    Transformed test set shape       (538771, 3)
7              Numeric features                 2
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              b6fe
2024-02-27 20:57:57,044:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:57,044:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:57,445:INFO:Soft dependency imported: xgboost: 2.0.3
2024-02-27 20:57:57,445:INFO:Soft dependency imported: catboost: 1.2.2
2024-02-27 20:57:57,445:WARNING:C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\metrics.py:51: FutureWarning: The `needs_threshold` and `needs_proba` parameter are deprecated in version 1.4 and will be removed in 1.6. You can either let `response_method` be `None` or set it to `predict` to preserve the same behaviour.
  warnings.warn(

2024-02-27 20:57:57,445:INFO:setup() successfully completed in 8.77s...............
2024-02-27 20:57:57,445:INFO:Initializing compare_models()
2024-02-27 20:57:57,445:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-02-27 20:57:57,445:INFO:Checking exceptions
2024-02-27 20:57:57,628:INFO:Preparing display monitor
2024-02-27 20:57:57,662:INFO:Initializing Linear Regression
2024-02-27 20:57:57,662:INFO:Total runtime is 0.0 minutes
2024-02-27 20:57:57,662:INFO:SubProcess create_model() called ==================================
2024-02-27 20:57:57,662:INFO:Initializing create_model()
2024-02-27 20:57:57,662:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:57:57,662:INFO:Checking exceptions
2024-02-27 20:57:57,662:INFO:Importing libraries
2024-02-27 20:57:57,662:INFO:Copying training dataset
2024-02-27 20:57:58,212:INFO:Defining folds
2024-02-27 20:57:58,212:INFO:Declaring metric variables
2024-02-27 20:57:58,212:INFO:Importing untrained model
2024-02-27 20:57:58,228:INFO:Linear Regression Imported successfully
2024-02-27 20:57:58,228:INFO:Starting cross validation
2024-02-27 20:57:58,228:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:58:09,090:INFO:Calculating mean and std
2024-02-27 20:58:09,090:INFO:Creating metrics dataframe
2024-02-27 20:58:09,090:INFO:Uploading results into container
2024-02-27 20:58:09,090:INFO:Uploading model into container now
2024-02-27 20:58:09,090:INFO:_master_model_container: 1
2024-02-27 20:58:09,090:INFO:_display_container: 2
2024-02-27 20:58:09,090:INFO:LinearRegression(n_jobs=-1)
2024-02-27 20:58:09,090:INFO:create_model() successfully completed......................................
2024-02-27 20:58:09,249:INFO:SubProcess create_model() end ==================================
2024-02-27 20:58:09,249:INFO:Creating metrics dataframe
2024-02-27 20:58:09,249:INFO:Initializing Lasso Regression
2024-02-27 20:58:09,249:INFO:Total runtime is 0.19312415917714437 minutes
2024-02-27 20:58:09,263:INFO:SubProcess create_model() called ==================================
2024-02-27 20:58:09,266:INFO:Initializing create_model()
2024-02-27 20:58:09,266:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:58:09,266:INFO:Checking exceptions
2024-02-27 20:58:09,266:INFO:Importing libraries
2024-02-27 20:58:09,266:INFO:Copying training dataset
2024-02-27 20:58:09,766:INFO:Defining folds
2024-02-27 20:58:09,766:INFO:Declaring metric variables
2024-02-27 20:58:09,783:INFO:Importing untrained model
2024-02-27 20:58:09,787:INFO:Lasso Regression Imported successfully
2024-02-27 20:58:09,787:INFO:Starting cross validation
2024-02-27 20:58:09,787:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:58:10,623:INFO:Calculating mean and std
2024-02-27 20:58:10,623:INFO:Creating metrics dataframe
2024-02-27 20:58:10,623:INFO:Uploading results into container
2024-02-27 20:58:10,623:INFO:Uploading model into container now
2024-02-27 20:58:10,623:INFO:_master_model_container: 2
2024-02-27 20:58:10,623:INFO:_display_container: 2
2024-02-27 20:58:10,623:INFO:Lasso(random_state=5142)
2024-02-27 20:58:10,623:INFO:create_model() successfully completed......................................
2024-02-27 20:58:10,759:INFO:SubProcess create_model() end ==================================
2024-02-27 20:58:10,759:INFO:Creating metrics dataframe
2024-02-27 20:58:10,766:INFO:Initializing Ridge Regression
2024-02-27 20:58:10,766:INFO:Total runtime is 0.2184013287226359 minutes
2024-02-27 20:58:10,768:INFO:SubProcess create_model() called ==================================
2024-02-27 20:58:10,768:INFO:Initializing create_model()
2024-02-27 20:58:10,768:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:58:10,768:INFO:Checking exceptions
2024-02-27 20:58:10,768:INFO:Importing libraries
2024-02-27 20:58:10,768:INFO:Copying training dataset
2024-02-27 20:58:11,367:INFO:Defining folds
2024-02-27 20:58:11,367:INFO:Declaring metric variables
2024-02-27 20:58:11,379:INFO:Importing untrained model
2024-02-27 20:58:11,379:INFO:Ridge Regression Imported successfully
2024-02-27 20:58:11,386:INFO:Starting cross validation
2024-02-27 20:58:11,386:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:58:11,717:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.01832e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:58:11,717:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.04215e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:58:11,733:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.06936e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:58:11,768:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.00418e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:58:11,777:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.04214e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:58:11,835:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.04541e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:58:11,839:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.08096e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:58:11,867:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.99565e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:58:11,989:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.04728e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:58:12,020:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.08248e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-02-27 20:58:12,167:INFO:Calculating mean and std
2024-02-27 20:58:12,168:INFO:Creating metrics dataframe
2024-02-27 20:58:12,171:INFO:Uploading results into container
2024-02-27 20:58:12,171:INFO:Uploading model into container now
2024-02-27 20:58:12,171:INFO:_master_model_container: 3
2024-02-27 20:58:12,171:INFO:_display_container: 2
2024-02-27 20:58:12,171:INFO:Ridge(random_state=5142)
2024-02-27 20:58:12,171:INFO:create_model() successfully completed......................................
2024-02-27 20:58:12,339:INFO:SubProcess create_model() end ==================================
2024-02-27 20:58:12,339:INFO:Creating metrics dataframe
2024-02-27 20:58:12,354:INFO:Initializing Elastic Net
2024-02-27 20:58:12,354:INFO:Total runtime is 0.24486578702926637 minutes
2024-02-27 20:58:12,357:INFO:SubProcess create_model() called ==================================
2024-02-27 20:58:12,357:INFO:Initializing create_model()
2024-02-27 20:58:12,357:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:58:12,357:INFO:Checking exceptions
2024-02-27 20:58:12,357:INFO:Importing libraries
2024-02-27 20:58:12,357:INFO:Copying training dataset
2024-02-27 20:58:12,884:INFO:Defining folds
2024-02-27 20:58:12,884:INFO:Declaring metric variables
2024-02-27 20:58:12,884:INFO:Importing untrained model
2024-02-27 20:58:12,901:INFO:Elastic Net Imported successfully
2024-02-27 20:58:12,904:INFO:Starting cross validation
2024-02-27 20:58:12,904:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:58:13,740:INFO:Calculating mean and std
2024-02-27 20:58:13,740:INFO:Creating metrics dataframe
2024-02-27 20:58:13,740:INFO:Uploading results into container
2024-02-27 20:58:13,740:INFO:Uploading model into container now
2024-02-27 20:58:13,740:INFO:_master_model_container: 4
2024-02-27 20:58:13,740:INFO:_display_container: 2
2024-02-27 20:58:13,740:INFO:ElasticNet(random_state=5142)
2024-02-27 20:58:13,740:INFO:create_model() successfully completed......................................
2024-02-27 20:58:13,882:INFO:SubProcess create_model() end ==================================
2024-02-27 20:58:13,882:INFO:Creating metrics dataframe
2024-02-27 20:58:13,886:INFO:Initializing Least Angle Regression
2024-02-27 20:58:13,886:INFO:Total runtime is 0.27040375471115113 minutes
2024-02-27 20:58:13,886:INFO:SubProcess create_model() called ==================================
2024-02-27 20:58:13,886:INFO:Initializing create_model()
2024-02-27 20:58:13,886:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:58:13,896:INFO:Checking exceptions
2024-02-27 20:58:13,896:INFO:Importing libraries
2024-02-27 20:58:13,896:INFO:Copying training dataset
2024-02-27 20:58:14,401:INFO:Defining folds
2024-02-27 20:58:14,401:INFO:Declaring metric variables
2024-02-27 20:58:14,418:INFO:Importing untrained model
2024-02-27 20:58:14,421:INFO:Least Angle Regression Imported successfully
2024-02-27 20:58:14,421:INFO:Starting cross validation
2024-02-27 20:58:14,421:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:58:15,201:INFO:Calculating mean and std
2024-02-27 20:58:15,202:INFO:Creating metrics dataframe
2024-02-27 20:58:15,205:INFO:Uploading results into container
2024-02-27 20:58:15,205:INFO:Uploading model into container now
2024-02-27 20:58:15,205:INFO:_master_model_container: 5
2024-02-27 20:58:15,205:INFO:_display_container: 2
2024-02-27 20:58:15,205:INFO:Lars(random_state=5142)
2024-02-27 20:58:15,205:INFO:create_model() successfully completed......................................
2024-02-27 20:58:15,352:INFO:SubProcess create_model() end ==================================
2024-02-27 20:58:15,352:INFO:Creating metrics dataframe
2024-02-27 20:58:15,352:INFO:Initializing Lasso Least Angle Regression
2024-02-27 20:58:15,368:INFO:Total runtime is 0.29484216769536337 minutes
2024-02-27 20:58:15,371:INFO:SubProcess create_model() called ==================================
2024-02-27 20:58:15,371:INFO:Initializing create_model()
2024-02-27 20:58:15,371:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:58:15,371:INFO:Checking exceptions
2024-02-27 20:58:15,371:INFO:Importing libraries
2024-02-27 20:58:15,371:INFO:Copying training dataset
2024-02-27 20:58:15,918:INFO:Defining folds
2024-02-27 20:58:15,918:INFO:Declaring metric variables
2024-02-27 20:58:15,924:INFO:Importing untrained model
2024-02-27 20:58:15,924:INFO:Lasso Least Angle Regression Imported successfully
2024-02-27 20:58:15,924:INFO:Starting cross validation
2024-02-27 20:58:15,934:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:58:16,713:INFO:Calculating mean and std
2024-02-27 20:58:16,713:INFO:Creating metrics dataframe
2024-02-27 20:58:16,713:INFO:Uploading results into container
2024-02-27 20:58:16,719:INFO:Uploading model into container now
2024-02-27 20:58:16,720:INFO:_master_model_container: 6
2024-02-27 20:58:16,721:INFO:_display_container: 2
2024-02-27 20:58:16,721:INFO:LassoLars(random_state=5142)
2024-02-27 20:58:16,721:INFO:create_model() successfully completed......................................
2024-02-27 20:58:16,852:INFO:SubProcess create_model() end ==================================
2024-02-27 20:58:16,852:INFO:Creating metrics dataframe
2024-02-27 20:58:16,869:INFO:Initializing Orthogonal Matching Pursuit
2024-02-27 20:58:16,869:INFO:Total runtime is 0.32012844483057656 minutes
2024-02-27 20:58:16,869:INFO:SubProcess create_model() called ==================================
2024-02-27 20:58:16,869:INFO:Initializing create_model()
2024-02-27 20:58:16,880:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:58:16,880:INFO:Checking exceptions
2024-02-27 20:58:16,880:INFO:Importing libraries
2024-02-27 20:58:16,880:INFO:Copying training dataset
2024-02-27 20:58:17,419:INFO:Defining folds
2024-02-27 20:58:17,419:INFO:Declaring metric variables
2024-02-27 20:58:17,427:INFO:Importing untrained model
2024-02-27 20:58:17,428:INFO:Orthogonal Matching Pursuit Imported successfully
2024-02-27 20:58:17,440:INFO:Starting cross validation
2024-02-27 20:58:17,440:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:58:18,235:INFO:Calculating mean and std
2024-02-27 20:58:18,237:INFO:Creating metrics dataframe
2024-02-27 20:58:18,237:INFO:Uploading results into container
2024-02-27 20:58:18,237:INFO:Uploading model into container now
2024-02-27 20:58:18,237:INFO:_master_model_container: 7
2024-02-27 20:58:18,237:INFO:_display_container: 2
2024-02-27 20:58:18,237:INFO:OrthogonalMatchingPursuit()
2024-02-27 20:58:18,237:INFO:create_model() successfully completed......................................
2024-02-27 20:58:18,387:INFO:SubProcess create_model() end ==================================
2024-02-27 20:58:18,387:INFO:Creating metrics dataframe
2024-02-27 20:58:18,405:INFO:Initializing Bayesian Ridge
2024-02-27 20:58:18,405:INFO:Total runtime is 0.34572825829188025 minutes
2024-02-27 20:58:18,409:INFO:SubProcess create_model() called ==================================
2024-02-27 20:58:18,410:INFO:Initializing create_model()
2024-02-27 20:58:18,410:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:58:18,410:INFO:Checking exceptions
2024-02-27 20:58:18,410:INFO:Importing libraries
2024-02-27 20:58:18,410:INFO:Copying training dataset
2024-02-27 20:58:18,954:INFO:Defining folds
2024-02-27 20:58:18,954:INFO:Declaring metric variables
2024-02-27 20:58:18,956:INFO:Importing untrained model
2024-02-27 20:58:18,962:INFO:Bayesian Ridge Imported successfully
2024-02-27 20:58:18,969:INFO:Starting cross validation
2024-02-27 20:58:18,971:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:58:19,876:INFO:Calculating mean and std
2024-02-27 20:58:19,876:INFO:Creating metrics dataframe
2024-02-27 20:58:19,876:INFO:Uploading results into container
2024-02-27 20:58:19,876:INFO:Uploading model into container now
2024-02-27 20:58:19,876:INFO:_master_model_container: 8
2024-02-27 20:58:19,876:INFO:_display_container: 2
2024-02-27 20:58:19,876:INFO:BayesianRidge()
2024-02-27 20:58:19,876:INFO:create_model() successfully completed......................................
2024-02-27 20:58:20,038:INFO:SubProcess create_model() end ==================================
2024-02-27 20:58:20,038:INFO:Creating metrics dataframe
2024-02-27 20:58:20,058:INFO:Initializing Passive Aggressive Regressor
2024-02-27 20:58:20,059:INFO:Total runtime is 0.37329233090082803 minutes
2024-02-27 20:58:20,063:INFO:SubProcess create_model() called ==================================
2024-02-27 20:58:20,064:INFO:Initializing create_model()
2024-02-27 20:58:20,064:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:58:20,064:INFO:Checking exceptions
2024-02-27 20:58:20,064:INFO:Importing libraries
2024-02-27 20:58:20,064:INFO:Copying training dataset
2024-02-27 20:58:20,620:INFO:Defining folds
2024-02-27 20:58:20,620:INFO:Declaring metric variables
2024-02-27 20:58:20,620:INFO:Importing untrained model
2024-02-27 20:58:20,629:INFO:Passive Aggressive Regressor Imported successfully
2024-02-27 20:58:20,629:INFO:Starting cross validation
2024-02-27 20:58:20,637:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:58:26,646:INFO:Calculating mean and std
2024-02-27 20:58:26,646:INFO:Creating metrics dataframe
2024-02-27 20:58:26,646:INFO:Uploading results into container
2024-02-27 20:58:26,646:INFO:Uploading model into container now
2024-02-27 20:58:26,646:INFO:_master_model_container: 9
2024-02-27 20:58:26,646:INFO:_display_container: 2
2024-02-27 20:58:26,646:INFO:PassiveAggressiveRegressor(random_state=5142)
2024-02-27 20:58:26,646:INFO:create_model() successfully completed......................................
2024-02-27 20:58:26,793:INFO:SubProcess create_model() end ==================================
2024-02-27 20:58:26,793:INFO:Creating metrics dataframe
2024-02-27 20:58:26,793:INFO:Initializing Huber Regressor
2024-02-27 20:58:26,793:INFO:Total runtime is 0.4855159362157186 minutes
2024-02-27 20:58:26,808:INFO:SubProcess create_model() called ==================================
2024-02-27 20:58:26,808:INFO:Initializing create_model()
2024-02-27 20:58:26,808:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:58:26,808:INFO:Checking exceptions
2024-02-27 20:58:26,808:INFO:Importing libraries
2024-02-27 20:58:26,808:INFO:Copying training dataset
2024-02-27 20:58:27,342:INFO:Defining folds
2024-02-27 20:58:27,342:INFO:Declaring metric variables
2024-02-27 20:58:27,357:INFO:Importing untrained model
2024-02-27 20:58:27,357:INFO:Huber Regressor Imported successfully
2024-02-27 20:58:27,357:INFO:Starting cross validation
2024-02-27 20:58:27,357:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 20:58:48,074:INFO:Calculating mean and std
2024-02-27 20:58:48,076:INFO:Creating metrics dataframe
2024-02-27 20:58:48,078:INFO:Uploading results into container
2024-02-27 20:58:48,079:INFO:Uploading model into container now
2024-02-27 20:58:48,079:INFO:_master_model_container: 10
2024-02-27 20:58:48,079:INFO:_display_container: 2
2024-02-27 20:58:48,080:INFO:HuberRegressor()
2024-02-27 20:58:48,080:INFO:create_model() successfully completed......................................
2024-02-27 20:58:48,240:INFO:SubProcess create_model() end ==================================
2024-02-27 20:58:48,240:INFO:Creating metrics dataframe
2024-02-27 20:58:48,250:INFO:Initializing K Neighbors Regressor
2024-02-27 20:58:48,250:INFO:Total runtime is 0.8431387702624003 minutes
2024-02-27 20:58:48,253:INFO:SubProcess create_model() called ==================================
2024-02-27 20:58:48,253:INFO:Initializing create_model()
2024-02-27 20:58:48,254:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 20:58:48,254:INFO:Checking exceptions
2024-02-27 20:58:48,254:INFO:Importing libraries
2024-02-27 20:58:48,254:INFO:Copying training dataset
2024-02-27 20:58:48,797:INFO:Defining folds
2024-02-27 20:58:48,797:INFO:Declaring metric variables
2024-02-27 20:58:48,797:INFO:Importing untrained model
2024-02-27 20:58:48,808:INFO:K Neighbors Regressor Imported successfully
2024-02-27 20:58:48,814:INFO:Starting cross validation
2024-02-27 20:58:48,815:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:00:12,615:INFO:Calculating mean and std
2024-02-27 21:00:12,615:INFO:Creating metrics dataframe
2024-02-27 21:00:12,615:INFO:Uploading results into container
2024-02-27 21:00:12,615:INFO:Uploading model into container now
2024-02-27 21:00:12,619:INFO:_master_model_container: 11
2024-02-27 21:00:12,619:INFO:_display_container: 2
2024-02-27 21:00:12,619:INFO:KNeighborsRegressor(n_jobs=-1)
2024-02-27 21:00:12,619:INFO:create_model() successfully completed......................................
2024-02-27 21:00:12,774:INFO:SubProcess create_model() end ==================================
2024-02-27 21:00:12,774:INFO:Creating metrics dataframe
2024-02-27 21:00:12,780:INFO:Initializing Decision Tree Regressor
2024-02-27 21:00:12,784:INFO:Total runtime is 2.252042273680369 minutes
2024-02-27 21:00:12,787:INFO:SubProcess create_model() called ==================================
2024-02-27 21:00:12,788:INFO:Initializing create_model()
2024-02-27 21:00:12,788:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:00:12,788:INFO:Checking exceptions
2024-02-27 21:00:12,788:INFO:Importing libraries
2024-02-27 21:00:12,788:INFO:Copying training dataset
2024-02-27 21:00:13,380:INFO:Defining folds
2024-02-27 21:00:13,380:INFO:Declaring metric variables
2024-02-27 21:00:13,388:INFO:Importing untrained model
2024-02-27 21:00:13,388:INFO:Decision Tree Regressor Imported successfully
2024-02-27 21:00:13,399:INFO:Starting cross validation
2024-02-27 21:00:13,399:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:00:30,203:INFO:Calculating mean and std
2024-02-27 21:00:30,204:INFO:Creating metrics dataframe
2024-02-27 21:00:30,204:INFO:Uploading results into container
2024-02-27 21:00:30,204:INFO:Uploading model into container now
2024-02-27 21:00:30,204:INFO:_master_model_container: 12
2024-02-27 21:00:30,204:INFO:_display_container: 2
2024-02-27 21:00:30,204:INFO:DecisionTreeRegressor(random_state=5142)
2024-02-27 21:00:30,209:INFO:create_model() successfully completed......................................
2024-02-27 21:00:30,353:INFO:SubProcess create_model() end ==================================
2024-02-27 21:00:30,353:INFO:Creating metrics dataframe
2024-02-27 21:00:30,376:INFO:Initializing Random Forest Regressor
2024-02-27 21:00:30,376:INFO:Total runtime is 2.5452295343081155 minutes
2024-02-27 21:00:30,380:INFO:SubProcess create_model() called ==================================
2024-02-27 21:00:30,380:INFO:Initializing create_model()
2024-02-27 21:00:30,380:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:00:30,381:INFO:Checking exceptions
2024-02-27 21:00:30,381:INFO:Importing libraries
2024-02-27 21:00:30,381:INFO:Copying training dataset
2024-02-27 21:00:30,987:INFO:Defining folds
2024-02-27 21:00:30,987:INFO:Declaring metric variables
2024-02-27 21:00:31,006:INFO:Importing untrained model
2024-02-27 21:00:31,007:INFO:Random Forest Regressor Imported successfully
2024-02-27 21:00:31,017:INFO:Starting cross validation
2024-02-27 21:00:31,018:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:08:43,976:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
8 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
8 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 67108864 bytes

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-02-27 21:08:43,992:INFO:Calculating mean and std
2024-02-27 21:08:44,025:INFO:Creating metrics dataframe
2024-02-27 21:08:44,059:INFO:Uploading results into container
2024-02-27 21:08:44,059:INFO:Uploading model into container now
2024-02-27 21:08:44,066:INFO:_master_model_container: 13
2024-02-27 21:08:44,066:INFO:_display_container: 2
2024-02-27 21:08:44,070:INFO:RandomForestRegressor(n_jobs=-1, random_state=5142)
2024-02-27 21:08:44,070:INFO:create_model() successfully completed......................................
2024-02-27 21:08:44,792:WARNING:create_model() for RandomForestRegressor(n_jobs=-1, random_state=5142) raised an exception or returned all 0.0, trying without fit_kwargs:
2024-02-27 21:08:44,792:WARNING:Traceback (most recent call last):
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 797, in compare_models
    np.sum(
AssertionError

2024-02-27 21:08:44,792:INFO:Initializing create_model()
2024-02-27 21:08:44,792:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:08:44,792:INFO:Checking exceptions
2024-02-27 21:08:44,792:INFO:Importing libraries
2024-02-27 21:08:44,792:INFO:Copying training dataset
2024-02-27 21:08:45,681:INFO:Defining folds
2024-02-27 21:08:45,681:INFO:Declaring metric variables
2024-02-27 21:08:45,687:INFO:Importing untrained model
2024-02-27 21:08:45,693:INFO:Random Forest Regressor Imported successfully
2024-02-27 21:08:45,701:INFO:Starting cross validation
2024-02-27 21:08:45,702:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:18:11,515:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
8 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 33554432 bytes

--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 67108864 bytes

--------------------------------------------------------------------------------
2 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 16777216 bytes

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-02-27 21:18:11,548:INFO:Calculating mean and std
2024-02-27 21:18:11,601:INFO:Creating metrics dataframe
2024-02-27 21:18:11,676:INFO:Uploading results into container
2024-02-27 21:18:11,684:INFO:Uploading model into container now
2024-02-27 21:18:11,685:INFO:_master_model_container: 14
2024-02-27 21:18:11,685:INFO:_display_container: 2
2024-02-27 21:18:11,701:INFO:RandomForestRegressor(n_jobs=-1, random_state=5142)
2024-02-27 21:18:11,701:INFO:create_model() successfully completed......................................
2024-02-27 21:18:12,588:ERROR:create_model() for RandomForestRegressor(n_jobs=-1, random_state=5142) raised an exception or returned all 0.0:
2024-02-27 21:18:12,588:ERROR:Traceback (most recent call last):
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 797, in compare_models
    np.sum(
AssertionError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 818, in compare_models
    np.sum(
AssertionError

2024-02-27 21:18:12,588:INFO:Initializing Extra Trees Regressor
2024-02-27 21:18:12,588:INFO:Total runtime is 20.24877359867096 minutes
2024-02-27 21:18:12,588:INFO:SubProcess create_model() called ==================================
2024-02-27 21:18:12,598:INFO:Initializing create_model()
2024-02-27 21:18:12,598:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:18:12,598:INFO:Checking exceptions
2024-02-27 21:18:12,598:INFO:Importing libraries
2024-02-27 21:18:12,599:INFO:Copying training dataset
2024-02-27 21:18:13,282:INFO:Defining folds
2024-02-27 21:18:13,282:INFO:Declaring metric variables
2024-02-27 21:18:13,288:INFO:Importing untrained model
2024-02-27 21:18:13,288:INFO:Extra Trees Regressor Imported successfully
2024-02-27 21:18:13,288:INFO:Starting cross validation
2024-02-27 21:18:13,288:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:23:31,955:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
9 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
8 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 67108864 bytes

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 33554432 bytes

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-02-27 21:23:32,003:INFO:Calculating mean and std
2024-02-27 21:23:32,071:INFO:Creating metrics dataframe
2024-02-27 21:23:32,120:INFO:Uploading results into container
2024-02-27 21:23:32,137:INFO:Uploading model into container now
2024-02-27 21:23:32,137:INFO:_master_model_container: 15
2024-02-27 21:23:32,137:INFO:_display_container: 2
2024-02-27 21:23:32,154:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=5142)
2024-02-27 21:23:32,154:INFO:create_model() successfully completed......................................
2024-02-27 21:23:33,239:WARNING:create_model() for ExtraTreesRegressor(n_jobs=-1, random_state=5142) raised an exception or returned all 0.0, trying without fit_kwargs:
2024-02-27 21:23:33,239:WARNING:Traceback (most recent call last):
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 797, in compare_models
    np.sum(
AssertionError

2024-02-27 21:23:33,239:INFO:Initializing create_model()
2024-02-27 21:23:33,239:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:23:33,239:INFO:Checking exceptions
2024-02-27 21:23:33,239:INFO:Importing libraries
2024-02-27 21:23:33,251:INFO:Copying training dataset
2024-02-27 21:23:34,523:INFO:Defining folds
2024-02-27 21:23:34,523:INFO:Declaring metric variables
2024-02-27 21:23:34,543:INFO:Importing untrained model
2024-02-27 21:23:34,546:INFO:Extra Trees Regressor Imported successfully
2024-02-27 21:23:34,546:INFO:Starting cross validation
2024-02-27 21:23:34,554:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:27:47,652:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
8 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
2 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 33554432 bytes

--------------------------------------------------------------------------------
6 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 67108864 bytes

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-02-27 21:27:47,692:INFO:Calculating mean and std
2024-02-27 21:27:47,769:INFO:Creating metrics dataframe
2024-02-27 21:27:47,836:INFO:Uploading results into container
2024-02-27 21:27:47,836:INFO:Uploading model into container now
2024-02-27 21:27:47,853:INFO:_master_model_container: 16
2024-02-27 21:27:47,853:INFO:_display_container: 2
2024-02-27 21:27:47,853:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=5142)
2024-02-27 21:27:47,853:INFO:create_model() successfully completed......................................
2024-02-27 21:27:49,085:ERROR:create_model() for ExtraTreesRegressor(n_jobs=-1, random_state=5142) raised an exception or returned all 0.0:
2024-02-27 21:27:49,085:ERROR:Traceback (most recent call last):
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 797, in compare_models
    np.sum(
AssertionError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 818, in compare_models
    np.sum(
AssertionError

2024-02-27 21:27:49,085:INFO:Initializing AdaBoost Regressor
2024-02-27 21:27:49,085:INFO:Total runtime is 29.857053760687513 minutes
2024-02-27 21:27:49,097:INFO:SubProcess create_model() called ==================================
2024-02-27 21:27:49,098:INFO:Initializing create_model()
2024-02-27 21:27:49,099:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:27:49,099:INFO:Checking exceptions
2024-02-27 21:27:49,099:INFO:Importing libraries
2024-02-27 21:27:49,100:INFO:Copying training dataset
2024-02-27 21:27:50,335:INFO:Defining folds
2024-02-27 21:27:50,335:INFO:Declaring metric variables
2024-02-27 21:27:50,335:INFO:Importing untrained model
2024-02-27 21:27:50,345:INFO:AdaBoost Regressor Imported successfully
2024-02-27 21:27:50,353:INFO:Starting cross validation
2024-02-27 21:27:50,354:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:28:27,726:INFO:Calculating mean and std
2024-02-27 21:28:27,726:INFO:Creating metrics dataframe
2024-02-27 21:28:27,726:INFO:Uploading results into container
2024-02-27 21:28:27,733:INFO:Uploading model into container now
2024-02-27 21:28:27,734:INFO:_master_model_container: 17
2024-02-27 21:28:27,734:INFO:_display_container: 2
2024-02-27 21:28:27,734:INFO:AdaBoostRegressor(random_state=5142)
2024-02-27 21:28:27,734:INFO:create_model() successfully completed......................................
2024-02-27 21:28:27,869:INFO:SubProcess create_model() end ==================================
2024-02-27 21:28:27,869:INFO:Creating metrics dataframe
2024-02-27 21:28:27,900:INFO:Initializing Gradient Boosting Regressor
2024-02-27 21:28:27,900:INFO:Total runtime is 30.503966585795087 minutes
2024-02-27 21:28:27,908:INFO:SubProcess create_model() called ==================================
2024-02-27 21:28:27,908:INFO:Initializing create_model()
2024-02-27 21:28:27,908:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:28:27,908:INFO:Checking exceptions
2024-02-27 21:28:27,908:INFO:Importing libraries
2024-02-27 21:28:27,908:INFO:Copying training dataset
2024-02-27 21:28:28,419:INFO:Defining folds
2024-02-27 21:28:28,419:INFO:Declaring metric variables
2024-02-27 21:28:28,419:INFO:Importing untrained model
2024-02-27 21:28:28,428:INFO:Gradient Boosting Regressor Imported successfully
2024-02-27 21:28:28,435:INFO:Starting cross validation
2024-02-27 21:28:28,435:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:32:37,350:INFO:Calculating mean and std
2024-02-27 21:32:37,350:INFO:Creating metrics dataframe
2024-02-27 21:32:37,350:INFO:Uploading results into container
2024-02-27 21:32:37,350:INFO:Uploading model into container now
2024-02-27 21:32:37,350:INFO:_master_model_container: 18
2024-02-27 21:32:37,350:INFO:_display_container: 2
2024-02-27 21:32:37,350:INFO:GradientBoostingRegressor(random_state=5142)
2024-02-27 21:32:37,350:INFO:create_model() successfully completed......................................
2024-02-27 21:32:37,495:INFO:SubProcess create_model() end ==================================
2024-02-27 21:32:37,495:INFO:Creating metrics dataframe
2024-02-27 21:32:37,495:INFO:Initializing Extreme Gradient Boosting
2024-02-27 21:32:37,495:INFO:Total runtime is 34.66388650337855 minutes
2024-02-27 21:32:37,495:INFO:SubProcess create_model() called ==================================
2024-02-27 21:32:37,495:INFO:Initializing create_model()
2024-02-27 21:32:37,495:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:32:37,511:INFO:Checking exceptions
2024-02-27 21:32:37,511:INFO:Importing libraries
2024-02-27 21:32:37,511:INFO:Copying training dataset
2024-02-27 21:32:37,996:INFO:Defining folds
2024-02-27 21:32:37,996:INFO:Declaring metric variables
2024-02-27 21:32:38,008:INFO:Importing untrained model
2024-02-27 21:32:38,014:INFO:Extreme Gradient Boosting Imported successfully
2024-02-27 21:32:38,014:INFO:Starting cross validation
2024-02-27 21:32:38,024:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:33:02,357:INFO:Calculating mean and std
2024-02-27 21:33:02,358:INFO:Creating metrics dataframe
2024-02-27 21:33:02,358:INFO:Uploading results into container
2024-02-27 21:33:02,363:INFO:Uploading model into container now
2024-02-27 21:33:02,364:INFO:_master_model_container: 19
2024-02-27 21:33:02,364:INFO:_display_container: 2
2024-02-27 21:33:02,366:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=5142, ...)
2024-02-27 21:33:02,367:INFO:create_model() successfully completed......................................
2024-02-27 21:33:02,512:INFO:SubProcess create_model() end ==================================
2024-02-27 21:33:02,512:INFO:Creating metrics dataframe
2024-02-27 21:33:02,525:INFO:Initializing Light Gradient Boosting Machine
2024-02-27 21:33:02,525:INFO:Total runtime is 35.08105902671814 minutes
2024-02-27 21:33:02,528:INFO:SubProcess create_model() called ==================================
2024-02-27 21:33:02,528:INFO:Initializing create_model()
2024-02-27 21:33:02,528:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:33:02,528:INFO:Checking exceptions
2024-02-27 21:33:02,528:INFO:Importing libraries
2024-02-27 21:33:02,528:INFO:Copying training dataset
2024-02-27 21:33:03,007:INFO:Defining folds
2024-02-27 21:33:03,007:INFO:Declaring metric variables
2024-02-27 21:33:03,021:INFO:Importing untrained model
2024-02-27 21:33:03,025:INFO:Light Gradient Boosting Machine Imported successfully
2024-02-27 21:33:03,028:INFO:Starting cross validation
2024-02-27 21:33:03,028:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:33:20,625:INFO:Calculating mean and std
2024-02-27 21:33:20,625:INFO:Creating metrics dataframe
2024-02-27 21:33:20,629:INFO:Uploading results into container
2024-02-27 21:33:20,629:INFO:Uploading model into container now
2024-02-27 21:33:20,629:INFO:_master_model_container: 20
2024-02-27 21:33:20,629:INFO:_display_container: 2
2024-02-27 21:33:20,629:INFO:LGBMRegressor(n_jobs=-1, random_state=5142)
2024-02-27 21:33:20,629:INFO:create_model() successfully completed......................................
2024-02-27 21:33:20,795:INFO:SubProcess create_model() end ==================================
2024-02-27 21:33:20,795:INFO:Creating metrics dataframe
2024-02-27 21:33:20,795:INFO:Initializing CatBoost Regressor
2024-02-27 21:33:20,795:INFO:Total runtime is 35.38555392026901 minutes
2024-02-27 21:33:20,812:INFO:SubProcess create_model() called ==================================
2024-02-27 21:33:20,812:INFO:Initializing create_model()
2024-02-27 21:33:20,812:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=catboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:33:20,812:INFO:Checking exceptions
2024-02-27 21:33:20,812:INFO:Importing libraries
2024-02-27 21:33:20,813:INFO:Copying training dataset
2024-02-27 21:33:21,365:INFO:Defining folds
2024-02-27 21:33:21,365:INFO:Declaring metric variables
2024-02-27 21:33:21,365:INFO:Importing untrained model
2024-02-27 21:33:21,380:INFO:CatBoost Regressor Imported successfully
2024-02-27 21:33:21,387:INFO:Starting cross validation
2024-02-27 21:33:21,387:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:41:42,481:INFO:Calculating mean and std
2024-02-27 21:41:42,491:INFO:Creating metrics dataframe
2024-02-27 21:41:42,496:INFO:Uploading results into container
2024-02-27 21:41:42,497:INFO:Uploading model into container now
2024-02-27 21:41:42,497:INFO:_master_model_container: 21
2024-02-27 21:41:42,497:INFO:_display_container: 2
2024-02-27 21:41:42,497:INFO:<catboost.core.CatBoostRegressor object at 0x000001944F593B90>
2024-02-27 21:41:42,497:INFO:create_model() successfully completed......................................
2024-02-27 21:41:42,657:INFO:SubProcess create_model() end ==================================
2024-02-27 21:41:42,657:INFO:Creating metrics dataframe
2024-02-27 21:41:42,673:INFO:Initializing Dummy Regressor
2024-02-27 21:41:42,673:INFO:Total runtime is 43.750181253751116 minutes
2024-02-27 21:41:42,686:INFO:SubProcess create_model() called ==================================
2024-02-27 21:41:42,687:INFO:Initializing create_model()
2024-02-27 21:41:42,687:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000019460220610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:41:42,687:INFO:Checking exceptions
2024-02-27 21:41:42,687:INFO:Importing libraries
2024-02-27 21:41:42,687:INFO:Copying training dataset
2024-02-27 21:41:43,221:INFO:Defining folds
2024-02-27 21:41:43,221:INFO:Declaring metric variables
2024-02-27 21:41:43,221:INFO:Importing untrained model
2024-02-27 21:41:43,221:INFO:Dummy Regressor Imported successfully
2024-02-27 21:41:43,221:INFO:Starting cross validation
2024-02-27 21:41:43,237:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-02-27 21:41:44,050:INFO:Calculating mean and std
2024-02-27 21:41:44,050:INFO:Creating metrics dataframe
2024-02-27 21:41:44,054:INFO:Uploading results into container
2024-02-27 21:41:44,054:INFO:Uploading model into container now
2024-02-27 21:41:44,054:INFO:_master_model_container: 22
2024-02-27 21:41:44,054:INFO:_display_container: 2
2024-02-27 21:41:44,054:INFO:DummyRegressor()
2024-02-27 21:41:44,054:INFO:create_model() successfully completed......................................
2024-02-27 21:41:44,207:INFO:SubProcess create_model() end ==================================
2024-02-27 21:41:44,207:INFO:Creating metrics dataframe
2024-02-27 21:41:44,221:INFO:Initializing create_model()
2024-02-27 21:41:44,237:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001942C080110>, estimator=<catboost.core.CatBoostRegressor object at 0x000001944F593B90>, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-02-27 21:41:44,237:INFO:Checking exceptions
2024-02-27 21:41:44,246:INFO:Importing libraries
2024-02-27 21:41:44,246:INFO:Copying training dataset
2024-02-27 21:41:44,788:INFO:Defining folds
2024-02-27 21:41:44,788:INFO:Declaring metric variables
2024-02-27 21:41:44,788:INFO:Importing untrained model
2024-02-27 21:41:44,788:INFO:Declaring custom model
2024-02-27 21:41:44,788:INFO:CatBoost Regressor Imported successfully
2024-02-27 21:41:44,788:INFO:Cross validation set to False
2024-02-27 21:41:44,788:INFO:Fitting Model
2024-02-27 21:43:00,756:INFO:<catboost.core.CatBoostRegressor object at 0x000001944F482C90>
2024-02-27 21:43:00,756:INFO:create_model() successfully completed......................................
2024-02-27 21:43:00,997:INFO:_master_model_container: 22
2024-02-27 21:43:00,997:INFO:_display_container: 2
2024-02-27 21:43:00,998:INFO:<catboost.core.CatBoostRegressor object at 0x000001944F482C90>
2024-02-27 21:43:00,998:INFO:compare_models() successfully completed......................................
2024-03-05 19:06:13,054:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 19:06:13,055:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 19:06:13,055:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 19:06:13,055:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 19:06:29,255:INFO:PyCaret RegressionExperiment
2024-03-05 19:06:29,255:INFO:Logging name: reg-default-name
2024-03-05 19:06:29,255:INFO:ML Usecase: MLUsecase.REGRESSION
2024-03-05 19:06:29,255:INFO:version 3.3.0
2024-03-05 19:06:29,255:INFO:Initializing setup()
2024-03-05 19:06:29,255:INFO:self.USI: fbdd
2024-03-05 19:06:29,256:INFO:self._variable_keys: {'y_train', 'gpu_n_jobs_param', 'n_jobs_param', 'USI', 'gpu_param', 'exp_name_log', 'exp_id', 'X', 'target_param', 'data', 'transform_target_param', 'log_plots_param', 'idx', 'logging_param', '_ml_usecase', 'memory', 'seed', 'html_param', 'y_test', 'fold_groups_param', 'fold_generator', 'fold_shuffle_param', 'X_train', 'X_test', '_available_plots', 'pipeline', 'y'}
2024-03-05 19:06:29,256:INFO:Checking environment
2024-03-05 19:06:29,256:INFO:python_version: 3.11.5
2024-03-05 19:06:29,256:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-03-05 19:06:29,256:INFO:machine: AMD64
2024-03-05 19:06:29,256:INFO:platform: Windows-10-10.0.19045-SP0
2024-03-05 19:06:29,256:INFO:Memory: svmem(total=16889192448, available=7848472576, percent=53.5, used=9040719872, free=7848472576)
2024-03-05 19:06:29,256:INFO:Physical Core: 4
2024-03-05 19:06:29,256:INFO:Logical Core: 8
2024-03-05 19:06:29,256:INFO:Checking libraries
2024-03-05 19:06:29,256:INFO:System:
2024-03-05 19:06:29,256:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-03-05 19:06:29,256:INFO:executable: d:\anaconda\python.exe
2024-03-05 19:06:29,256:INFO:   machine: Windows-10-10.0.19045-SP0
2024-03-05 19:06:29,256:INFO:PyCaret required dependencies:
2024-03-05 19:06:29,258:INFO:                 pip: 23.2.1
2024-03-05 19:06:29,259:INFO:          setuptools: 68.0.0
2024-03-05 19:06:29,259:INFO:             pycaret: 3.3.0
2024-03-05 19:06:29,259:INFO:             IPython: 8.15.0
2024-03-05 19:06:29,259:INFO:          ipywidgets: 8.0.4
2024-03-05 19:06:29,259:INFO:                tqdm: 4.65.0
2024-03-05 19:06:29,259:INFO:               numpy: 1.24.3
2024-03-05 19:06:29,259:INFO:              pandas: 2.0.3
2024-03-05 19:06:29,259:INFO:              jinja2: 3.1.2
2024-03-05 19:06:29,259:INFO:               scipy: 1.11.1
2024-03-05 19:06:29,259:INFO:              joblib: 1.2.0
2024-03-05 19:06:29,259:INFO:             sklearn: 1.4.1.post1
2024-03-05 19:06:29,259:INFO:                pyod: 1.1.3
2024-03-05 19:06:29,259:INFO:            imblearn: 0.10.1
2024-03-05 19:06:29,259:INFO:   category_encoders: 2.6.3
2024-03-05 19:06:29,259:INFO:            lightgbm: 4.3.0
2024-03-05 19:06:29,259:INFO:               numba: 0.57.1
2024-03-05 19:06:29,259:INFO:            requests: 2.31.0
2024-03-05 19:06:29,259:INFO:          matplotlib: 3.7.2
2024-03-05 19:06:29,259:INFO:          scikitplot: 0.3.7
2024-03-05 19:06:29,259:INFO:         yellowbrick: 1.5
2024-03-05 19:06:29,259:INFO:              plotly: 5.19.0
2024-03-05 19:06:29,259:INFO:    plotly-resampler: Not installed
2024-03-05 19:06:29,259:INFO:             kaleido: 0.2.1
2024-03-05 19:06:29,260:INFO:           schemdraw: 0.15
2024-03-05 19:06:29,260:INFO:         statsmodels: 0.14.0
2024-03-05 19:06:29,260:INFO:              sktime: 0.26.1
2024-03-05 19:06:29,260:INFO:               tbats: 1.1.3
2024-03-05 19:06:29,260:INFO:            pmdarima: 2.0.4
2024-03-05 19:06:29,260:INFO:              psutil: 5.9.0
2024-03-05 19:06:29,260:INFO:          markupsafe: 2.1.1
2024-03-05 19:06:29,260:INFO:             pickle5: Not installed
2024-03-05 19:06:29,260:INFO:         cloudpickle: 2.2.1
2024-03-05 19:06:29,260:INFO:         deprecation: 2.1.0
2024-03-05 19:06:29,260:INFO:              xxhash: 2.0.2
2024-03-05 19:06:29,260:INFO:           wurlitzer: Not installed
2024-03-05 19:06:29,260:INFO:PyCaret optional dependencies:
2024-03-05 19:06:29,276:INFO:                shap: Not installed
2024-03-05 19:06:29,276:INFO:           interpret: Not installed
2024-03-05 19:06:29,276:INFO:                umap: Not installed
2024-03-05 19:06:29,277:INFO:     ydata_profiling: Not installed
2024-03-05 19:06:29,277:INFO:  explainerdashboard: Not installed
2024-03-05 19:06:29,277:INFO:             autoviz: Not installed
2024-03-05 19:06:29,277:INFO:           fairlearn: Not installed
2024-03-05 19:06:29,277:INFO:          deepchecks: Not installed
2024-03-05 19:06:29,277:INFO:             xgboost: 2.0.3
2024-03-05 19:06:29,277:INFO:            catboost: 1.2.2
2024-03-05 19:06:29,277:INFO:              kmodes: Not installed
2024-03-05 19:06:29,277:INFO:             mlxtend: Not installed
2024-03-05 19:06:29,277:INFO:       statsforecast: Not installed
2024-03-05 19:06:29,277:INFO:        tune_sklearn: Not installed
2024-03-05 19:06:29,277:INFO:                 ray: Not installed
2024-03-05 19:06:29,277:INFO:            hyperopt: Not installed
2024-03-05 19:06:29,277:INFO:              optuna: Not installed
2024-03-05 19:06:29,277:INFO:               skopt: Not installed
2024-03-05 19:06:29,277:INFO:              mlflow: Not installed
2024-03-05 19:06:29,277:INFO:              gradio: Not installed
2024-03-05 19:06:29,277:INFO:             fastapi: Not installed
2024-03-05 19:06:29,277:INFO:             uvicorn: Not installed
2024-03-05 19:06:29,277:INFO:              m2cgen: Not installed
2024-03-05 19:06:29,277:INFO:           evidently: Not installed
2024-03-05 19:06:29,277:INFO:               fugue: Not installed
2024-03-05 19:06:29,277:INFO:           streamlit: Not installed
2024-03-05 19:06:29,277:INFO:             prophet: Not installed
2024-03-05 19:06:29,277:INFO:None
2024-03-05 19:06:29,277:INFO:Set up data.
2024-03-05 19:06:29,546:INFO:Set up folding strategy.
2024-03-05 19:06:29,546:INFO:Set up train/test split.
2024-03-05 19:06:29,741:INFO:Set up index.
2024-03-05 19:06:29,772:INFO:Assigning column types.
2024-03-05 19:06:30,046:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-03-05 19:06:30,047:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-05 19:06:30,050:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 19:06:30,054:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 19:06:30,353:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 19:06:30,387:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 19:06:30,387:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:30,389:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:30,389:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-05 19:06:30,393:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 19:06:30,396:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 19:06:30,714:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 19:06:30,748:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 19:06:30,748:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:30,750:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:30,750:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-03-05 19:06:30,754:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 19:06:30,757:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 19:06:31,066:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 19:06:31,099:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 19:06:31,100:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:31,102:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:31,106:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 19:06:31,109:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 19:06:31,415:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 19:06:31,450:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 19:06:31,451:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:31,454:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:31,454:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-03-05 19:06:31,461:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 19:06:31,762:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 19:06:31,795:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 19:06:31,796:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:31,798:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:31,806:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 19:06:32,108:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 19:06:32,142:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 19:06:32,142:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:32,144:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:32,144:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-03-05 19:06:32,450:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 19:06:32,483:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 19:06:32,485:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:32,487:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:32,784:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 19:06:32,823:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 19:06:32,823:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:32,825:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:32,825:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-03-05 19:06:33,131:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 19:06:33,165:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:33,167:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:33,469:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 19:06:33,503:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:33,505:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:33,505:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-03-05 19:06:33,840:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:33,842:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:34,210:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:34,212:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:34,214:INFO:Preparing preprocessing pipeline...
2024-03-05 19:06:34,214:INFO:Set up simple imputation.
2024-03-05 19:06:34,781:INFO:Finished creating preprocessing pipeline.
2024-03-05 19:06:34,784:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\dell\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2024-03-05 19:06:34,784:INFO:Creating final display dataframe.
2024-03-05 19:06:35,928:INFO:Setup _display_container:                     Description             Value
0                    Session id              4084
1                        Target           Current
2                   Target type        Regression
3           Original data shape     (1257130, 13)
4        Transformed data shape     (1257130, 13)
5   Transformed train set shape      (879991, 13)
6    Transformed test set shape      (377139, 13)
7              Numeric features                12
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   TimeSeriesSplit
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              fbdd
2024-03-05 19:06:36,346:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:36,349:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:36,697:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 19:06:36,699:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 19:06:36,710:WARNING:C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\metrics.py:51: FutureWarning: The `needs_threshold` and `needs_proba` parameter are deprecated in version 1.4 and will be removed in 1.6. You can either let `response_method` be `None` or set it to `predict` to preserve the same behaviour.
  warnings.warn(

2024-03-05 19:06:36,711:INFO:setup() successfully completed in 7.46s...............
2024-03-05 19:06:36,711:INFO:Initializing compare_models()
2024-03-05 19:06:36,711:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-03-05 19:06:36,711:INFO:Checking exceptions
2024-03-05 19:06:36,844:INFO:Preparing display monitor
2024-03-05 19:06:36,870:INFO:Initializing Linear Regression
2024-03-05 19:06:36,870:INFO:Total runtime is 0.0 minutes
2024-03-05 19:06:36,874:INFO:SubProcess create_model() called ==================================
2024-03-05 19:06:36,875:INFO:Initializing create_model()
2024-03-05 19:06:36,875:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=lr, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:06:36,875:INFO:Checking exceptions
2024-03-05 19:06:36,875:INFO:Importing libraries
2024-03-05 19:06:36,875:INFO:Copying training dataset
2024-03-05 19:06:37,272:INFO:Defining folds
2024-03-05 19:06:37,272:INFO:Declaring metric variables
2024-03-05 19:06:37,275:INFO:Importing untrained model
2024-03-05 19:06:37,277:INFO:Linear Regression Imported successfully
2024-03-05 19:06:37,283:INFO:Starting cross validation
2024-03-05 19:06:37,294:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:06:46,256:INFO:Calculating mean and std
2024-03-05 19:06:46,258:INFO:Creating metrics dataframe
2024-03-05 19:06:46,260:INFO:Uploading results into container
2024-03-05 19:06:46,261:INFO:Uploading model into container now
2024-03-05 19:06:46,261:INFO:_master_model_container: 1
2024-03-05 19:06:46,261:INFO:_display_container: 2
2024-03-05 19:06:46,261:INFO:LinearRegression(n_jobs=-1)
2024-03-05 19:06:46,261:INFO:create_model() successfully completed......................................
2024-03-05 19:06:46,361:INFO:SubProcess create_model() end ==================================
2024-03-05 19:06:46,361:INFO:Creating metrics dataframe
2024-03-05 19:06:46,366:INFO:Initializing Lasso Regression
2024-03-05 19:06:46,366:INFO:Total runtime is 0.15826913515726726 minutes
2024-03-05 19:06:46,368:INFO:SubProcess create_model() called ==================================
2024-03-05 19:06:46,369:INFO:Initializing create_model()
2024-03-05 19:06:46,369:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=lasso, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:06:46,369:INFO:Checking exceptions
2024-03-05 19:06:46,369:INFO:Importing libraries
2024-03-05 19:06:46,369:INFO:Copying training dataset
2024-03-05 19:06:46,762:INFO:Defining folds
2024-03-05 19:06:46,762:INFO:Declaring metric variables
2024-03-05 19:06:46,765:INFO:Importing untrained model
2024-03-05 19:06:46,769:INFO:Lasso Regression Imported successfully
2024-03-05 19:06:46,776:INFO:Starting cross validation
2024-03-05 19:06:46,777:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:06:48,259:INFO:Calculating mean and std
2024-03-05 19:06:48,261:INFO:Creating metrics dataframe
2024-03-05 19:06:48,264:INFO:Uploading results into container
2024-03-05 19:06:48,264:INFO:Uploading model into container now
2024-03-05 19:06:48,265:INFO:_master_model_container: 2
2024-03-05 19:06:48,265:INFO:_display_container: 2
2024-03-05 19:06:48,266:INFO:Lasso(random_state=4084)
2024-03-05 19:06:48,266:INFO:create_model() successfully completed......................................
2024-03-05 19:06:48,356:INFO:SubProcess create_model() end ==================================
2024-03-05 19:06:48,356:INFO:Creating metrics dataframe
2024-03-05 19:06:48,365:INFO:Initializing Ridge Regression
2024-03-05 19:06:48,365:INFO:Total runtime is 0.191580335299174 minutes
2024-03-05 19:06:48,368:INFO:SubProcess create_model() called ==================================
2024-03-05 19:06:48,368:INFO:Initializing create_model()
2024-03-05 19:06:48,369:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=ridge, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:06:48,369:INFO:Checking exceptions
2024-03-05 19:06:48,369:INFO:Importing libraries
2024-03-05 19:06:48,369:INFO:Copying training dataset
2024-03-05 19:06:48,734:INFO:Defining folds
2024-03-05 19:06:48,734:INFO:Declaring metric variables
2024-03-05 19:06:48,738:INFO:Importing untrained model
2024-03-05 19:06:48,742:INFO:Ridge Regression Imported successfully
2024-03-05 19:06:48,748:INFO:Starting cross validation
2024-03-05 19:06:48,749:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:06:48,997:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.28823e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 19:06:49,040:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.1328e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 19:06:49,108:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=7.00956e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 19:06:49,198:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.25128e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 19:06:49,314:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.2704e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 19:06:49,437:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.58744e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 19:06:49,502:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.00227e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 19:06:49,551:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.58174e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 19:06:49,613:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26418e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 19:06:49,679:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.04342e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 19:06:49,826:INFO:Calculating mean and std
2024-03-05 19:06:49,828:INFO:Creating metrics dataframe
2024-03-05 19:06:49,835:INFO:Uploading results into container
2024-03-05 19:06:49,835:INFO:Uploading model into container now
2024-03-05 19:06:49,836:INFO:_master_model_container: 3
2024-03-05 19:06:49,836:INFO:_display_container: 2
2024-03-05 19:06:49,836:INFO:Ridge(random_state=4084)
2024-03-05 19:06:49,836:INFO:create_model() successfully completed......................................
2024-03-05 19:06:49,926:INFO:SubProcess create_model() end ==================================
2024-03-05 19:06:49,926:INFO:Creating metrics dataframe
2024-03-05 19:06:49,933:INFO:Initializing Elastic Net
2024-03-05 19:06:49,933:INFO:Total runtime is 0.2177074710528056 minutes
2024-03-05 19:06:49,935:INFO:SubProcess create_model() called ==================================
2024-03-05 19:06:49,935:INFO:Initializing create_model()
2024-03-05 19:06:49,935:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=en, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:06:49,935:INFO:Checking exceptions
2024-03-05 19:06:49,935:INFO:Importing libraries
2024-03-05 19:06:49,936:INFO:Copying training dataset
2024-03-05 19:06:50,318:INFO:Defining folds
2024-03-05 19:06:50,318:INFO:Declaring metric variables
2024-03-05 19:06:50,320:INFO:Importing untrained model
2024-03-05 19:06:50,324:INFO:Elastic Net Imported successfully
2024-03-05 19:06:50,331:INFO:Starting cross validation
2024-03-05 19:06:50,331:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:06:51,816:INFO:Calculating mean and std
2024-03-05 19:06:51,817:INFO:Creating metrics dataframe
2024-03-05 19:06:51,820:INFO:Uploading results into container
2024-03-05 19:06:51,822:INFO:Uploading model into container now
2024-03-05 19:06:51,823:INFO:_master_model_container: 4
2024-03-05 19:06:51,824:INFO:_display_container: 2
2024-03-05 19:06:51,824:INFO:ElasticNet(random_state=4084)
2024-03-05 19:06:51,824:INFO:create_model() successfully completed......................................
2024-03-05 19:06:51,920:INFO:SubProcess create_model() end ==================================
2024-03-05 19:06:51,920:INFO:Creating metrics dataframe
2024-03-05 19:06:51,926:INFO:Initializing Least Angle Regression
2024-03-05 19:06:51,926:INFO:Total runtime is 0.250930392742157 minutes
2024-03-05 19:06:51,930:INFO:SubProcess create_model() called ==================================
2024-03-05 19:06:51,930:INFO:Initializing create_model()
2024-03-05 19:06:51,930:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=lar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:06:51,930:INFO:Checking exceptions
2024-03-05 19:06:51,930:INFO:Importing libraries
2024-03-05 19:06:51,930:INFO:Copying training dataset
2024-03-05 19:06:52,301:INFO:Defining folds
2024-03-05 19:06:52,301:INFO:Declaring metric variables
2024-03-05 19:06:52,304:INFO:Importing untrained model
2024-03-05 19:06:52,308:INFO:Least Angle Regression Imported successfully
2024-03-05 19:06:52,315:INFO:Starting cross validation
2024-03-05 19:06:52,316:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:06:53,385:INFO:Calculating mean and std
2024-03-05 19:06:53,387:INFO:Creating metrics dataframe
2024-03-05 19:06:53,389:INFO:Uploading results into container
2024-03-05 19:06:53,389:INFO:Uploading model into container now
2024-03-05 19:06:53,389:INFO:_master_model_container: 5
2024-03-05 19:06:53,390:INFO:_display_container: 2
2024-03-05 19:06:53,390:INFO:Lars(random_state=4084)
2024-03-05 19:06:53,390:INFO:create_model() successfully completed......................................
2024-03-05 19:06:53,481:INFO:SubProcess create_model() end ==================================
2024-03-05 19:06:53,481:INFO:Creating metrics dataframe
2024-03-05 19:06:53,488:INFO:Initializing Lasso Least Angle Regression
2024-03-05 19:06:53,488:INFO:Total runtime is 0.27696317036946616 minutes
2024-03-05 19:06:53,492:INFO:SubProcess create_model() called ==================================
2024-03-05 19:06:53,492:INFO:Initializing create_model()
2024-03-05 19:06:53,492:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=llar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:06:53,492:INFO:Checking exceptions
2024-03-05 19:06:53,492:INFO:Importing libraries
2024-03-05 19:06:53,492:INFO:Copying training dataset
2024-03-05 19:06:53,858:INFO:Defining folds
2024-03-05 19:06:53,858:INFO:Declaring metric variables
2024-03-05 19:06:53,861:INFO:Importing untrained model
2024-03-05 19:06:53,865:INFO:Lasso Least Angle Regression Imported successfully
2024-03-05 19:06:53,871:INFO:Starting cross validation
2024-03-05 19:06:53,872:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:06:54,939:INFO:Calculating mean and std
2024-03-05 19:06:54,940:INFO:Creating metrics dataframe
2024-03-05 19:06:54,944:INFO:Uploading results into container
2024-03-05 19:06:54,945:INFO:Uploading model into container now
2024-03-05 19:06:54,946:INFO:_master_model_container: 6
2024-03-05 19:06:54,946:INFO:_display_container: 2
2024-03-05 19:06:54,946:INFO:LassoLars(random_state=4084)
2024-03-05 19:06:54,946:INFO:create_model() successfully completed......................................
2024-03-05 19:06:55,041:INFO:SubProcess create_model() end ==================================
2024-03-05 19:06:55,041:INFO:Creating metrics dataframe
2024-03-05 19:06:55,048:INFO:Initializing Orthogonal Matching Pursuit
2024-03-05 19:06:55,048:INFO:Total runtime is 0.30296804904937746 minutes
2024-03-05 19:06:55,051:INFO:SubProcess create_model() called ==================================
2024-03-05 19:06:55,051:INFO:Initializing create_model()
2024-03-05 19:06:55,051:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=omp, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:06:55,051:INFO:Checking exceptions
2024-03-05 19:06:55,051:INFO:Importing libraries
2024-03-05 19:06:55,052:INFO:Copying training dataset
2024-03-05 19:06:55,467:INFO:Defining folds
2024-03-05 19:06:55,467:INFO:Declaring metric variables
2024-03-05 19:06:55,470:INFO:Importing untrained model
2024-03-05 19:06:55,474:INFO:Orthogonal Matching Pursuit Imported successfully
2024-03-05 19:06:55,480:INFO:Starting cross validation
2024-03-05 19:06:55,481:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:06:56,536:INFO:Calculating mean and std
2024-03-05 19:06:56,537:INFO:Creating metrics dataframe
2024-03-05 19:06:56,539:INFO:Uploading results into container
2024-03-05 19:06:56,539:INFO:Uploading model into container now
2024-03-05 19:06:56,540:INFO:_master_model_container: 7
2024-03-05 19:06:56,540:INFO:_display_container: 2
2024-03-05 19:06:56,541:INFO:OrthogonalMatchingPursuit()
2024-03-05 19:06:56,541:INFO:create_model() successfully completed......................................
2024-03-05 19:06:56,631:INFO:SubProcess create_model() end ==================================
2024-03-05 19:06:56,632:INFO:Creating metrics dataframe
2024-03-05 19:06:56,639:INFO:Initializing Bayesian Ridge
2024-03-05 19:06:56,640:INFO:Total runtime is 0.3294895966847738 minutes
2024-03-05 19:06:56,642:INFO:SubProcess create_model() called ==================================
2024-03-05 19:06:56,643:INFO:Initializing create_model()
2024-03-05 19:06:56,643:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=br, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:06:56,643:INFO:Checking exceptions
2024-03-05 19:06:56,643:INFO:Importing libraries
2024-03-05 19:06:56,643:INFO:Copying training dataset
2024-03-05 19:06:57,035:INFO:Defining folds
2024-03-05 19:06:57,035:INFO:Declaring metric variables
2024-03-05 19:06:57,038:INFO:Importing untrained model
2024-03-05 19:06:57,041:INFO:Bayesian Ridge Imported successfully
2024-03-05 19:06:57,047:INFO:Starting cross validation
2024-03-05 19:06:57,048:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:06:58,520:INFO:Calculating mean and std
2024-03-05 19:06:58,522:INFO:Creating metrics dataframe
2024-03-05 19:06:58,524:INFO:Uploading results into container
2024-03-05 19:06:58,525:INFO:Uploading model into container now
2024-03-05 19:06:58,526:INFO:_master_model_container: 8
2024-03-05 19:06:58,526:INFO:_display_container: 2
2024-03-05 19:06:58,526:INFO:BayesianRidge()
2024-03-05 19:06:58,526:INFO:create_model() successfully completed......................................
2024-03-05 19:06:58,616:INFO:SubProcess create_model() end ==================================
2024-03-05 19:06:58,616:INFO:Creating metrics dataframe
2024-03-05 19:06:58,623:INFO:Initializing Passive Aggressive Regressor
2024-03-05 19:06:58,623:INFO:Total runtime is 0.3625452836354574 minutes
2024-03-05 19:06:58,626:INFO:SubProcess create_model() called ==================================
2024-03-05 19:06:58,628:INFO:Initializing create_model()
2024-03-05 19:06:58,628:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=par, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:06:58,628:INFO:Checking exceptions
2024-03-05 19:06:58,628:INFO:Importing libraries
2024-03-05 19:06:58,628:INFO:Copying training dataset
2024-03-05 19:06:58,991:INFO:Defining folds
2024-03-05 19:06:58,992:INFO:Declaring metric variables
2024-03-05 19:06:58,995:INFO:Importing untrained model
2024-03-05 19:06:58,999:INFO:Passive Aggressive Regressor Imported successfully
2024-03-05 19:06:59,004:INFO:Starting cross validation
2024-03-05 19:06:59,005:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:07:03,300:INFO:Calculating mean and std
2024-03-05 19:07:03,303:INFO:Creating metrics dataframe
2024-03-05 19:07:03,306:INFO:Uploading results into container
2024-03-05 19:07:03,306:INFO:Uploading model into container now
2024-03-05 19:07:03,307:INFO:_master_model_container: 9
2024-03-05 19:07:03,307:INFO:_display_container: 2
2024-03-05 19:07:03,307:INFO:PassiveAggressiveRegressor(random_state=4084)
2024-03-05 19:07:03,307:INFO:create_model() successfully completed......................................
2024-03-05 19:07:03,397:INFO:SubProcess create_model() end ==================================
2024-03-05 19:07:03,398:INFO:Creating metrics dataframe
2024-03-05 19:07:03,404:INFO:Initializing Huber Regressor
2024-03-05 19:07:03,404:INFO:Total runtime is 0.4422319849332174 minutes
2024-03-05 19:07:03,408:INFO:SubProcess create_model() called ==================================
2024-03-05 19:07:03,408:INFO:Initializing create_model()
2024-03-05 19:07:03,408:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=huber, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:07:03,409:INFO:Checking exceptions
2024-03-05 19:07:03,409:INFO:Importing libraries
2024-03-05 19:07:03,409:INFO:Copying training dataset
2024-03-05 19:07:03,787:INFO:Defining folds
2024-03-05 19:07:03,787:INFO:Declaring metric variables
2024-03-05 19:07:03,790:INFO:Importing untrained model
2024-03-05 19:07:03,793:INFO:Huber Regressor Imported successfully
2024-03-05 19:07:03,800:INFO:Starting cross validation
2024-03-05 19:07:03,800:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:07:07,891:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 19:07:13,068:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 19:07:18,258:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 19:07:20,836:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 19:07:25,047:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 19:07:28,250:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 19:07:30,808:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 19:07:35,687:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 19:07:38,831:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 19:07:39,013:INFO:Calculating mean and std
2024-03-05 19:07:39,014:INFO:Creating metrics dataframe
2024-03-05 19:07:39,016:INFO:Uploading results into container
2024-03-05 19:07:39,016:INFO:Uploading model into container now
2024-03-05 19:07:39,017:INFO:_master_model_container: 10
2024-03-05 19:07:39,017:INFO:_display_container: 2
2024-03-05 19:07:39,017:INFO:HuberRegressor()
2024-03-05 19:07:39,017:INFO:create_model() successfully completed......................................
2024-03-05 19:07:39,118:INFO:SubProcess create_model() end ==================================
2024-03-05 19:07:39,119:INFO:Creating metrics dataframe
2024-03-05 19:07:39,131:INFO:Initializing K Neighbors Regressor
2024-03-05 19:07:39,131:INFO:Total runtime is 1.0376850644747417 minutes
2024-03-05 19:07:39,136:INFO:SubProcess create_model() called ==================================
2024-03-05 19:07:39,136:INFO:Initializing create_model()
2024-03-05 19:07:39,136:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=knn, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:07:39,136:INFO:Checking exceptions
2024-03-05 19:07:39,136:INFO:Importing libraries
2024-03-05 19:07:39,136:INFO:Copying training dataset
2024-03-05 19:07:39,643:INFO:Defining folds
2024-03-05 19:07:39,644:INFO:Declaring metric variables
2024-03-05 19:07:39,649:INFO:Importing untrained model
2024-03-05 19:07:39,653:INFO:K Neighbors Regressor Imported successfully
2024-03-05 19:07:39,659:INFO:Starting cross validation
2024-03-05 19:07:39,662:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:08:14,060:INFO:Calculating mean and std
2024-03-05 19:08:14,062:INFO:Creating metrics dataframe
2024-03-05 19:08:14,065:INFO:Uploading results into container
2024-03-05 19:08:14,066:INFO:Uploading model into container now
2024-03-05 19:08:14,067:INFO:_master_model_container: 11
2024-03-05 19:08:14,067:INFO:_display_container: 2
2024-03-05 19:08:14,067:INFO:KNeighborsRegressor(n_jobs=-1)
2024-03-05 19:08:14,067:INFO:create_model() successfully completed......................................
2024-03-05 19:08:14,158:INFO:SubProcess create_model() end ==================================
2024-03-05 19:08:14,158:INFO:Creating metrics dataframe
2024-03-05 19:08:14,166:INFO:Initializing Decision Tree Regressor
2024-03-05 19:08:14,166:INFO:Total runtime is 1.6215905189514161 minutes
2024-03-05 19:08:14,170:INFO:SubProcess create_model() called ==================================
2024-03-05 19:08:14,170:INFO:Initializing create_model()
2024-03-05 19:08:14,170:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=dt, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:08:14,170:INFO:Checking exceptions
2024-03-05 19:08:14,170:INFO:Importing libraries
2024-03-05 19:08:14,170:INFO:Copying training dataset
2024-03-05 19:08:14,561:INFO:Defining folds
2024-03-05 19:08:14,561:INFO:Declaring metric variables
2024-03-05 19:08:14,564:INFO:Importing untrained model
2024-03-05 19:08:14,567:INFO:Decision Tree Regressor Imported successfully
2024-03-05 19:08:14,572:INFO:Starting cross validation
2024-03-05 19:08:14,573:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:08:34,422:INFO:Calculating mean and std
2024-03-05 19:08:34,424:INFO:Creating metrics dataframe
2024-03-05 19:08:34,427:INFO:Uploading results into container
2024-03-05 19:08:34,427:INFO:Uploading model into container now
2024-03-05 19:08:34,428:INFO:_master_model_container: 12
2024-03-05 19:08:34,428:INFO:_display_container: 2
2024-03-05 19:08:34,428:INFO:DecisionTreeRegressor(random_state=4084)
2024-03-05 19:08:34,428:INFO:create_model() successfully completed......................................
2024-03-05 19:08:34,517:INFO:SubProcess create_model() end ==================================
2024-03-05 19:08:34,517:INFO:Creating metrics dataframe
2024-03-05 19:08:34,527:INFO:Initializing Random Forest Regressor
2024-03-05 19:08:34,527:INFO:Total runtime is 1.9609483957290652 minutes
2024-03-05 19:08:34,530:INFO:SubProcess create_model() called ==================================
2024-03-05 19:08:34,531:INFO:Initializing create_model()
2024-03-05 19:08:34,531:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=rf, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:08:34,532:INFO:Checking exceptions
2024-03-05 19:08:34,532:INFO:Importing libraries
2024-03-05 19:08:34,532:INFO:Copying training dataset
2024-03-05 19:08:34,891:INFO:Defining folds
2024-03-05 19:08:34,891:INFO:Declaring metric variables
2024-03-05 19:08:34,895:INFO:Importing untrained model
2024-03-05 19:08:34,899:INFO:Random Forest Regressor Imported successfully
2024-03-05 19:08:34,905:INFO:Starting cross validation
2024-03-05 19:08:34,906:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 19:26:39,246:INFO:Calculating mean and std
2024-03-05 19:26:39,344:INFO:Creating metrics dataframe
2024-03-05 19:26:39,433:INFO:Uploading results into container
2024-03-05 19:26:39,433:INFO:Uploading model into container now
2024-03-05 19:26:39,453:INFO:_master_model_container: 13
2024-03-05 19:26:39,453:INFO:_display_container: 2
2024-03-05 19:26:39,470:INFO:RandomForestRegressor(n_jobs=-1, random_state=4084)
2024-03-05 19:26:39,470:INFO:create_model() successfully completed......................................
2024-03-05 19:26:40,297:INFO:SubProcess create_model() end ==================================
2024-03-05 19:26:40,297:INFO:Creating metrics dataframe
2024-03-05 19:26:40,333:INFO:Initializing Extra Trees Regressor
2024-03-05 19:26:40,333:INFO:Total runtime is 20.05771768093109 minutes
2024-03-05 19:26:40,333:INFO:SubProcess create_model() called ==================================
2024-03-05 19:26:40,333:INFO:Initializing create_model()
2024-03-05 19:26:40,333:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025F07E1D950>, estimator=et, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025F0A75DE90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 19:26:40,333:INFO:Checking exceptions
2024-03-05 19:26:40,345:INFO:Importing libraries
2024-03-05 19:26:40,347:INFO:Copying training dataset
2024-03-05 19:26:41,034:INFO:Defining folds
2024-03-05 19:26:41,034:INFO:Declaring metric variables
2024-03-05 19:26:41,034:INFO:Importing untrained model
2024-03-05 19:26:41,049:INFO:Extra Trees Regressor Imported successfully
2024-03-05 19:26:41,049:INFO:Starting cross validation
2024-03-05 19:26:41,049:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:14:06,427:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 20:14:06,427:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 20:14:06,427:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 20:14:06,427:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 20:14:06,814:INFO:PyCaret RegressionExperiment
2024-03-05 20:14:06,814:INFO:Logging name: reg-default-name
2024-03-05 20:14:06,814:INFO:ML Usecase: MLUsecase.REGRESSION
2024-03-05 20:14:06,814:INFO:version 3.3.0
2024-03-05 20:14:06,814:INFO:Initializing setup()
2024-03-05 20:14:06,814:INFO:self.USI: 7238
2024-03-05 20:14:06,814:INFO:self._variable_keys: {'_available_plots', 'gpu_param', 'USI', 'gpu_n_jobs_param', 'idx', 'exp_name_log', 'data', 'logging_param', 'fold_shuffle_param', 'pipeline', 'target_param', 'html_param', 'X_train', 'y_train', 'y', 'log_plots_param', 'transform_target_param', 'exp_id', 'X', '_ml_usecase', 'fold_generator', 'X_test', 'y_test', 'fold_groups_param', 'seed', 'n_jobs_param', 'memory'}
2024-03-05 20:14:06,814:INFO:Checking environment
2024-03-05 20:14:06,814:INFO:python_version: 3.11.5
2024-03-05 20:14:06,814:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-03-05 20:14:06,814:INFO:machine: AMD64
2024-03-05 20:14:06,814:INFO:platform: Windows-10-10.0.19045-SP0
2024-03-05 20:14:06,814:INFO:Memory: svmem(total=16889192448, available=9494380544, percent=43.8, used=7394811904, free=9494380544)
2024-03-05 20:14:06,814:INFO:Physical Core: 4
2024-03-05 20:14:06,814:INFO:Logical Core: 8
2024-03-05 20:14:06,814:INFO:Checking libraries
2024-03-05 20:14:06,814:INFO:System:
2024-03-05 20:14:06,814:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-03-05 20:14:06,814:INFO:executable: d:\anaconda\python.exe
2024-03-05 20:14:06,814:INFO:   machine: Windows-10-10.0.19045-SP0
2024-03-05 20:14:06,814:INFO:PyCaret required dependencies:
2024-03-05 20:14:06,816:INFO:                 pip: 23.2.1
2024-03-05 20:14:06,816:INFO:          setuptools: 68.0.0
2024-03-05 20:14:06,816:INFO:             pycaret: 3.3.0
2024-03-05 20:14:06,816:INFO:             IPython: 8.15.0
2024-03-05 20:14:06,816:INFO:          ipywidgets: 8.0.4
2024-03-05 20:14:06,816:INFO:                tqdm: 4.65.0
2024-03-05 20:14:06,816:INFO:               numpy: 1.24.3
2024-03-05 20:14:06,816:INFO:              pandas: 2.0.3
2024-03-05 20:14:06,816:INFO:              jinja2: 3.1.2
2024-03-05 20:14:06,816:INFO:               scipy: 1.11.1
2024-03-05 20:14:06,817:INFO:              joblib: 1.2.0
2024-03-05 20:14:06,817:INFO:             sklearn: 1.4.1.post1
2024-03-05 20:14:06,817:INFO:                pyod: 1.1.3
2024-03-05 20:14:06,817:INFO:            imblearn: 0.10.1
2024-03-05 20:14:06,817:INFO:   category_encoders: 2.6.3
2024-03-05 20:14:06,817:INFO:            lightgbm: 4.3.0
2024-03-05 20:14:06,817:INFO:               numba: 0.57.1
2024-03-05 20:14:06,817:INFO:            requests: 2.31.0
2024-03-05 20:14:06,817:INFO:          matplotlib: 3.7.2
2024-03-05 20:14:06,817:INFO:          scikitplot: 0.3.7
2024-03-05 20:14:06,817:INFO:         yellowbrick: 1.5
2024-03-05 20:14:06,817:INFO:              plotly: 5.19.0
2024-03-05 20:14:06,817:INFO:    plotly-resampler: Not installed
2024-03-05 20:14:06,817:INFO:             kaleido: 0.2.1
2024-03-05 20:14:06,817:INFO:           schemdraw: 0.15
2024-03-05 20:14:06,817:INFO:         statsmodels: 0.14.0
2024-03-05 20:14:06,817:INFO:              sktime: 0.26.1
2024-03-05 20:14:06,817:INFO:               tbats: 1.1.3
2024-03-05 20:14:06,817:INFO:            pmdarima: 2.0.4
2024-03-05 20:14:06,817:INFO:              psutil: 5.9.0
2024-03-05 20:14:06,817:INFO:          markupsafe: 2.1.1
2024-03-05 20:14:06,817:INFO:             pickle5: Not installed
2024-03-05 20:14:06,817:INFO:         cloudpickle: 2.2.1
2024-03-05 20:14:06,817:INFO:         deprecation: 2.1.0
2024-03-05 20:14:06,817:INFO:              xxhash: 2.0.2
2024-03-05 20:14:06,817:INFO:           wurlitzer: Not installed
2024-03-05 20:14:06,817:INFO:PyCaret optional dependencies:
2024-03-05 20:14:06,832:INFO:                shap: Not installed
2024-03-05 20:14:06,832:INFO:           interpret: Not installed
2024-03-05 20:14:06,832:INFO:                umap: Not installed
2024-03-05 20:14:06,832:INFO:     ydata_profiling: Not installed
2024-03-05 20:14:06,832:INFO:  explainerdashboard: Not installed
2024-03-05 20:14:06,832:INFO:             autoviz: Not installed
2024-03-05 20:14:06,832:INFO:           fairlearn: Not installed
2024-03-05 20:14:06,832:INFO:          deepchecks: Not installed
2024-03-05 20:14:06,832:INFO:             xgboost: 2.0.3
2024-03-05 20:14:06,832:INFO:            catboost: 1.2.2
2024-03-05 20:14:06,832:INFO:              kmodes: Not installed
2024-03-05 20:14:06,832:INFO:             mlxtend: Not installed
2024-03-05 20:14:06,832:INFO:       statsforecast: Not installed
2024-03-05 20:14:06,832:INFO:        tune_sklearn: Not installed
2024-03-05 20:14:06,832:INFO:                 ray: Not installed
2024-03-05 20:14:06,832:INFO:            hyperopt: Not installed
2024-03-05 20:14:06,832:INFO:              optuna: Not installed
2024-03-05 20:14:06,832:INFO:               skopt: Not installed
2024-03-05 20:14:06,832:INFO:              mlflow: Not installed
2024-03-05 20:14:06,833:INFO:              gradio: Not installed
2024-03-05 20:14:06,833:INFO:             fastapi: Not installed
2024-03-05 20:14:06,833:INFO:             uvicorn: Not installed
2024-03-05 20:14:06,833:INFO:              m2cgen: Not installed
2024-03-05 20:14:06,833:INFO:           evidently: Not installed
2024-03-05 20:14:06,833:INFO:               fugue: Not installed
2024-03-05 20:14:06,833:INFO:           streamlit: Not installed
2024-03-05 20:14:06,833:INFO:             prophet: Not installed
2024-03-05 20:14:06,833:INFO:None
2024-03-05 20:14:06,833:INFO:Set up data.
2024-03-05 20:14:07,077:INFO:Set up folding strategy.
2024-03-05 20:14:07,077:INFO:Set up train/test split.
2024-03-05 20:14:07,280:INFO:Set up index.
2024-03-05 20:14:07,322:INFO:Assigning column types.
2024-03-05 20:14:07,596:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-03-05 20:14:07,596:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-05 20:14:07,596:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 20:14:07,611:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:14:07,946:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:14:07,980:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:14:07,980:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:07,980:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:07,980:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-05 20:14:07,980:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 20:14:07,995:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:14:08,323:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:14:08,363:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:14:08,363:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:08,363:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:08,363:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-03-05 20:14:08,363:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 20:14:08,363:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:14:08,682:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:14:08,713:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:14:08,713:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:08,724:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:08,729:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 20:14:08,730:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:14:09,064:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:14:09,100:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:14:09,100:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:09,102:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:09,102:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-03-05 20:14:09,110:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:14:09,425:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:14:09,460:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:14:09,460:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:09,460:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:09,476:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:14:09,761:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:14:09,793:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:14:09,793:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:09,793:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:09,793:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-03-05 20:14:10,111:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:14:10,142:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:14:10,142:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:10,142:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:10,457:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:14:10,489:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:14:10,489:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:10,489:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:10,489:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-03-05 20:14:10,792:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:14:10,826:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:10,826:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:11,127:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:14:11,174:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:11,176:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:11,178:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-03-05 20:14:11,511:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:11,511:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:11,845:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:11,845:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:11,845:INFO:Preparing preprocessing pipeline...
2024-03-05 20:14:11,845:INFO:Set up simple imputation.
2024-03-05 20:14:12,308:INFO:Finished creating preprocessing pipeline.
2024-03-05 20:14:12,308:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\dell\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2024-03-05 20:14:12,308:INFO:Creating final display dataframe.
2024-03-05 20:14:13,411:INFO:Setup _display_container:                     Description             Value
0                    Session id               761
1                        Target           Current
2                   Target type        Regression
3           Original data shape     (1257130, 13)
4        Transformed data shape     (1257130, 13)
5   Transformed train set shape      (879991, 13)
6    Transformed test set shape      (377139, 13)
7              Numeric features                12
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   TimeSeriesSplit
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              7238
2024-03-05 20:14:13,792:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:13,792:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:14,149:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:14:14,149:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:14:14,149:WARNING:C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\metrics.py:51: FutureWarning: The `needs_threshold` and `needs_proba` parameter are deprecated in version 1.4 and will be removed in 1.6. You can either let `response_method` be `None` or set it to `predict` to preserve the same behaviour.
  warnings.warn(

2024-03-05 20:14:14,149:INFO:setup() successfully completed in 7.34s...............
2024-03-05 20:14:14,149:INFO:Initializing compare_models()
2024-03-05 20:14:14,149:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-03-05 20:14:14,149:INFO:Checking exceptions
2024-03-05 20:14:14,265:INFO:Preparing display monitor
2024-03-05 20:14:14,296:INFO:Initializing Linear Regression
2024-03-05 20:14:14,296:INFO:Total runtime is 0.0 minutes
2024-03-05 20:14:14,296:INFO:SubProcess create_model() called ==================================
2024-03-05 20:14:14,296:INFO:Initializing create_model()
2024-03-05 20:14:14,296:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=lr, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:14:14,296:INFO:Checking exceptions
2024-03-05 20:14:14,296:INFO:Importing libraries
2024-03-05 20:14:14,296:INFO:Copying training dataset
2024-03-05 20:14:14,679:INFO:Defining folds
2024-03-05 20:14:14,679:INFO:Declaring metric variables
2024-03-05 20:14:14,679:INFO:Importing untrained model
2024-03-05 20:14:14,679:INFO:Linear Regression Imported successfully
2024-03-05 20:14:14,694:INFO:Starting cross validation
2024-03-05 20:14:14,694:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:14:23,068:INFO:Calculating mean and std
2024-03-05 20:14:23,068:INFO:Creating metrics dataframe
2024-03-05 20:14:23,068:INFO:Uploading results into container
2024-03-05 20:14:23,068:INFO:Uploading model into container now
2024-03-05 20:14:23,068:INFO:_master_model_container: 1
2024-03-05 20:14:23,068:INFO:_display_container: 2
2024-03-05 20:14:23,068:INFO:LinearRegression(n_jobs=-1)
2024-03-05 20:14:23,068:INFO:create_model() successfully completed......................................
2024-03-05 20:14:23,179:INFO:SubProcess create_model() end ==================================
2024-03-05 20:14:23,181:INFO:Creating metrics dataframe
2024-03-05 20:14:23,183:INFO:Initializing Lasso Regression
2024-03-05 20:14:23,183:INFO:Total runtime is 0.1481041431427002 minutes
2024-03-05 20:14:23,183:INFO:SubProcess create_model() called ==================================
2024-03-05 20:14:23,183:INFO:Initializing create_model()
2024-03-05 20:14:23,183:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=lasso, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:14:23,183:INFO:Checking exceptions
2024-03-05 20:14:23,183:INFO:Importing libraries
2024-03-05 20:14:23,183:INFO:Copying training dataset
2024-03-05 20:14:23,551:INFO:Defining folds
2024-03-05 20:14:23,551:INFO:Declaring metric variables
2024-03-05 20:14:23,551:INFO:Importing untrained model
2024-03-05 20:14:23,563:INFO:Lasso Regression Imported successfully
2024-03-05 20:14:23,566:INFO:Starting cross validation
2024-03-05 20:14:23,566:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:14:25,147:INFO:Calculating mean and std
2024-03-05 20:14:25,150:INFO:Creating metrics dataframe
2024-03-05 20:14:25,150:INFO:Uploading results into container
2024-03-05 20:14:25,152:INFO:Uploading model into container now
2024-03-05 20:14:25,152:INFO:_master_model_container: 2
2024-03-05 20:14:25,152:INFO:_display_container: 2
2024-03-05 20:14:25,152:INFO:Lasso(random_state=761)
2024-03-05 20:14:25,152:INFO:create_model() successfully completed......................................
2024-03-05 20:14:25,240:INFO:SubProcess create_model() end ==================================
2024-03-05 20:14:25,240:INFO:Creating metrics dataframe
2024-03-05 20:14:25,248:INFO:Initializing Ridge Regression
2024-03-05 20:14:25,248:INFO:Total runtime is 0.18253037134806316 minutes
2024-03-05 20:14:25,252:INFO:SubProcess create_model() called ==================================
2024-03-05 20:14:25,252:INFO:Initializing create_model()
2024-03-05 20:14:25,252:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=ridge, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:14:25,252:INFO:Checking exceptions
2024-03-05 20:14:25,252:INFO:Importing libraries
2024-03-05 20:14:25,252:INFO:Copying training dataset
2024-03-05 20:14:25,600:INFO:Defining folds
2024-03-05 20:14:25,600:INFO:Declaring metric variables
2024-03-05 20:14:25,600:INFO:Importing untrained model
2024-03-05 20:14:25,609:INFO:Ridge Regression Imported successfully
2024-03-05 20:14:25,617:INFO:Starting cross validation
2024-03-05 20:14:25,618:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:14:25,849:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.28823e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:14:25,928:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.1328e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:14:25,998:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=7.00956e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:14:26,087:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.25128e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:14:26,177:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.2704e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:14:26,265:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.58744e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:14:26,351:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.00227e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:14:26,411:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.58174e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:14:26,470:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26418e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:14:26,544:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.04342e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:14:26,691:INFO:Calculating mean and std
2024-03-05 20:14:26,691:INFO:Creating metrics dataframe
2024-03-05 20:14:26,691:INFO:Uploading results into container
2024-03-05 20:14:26,691:INFO:Uploading model into container now
2024-03-05 20:14:26,691:INFO:_master_model_container: 3
2024-03-05 20:14:26,691:INFO:_display_container: 2
2024-03-05 20:14:26,691:INFO:Ridge(random_state=761)
2024-03-05 20:14:26,691:INFO:create_model() successfully completed......................................
2024-03-05 20:14:26,780:INFO:SubProcess create_model() end ==================================
2024-03-05 20:14:26,780:INFO:Creating metrics dataframe
2024-03-05 20:14:26,785:INFO:Initializing Elastic Net
2024-03-05 20:14:26,785:INFO:Total runtime is 0.20814354022343953 minutes
2024-03-05 20:14:26,785:INFO:SubProcess create_model() called ==================================
2024-03-05 20:14:26,785:INFO:Initializing create_model()
2024-03-05 20:14:26,785:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=en, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:14:26,785:INFO:Checking exceptions
2024-03-05 20:14:26,785:INFO:Importing libraries
2024-03-05 20:14:26,785:INFO:Copying training dataset
2024-03-05 20:14:27,181:INFO:Defining folds
2024-03-05 20:14:27,181:INFO:Declaring metric variables
2024-03-05 20:14:27,186:INFO:Importing untrained model
2024-03-05 20:14:27,186:INFO:Elastic Net Imported successfully
2024-03-05 20:14:27,186:INFO:Starting cross validation
2024-03-05 20:14:27,186:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:14:28,617:INFO:Calculating mean and std
2024-03-05 20:14:28,617:INFO:Creating metrics dataframe
2024-03-05 20:14:28,617:INFO:Uploading results into container
2024-03-05 20:14:28,624:INFO:Uploading model into container now
2024-03-05 20:14:28,626:INFO:_master_model_container: 4
2024-03-05 20:14:28,627:INFO:_display_container: 2
2024-03-05 20:14:28,627:INFO:ElasticNet(random_state=761)
2024-03-05 20:14:28,627:INFO:create_model() successfully completed......................................
2024-03-05 20:14:28,714:INFO:SubProcess create_model() end ==================================
2024-03-05 20:14:28,714:INFO:Creating metrics dataframe
2024-03-05 20:14:28,722:INFO:Initializing Least Angle Regression
2024-03-05 20:14:28,722:INFO:Total runtime is 0.24042992194493612 minutes
2024-03-05 20:14:28,724:INFO:SubProcess create_model() called ==================================
2024-03-05 20:14:28,725:INFO:Initializing create_model()
2024-03-05 20:14:28,725:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=lar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:14:28,725:INFO:Checking exceptions
2024-03-05 20:14:28,725:INFO:Importing libraries
2024-03-05 20:14:28,725:INFO:Copying training dataset
2024-03-05 20:14:29,083:INFO:Defining folds
2024-03-05 20:14:29,099:INFO:Declaring metric variables
2024-03-05 20:14:29,102:INFO:Importing untrained model
2024-03-05 20:14:29,102:INFO:Least Angle Regression Imported successfully
2024-03-05 20:14:29,102:INFO:Starting cross validation
2024-03-05 20:14:29,102:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:14:30,154:INFO:Calculating mean and std
2024-03-05 20:14:30,156:INFO:Creating metrics dataframe
2024-03-05 20:14:30,156:INFO:Uploading results into container
2024-03-05 20:14:30,156:INFO:Uploading model into container now
2024-03-05 20:14:30,156:INFO:_master_model_container: 5
2024-03-05 20:14:30,156:INFO:_display_container: 2
2024-03-05 20:14:30,156:INFO:Lars(random_state=761)
2024-03-05 20:14:30,156:INFO:create_model() successfully completed......................................
2024-03-05 20:14:30,234:INFO:SubProcess create_model() end ==================================
2024-03-05 20:14:30,234:INFO:Creating metrics dataframe
2024-03-05 20:14:30,251:INFO:Initializing Lasso Least Angle Regression
2024-03-05 20:14:30,251:INFO:Total runtime is 0.2659026821454366 minutes
2024-03-05 20:14:30,251:INFO:SubProcess create_model() called ==================================
2024-03-05 20:14:30,251:INFO:Initializing create_model()
2024-03-05 20:14:30,251:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=llar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:14:30,251:INFO:Checking exceptions
2024-03-05 20:14:30,251:INFO:Importing libraries
2024-03-05 20:14:30,251:INFO:Copying training dataset
2024-03-05 20:14:30,619:INFO:Defining folds
2024-03-05 20:14:30,619:INFO:Declaring metric variables
2024-03-05 20:14:30,619:INFO:Importing untrained model
2024-03-05 20:14:30,630:INFO:Lasso Least Angle Regression Imported successfully
2024-03-05 20:14:30,635:INFO:Starting cross validation
2024-03-05 20:14:30,635:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:14:31,683:INFO:Calculating mean and std
2024-03-05 20:14:31,685:INFO:Creating metrics dataframe
2024-03-05 20:14:31,685:INFO:Uploading results into container
2024-03-05 20:14:31,685:INFO:Uploading model into container now
2024-03-05 20:14:31,685:INFO:_master_model_container: 6
2024-03-05 20:14:31,685:INFO:_display_container: 2
2024-03-05 20:14:31,685:INFO:LassoLars(random_state=761)
2024-03-05 20:14:31,685:INFO:create_model() successfully completed......................................
2024-03-05 20:14:31,769:INFO:SubProcess create_model() end ==================================
2024-03-05 20:14:31,769:INFO:Creating metrics dataframe
2024-03-05 20:14:31,784:INFO:Initializing Orthogonal Matching Pursuit
2024-03-05 20:14:31,784:INFO:Total runtime is 0.29146470228830973 minutes
2024-03-05 20:14:31,791:INFO:SubProcess create_model() called ==================================
2024-03-05 20:14:31,791:INFO:Initializing create_model()
2024-03-05 20:14:31,791:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=omp, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:14:31,791:INFO:Checking exceptions
2024-03-05 20:14:31,791:INFO:Importing libraries
2024-03-05 20:14:31,791:INFO:Copying training dataset
2024-03-05 20:14:32,136:INFO:Defining folds
2024-03-05 20:14:32,136:INFO:Declaring metric variables
2024-03-05 20:14:32,151:INFO:Importing untrained model
2024-03-05 20:14:32,159:INFO:Orthogonal Matching Pursuit Imported successfully
2024-03-05 20:14:32,177:INFO:Starting cross validation
2024-03-05 20:14:32,186:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:14:33,230:INFO:Calculating mean and std
2024-03-05 20:14:33,231:INFO:Creating metrics dataframe
2024-03-05 20:14:33,235:INFO:Uploading results into container
2024-03-05 20:14:33,237:INFO:Uploading model into container now
2024-03-05 20:14:33,238:INFO:_master_model_container: 7
2024-03-05 20:14:33,238:INFO:_display_container: 2
2024-03-05 20:14:33,238:INFO:OrthogonalMatchingPursuit()
2024-03-05 20:14:33,238:INFO:create_model() successfully completed......................................
2024-03-05 20:14:33,337:INFO:SubProcess create_model() end ==================================
2024-03-05 20:14:33,337:INFO:Creating metrics dataframe
2024-03-05 20:14:33,337:INFO:Initializing Bayesian Ridge
2024-03-05 20:14:33,337:INFO:Total runtime is 0.317343799273173 minutes
2024-03-05 20:14:33,337:INFO:SubProcess create_model() called ==================================
2024-03-05 20:14:33,337:INFO:Initializing create_model()
2024-03-05 20:14:33,337:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=br, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:14:33,337:INFO:Checking exceptions
2024-03-05 20:14:33,337:INFO:Importing libraries
2024-03-05 20:14:33,337:INFO:Copying training dataset
2024-03-05 20:14:33,721:INFO:Defining folds
2024-03-05 20:14:33,721:INFO:Declaring metric variables
2024-03-05 20:14:33,724:INFO:Importing untrained model
2024-03-05 20:14:33,726:INFO:Bayesian Ridge Imported successfully
2024-03-05 20:14:33,726:INFO:Starting cross validation
2024-03-05 20:14:33,726:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:14:35,167:INFO:Calculating mean and std
2024-03-05 20:14:35,167:INFO:Creating metrics dataframe
2024-03-05 20:14:35,167:INFO:Uploading results into container
2024-03-05 20:14:35,167:INFO:Uploading model into container now
2024-03-05 20:14:35,167:INFO:_master_model_container: 8
2024-03-05 20:14:35,167:INFO:_display_container: 2
2024-03-05 20:14:35,167:INFO:BayesianRidge()
2024-03-05 20:14:35,167:INFO:create_model() successfully completed......................................
2024-03-05 20:14:35,254:INFO:SubProcess create_model() end ==================================
2024-03-05 20:14:35,254:INFO:Creating metrics dataframe
2024-03-05 20:14:35,254:INFO:Initializing Passive Aggressive Regressor
2024-03-05 20:14:35,254:INFO:Total runtime is 0.3492966691652934 minutes
2024-03-05 20:14:35,269:INFO:SubProcess create_model() called ==================================
2024-03-05 20:14:35,269:INFO:Initializing create_model()
2024-03-05 20:14:35,269:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=par, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:14:35,269:INFO:Checking exceptions
2024-03-05 20:14:35,269:INFO:Importing libraries
2024-03-05 20:14:35,269:INFO:Copying training dataset
2024-03-05 20:14:35,636:INFO:Defining folds
2024-03-05 20:14:35,636:INFO:Declaring metric variables
2024-03-05 20:14:35,636:INFO:Importing untrained model
2024-03-05 20:14:35,650:INFO:Passive Aggressive Regressor Imported successfully
2024-03-05 20:14:35,654:INFO:Starting cross validation
2024-03-05 20:14:35,654:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:14:41,331:INFO:Calculating mean and std
2024-03-05 20:14:41,331:INFO:Creating metrics dataframe
2024-03-05 20:14:41,331:INFO:Uploading results into container
2024-03-05 20:14:41,338:INFO:Uploading model into container now
2024-03-05 20:14:41,338:INFO:_master_model_container: 9
2024-03-05 20:14:41,338:INFO:_display_container: 2
2024-03-05 20:14:41,338:INFO:PassiveAggressiveRegressor(random_state=761)
2024-03-05 20:14:41,338:INFO:create_model() successfully completed......................................
2024-03-05 20:14:41,425:INFO:SubProcess create_model() end ==================================
2024-03-05 20:14:41,425:INFO:Creating metrics dataframe
2024-03-05 20:14:41,425:INFO:Initializing Huber Regressor
2024-03-05 20:14:41,425:INFO:Total runtime is 0.45214445193608604 minutes
2024-03-05 20:14:41,425:INFO:SubProcess create_model() called ==================================
2024-03-05 20:14:41,425:INFO:Initializing create_model()
2024-03-05 20:14:41,425:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=huber, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:14:41,425:INFO:Checking exceptions
2024-03-05 20:14:41,425:INFO:Importing libraries
2024-03-05 20:14:41,425:INFO:Copying training dataset
2024-03-05 20:14:41,799:INFO:Defining folds
2024-03-05 20:14:41,799:INFO:Declaring metric variables
2024-03-05 20:14:41,804:INFO:Importing untrained model
2024-03-05 20:14:41,807:INFO:Huber Regressor Imported successfully
2024-03-05 20:14:41,807:INFO:Starting cross validation
2024-03-05 20:14:41,807:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:14:45,584:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:14:51,422:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:14:56,207:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:14:59,164:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:15:03,508:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:15:06,285:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:15:09,166:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:15:13,767:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:15:17,221:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:15:17,397:INFO:Calculating mean and std
2024-03-05 20:15:17,397:INFO:Creating metrics dataframe
2024-03-05 20:15:17,402:INFO:Uploading results into container
2024-03-05 20:15:17,402:INFO:Uploading model into container now
2024-03-05 20:15:17,402:INFO:_master_model_container: 10
2024-03-05 20:15:17,402:INFO:_display_container: 2
2024-03-05 20:15:17,402:INFO:HuberRegressor()
2024-03-05 20:15:17,402:INFO:create_model() successfully completed......................................
2024-03-05 20:15:17,495:INFO:SubProcess create_model() end ==================================
2024-03-05 20:15:17,495:INFO:Creating metrics dataframe
2024-03-05 20:15:17,503:INFO:Initializing K Neighbors Regressor
2024-03-05 20:15:17,503:INFO:Total runtime is 1.053442394733429 minutes
2024-03-05 20:15:17,503:INFO:SubProcess create_model() called ==================================
2024-03-05 20:15:17,503:INFO:Initializing create_model()
2024-03-05 20:15:17,503:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=knn, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:15:17,503:INFO:Checking exceptions
2024-03-05 20:15:17,503:INFO:Importing libraries
2024-03-05 20:15:17,503:INFO:Copying training dataset
2024-03-05 20:15:17,854:INFO:Defining folds
2024-03-05 20:15:17,854:INFO:Declaring metric variables
2024-03-05 20:15:17,868:INFO:Importing untrained model
2024-03-05 20:15:17,871:INFO:K Neighbors Regressor Imported successfully
2024-03-05 20:15:17,871:INFO:Starting cross validation
2024-03-05 20:15:17,871:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:15:53,818:INFO:Calculating mean and std
2024-03-05 20:15:53,818:INFO:Creating metrics dataframe
2024-03-05 20:15:53,822:INFO:Uploading results into container
2024-03-05 20:15:53,822:INFO:Uploading model into container now
2024-03-05 20:15:53,822:INFO:_master_model_container: 11
2024-03-05 20:15:53,822:INFO:_display_container: 2
2024-03-05 20:15:53,822:INFO:KNeighborsRegressor(n_jobs=-1)
2024-03-05 20:15:53,824:INFO:create_model() successfully completed......................................
2024-03-05 20:15:53,935:INFO:SubProcess create_model() end ==================================
2024-03-05 20:15:53,935:INFO:Creating metrics dataframe
2024-03-05 20:15:53,947:INFO:Initializing Decision Tree Regressor
2024-03-05 20:15:53,947:INFO:Total runtime is 1.6608417908350628 minutes
2024-03-05 20:15:53,952:INFO:SubProcess create_model() called ==================================
2024-03-05 20:15:53,952:INFO:Initializing create_model()
2024-03-05 20:15:53,953:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=dt, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:15:53,953:INFO:Checking exceptions
2024-03-05 20:15:53,953:INFO:Importing libraries
2024-03-05 20:15:53,953:INFO:Copying training dataset
2024-03-05 20:15:54,450:INFO:Defining folds
2024-03-05 20:15:54,450:INFO:Declaring metric variables
2024-03-05 20:15:54,459:INFO:Importing untrained model
2024-03-05 20:15:54,459:INFO:Decision Tree Regressor Imported successfully
2024-03-05 20:15:54,469:INFO:Starting cross validation
2024-03-05 20:15:54,471:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:16:14,174:INFO:Calculating mean and std
2024-03-05 20:16:14,174:INFO:Creating metrics dataframe
2024-03-05 20:16:14,174:INFO:Uploading results into container
2024-03-05 20:16:14,174:INFO:Uploading model into container now
2024-03-05 20:16:14,174:INFO:_master_model_container: 12
2024-03-05 20:16:14,174:INFO:_display_container: 2
2024-03-05 20:16:14,174:INFO:DecisionTreeRegressor(random_state=761)
2024-03-05 20:16:14,174:INFO:create_model() successfully completed......................................
2024-03-05 20:16:14,257:INFO:SubProcess create_model() end ==================================
2024-03-05 20:16:14,257:INFO:Creating metrics dataframe
2024-03-05 20:16:14,257:INFO:Initializing Random Forest Regressor
2024-03-05 20:16:14,257:INFO:Total runtime is 1.99934298992157 minutes
2024-03-05 20:16:14,273:INFO:SubProcess create_model() called ==================================
2024-03-05 20:16:14,273:INFO:Initializing create_model()
2024-03-05 20:16:14,273:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=rf, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:16:14,273:INFO:Checking exceptions
2024-03-05 20:16:14,273:INFO:Importing libraries
2024-03-05 20:16:14,273:INFO:Copying training dataset
2024-03-05 20:16:14,645:INFO:Defining folds
2024-03-05 20:16:14,645:INFO:Declaring metric variables
2024-03-05 20:16:14,645:INFO:Importing untrained model
2024-03-05 20:16:14,652:INFO:Random Forest Regressor Imported successfully
2024-03-05 20:16:14,658:INFO:Starting cross validation
2024-03-05 20:16:14,658:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:27:36,884:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
5 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
3 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 33554432 bytes

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 67108864 bytes

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 182, in _parallel_build_trees
    sample_counts = np.bincount(indices, minlength=n_samples)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<__array_function__ internals>", line 200, in bincount
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 6.10 MiB for an array with shape (799992,) and data type int64

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-03-05 20:27:36,918:INFO:Calculating mean and std
2024-03-05 20:27:36,985:INFO:Creating metrics dataframe
2024-03-05 20:27:37,067:INFO:Uploading results into container
2024-03-05 20:27:37,067:INFO:Uploading model into container now
2024-03-05 20:27:37,080:INFO:_master_model_container: 13
2024-03-05 20:27:37,080:INFO:_display_container: 2
2024-03-05 20:27:37,085:INFO:RandomForestRegressor(n_jobs=-1, random_state=761)
2024-03-05 20:27:37,085:INFO:create_model() successfully completed......................................
2024-03-05 20:27:37,979:INFO:SubProcess create_model() end ==================================
2024-03-05 20:27:37,979:INFO:Creating metrics dataframe
2024-03-05 20:27:38,005:INFO:Initializing Extra Trees Regressor
2024-03-05 20:27:38,006:INFO:Total runtime is 13.395147260030111 minutes
2024-03-05 20:27:38,013:INFO:SubProcess create_model() called ==================================
2024-03-05 20:27:38,013:INFO:Initializing create_model()
2024-03-05 20:27:38,013:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021CA10D1A10>, estimator=et, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CA2260BD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:27:38,013:INFO:Checking exceptions
2024-03-05 20:27:38,015:INFO:Importing libraries
2024-03-05 20:27:38,015:INFO:Copying training dataset
2024-03-05 20:27:38,776:INFO:Defining folds
2024-03-05 20:27:38,776:INFO:Declaring metric variables
2024-03-05 20:27:38,789:INFO:Importing untrained model
2024-03-05 20:27:38,791:INFO:Extra Trees Regressor Imported successfully
2024-03-05 20:27:38,791:INFO:Starting cross validation
2024-03-05 20:27:38,802:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:31:57,932:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 20:31:57,932:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 20:31:57,932:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 20:31:57,932:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-05 20:31:58,248:INFO:PyCaret RegressionExperiment
2024-03-05 20:31:58,248:INFO:Logging name: reg-default-name
2024-03-05 20:31:58,248:INFO:ML Usecase: MLUsecase.REGRESSION
2024-03-05 20:31:58,248:INFO:version 3.3.0
2024-03-05 20:31:58,248:INFO:Initializing setup()
2024-03-05 20:31:58,248:INFO:self.USI: 7399
2024-03-05 20:31:58,248:INFO:self._variable_keys: {'USI', 'gpu_n_jobs_param', 'fold_shuffle_param', 'y_train', 'y_test', '_ml_usecase', 'X_test', 'data', 'pipeline', 'exp_name_log', 'memory', 'X', 'log_plots_param', 'X_train', 'exp_id', 'seed', 'idx', 'n_jobs_param', 'fold_generator', 'fold_groups_param', 'transform_target_param', 'target_param', 'y', 'gpu_param', 'logging_param', '_available_plots', 'html_param'}
2024-03-05 20:31:58,248:INFO:Checking environment
2024-03-05 20:31:58,248:INFO:python_version: 3.11.5
2024-03-05 20:31:58,248:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-03-05 20:31:58,248:INFO:machine: AMD64
2024-03-05 20:31:58,248:INFO:platform: Windows-10-10.0.19045-SP0
2024-03-05 20:31:58,248:INFO:Memory: svmem(total=16889192448, available=10899091456, percent=35.5, used=5990100992, free=10899091456)
2024-03-05 20:31:58,248:INFO:Physical Core: 4
2024-03-05 20:31:58,248:INFO:Logical Core: 8
2024-03-05 20:31:58,248:INFO:Checking libraries
2024-03-05 20:31:58,248:INFO:System:
2024-03-05 20:31:58,248:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-03-05 20:31:58,248:INFO:executable: d:\anaconda\python.exe
2024-03-05 20:31:58,248:INFO:   machine: Windows-10-10.0.19045-SP0
2024-03-05 20:31:58,248:INFO:PyCaret required dependencies:
2024-03-05 20:31:58,248:INFO:                 pip: 23.2.1
2024-03-05 20:31:58,248:INFO:          setuptools: 68.0.0
2024-03-05 20:31:58,248:INFO:             pycaret: 3.3.0
2024-03-05 20:31:58,248:INFO:             IPython: 8.15.0
2024-03-05 20:31:58,248:INFO:          ipywidgets: 8.0.4
2024-03-05 20:31:58,248:INFO:                tqdm: 4.65.0
2024-03-05 20:31:58,248:INFO:               numpy: 1.24.3
2024-03-05 20:31:58,248:INFO:              pandas: 2.0.3
2024-03-05 20:31:58,248:INFO:              jinja2: 3.1.2
2024-03-05 20:31:58,248:INFO:               scipy: 1.11.1
2024-03-05 20:31:58,248:INFO:              joblib: 1.2.0
2024-03-05 20:31:58,248:INFO:             sklearn: 1.4.1.post1
2024-03-05 20:31:58,248:INFO:                pyod: 1.1.3
2024-03-05 20:31:58,248:INFO:            imblearn: 0.10.1
2024-03-05 20:31:58,248:INFO:   category_encoders: 2.6.3
2024-03-05 20:31:58,248:INFO:            lightgbm: 4.3.0
2024-03-05 20:31:58,248:INFO:               numba: 0.57.1
2024-03-05 20:31:58,248:INFO:            requests: 2.31.0
2024-03-05 20:31:58,248:INFO:          matplotlib: 3.7.2
2024-03-05 20:31:58,248:INFO:          scikitplot: 0.3.7
2024-03-05 20:31:58,248:INFO:         yellowbrick: 1.5
2024-03-05 20:31:58,248:INFO:              plotly: 5.19.0
2024-03-05 20:31:58,248:INFO:    plotly-resampler: Not installed
2024-03-05 20:31:58,248:INFO:             kaleido: 0.2.1
2024-03-05 20:31:58,248:INFO:           schemdraw: 0.15
2024-03-05 20:31:58,248:INFO:         statsmodels: 0.14.0
2024-03-05 20:31:58,248:INFO:              sktime: 0.26.1
2024-03-05 20:31:58,248:INFO:               tbats: 1.1.3
2024-03-05 20:31:58,248:INFO:            pmdarima: 2.0.4
2024-03-05 20:31:58,248:INFO:              psutil: 5.9.0
2024-03-05 20:31:58,248:INFO:          markupsafe: 2.1.1
2024-03-05 20:31:58,248:INFO:             pickle5: Not installed
2024-03-05 20:31:58,248:INFO:         cloudpickle: 2.2.1
2024-03-05 20:31:58,248:INFO:         deprecation: 2.1.0
2024-03-05 20:31:58,248:INFO:              xxhash: 2.0.2
2024-03-05 20:31:58,248:INFO:           wurlitzer: Not installed
2024-03-05 20:31:58,248:INFO:PyCaret optional dependencies:
2024-03-05 20:31:58,264:INFO:                shap: Not installed
2024-03-05 20:31:58,264:INFO:           interpret: Not installed
2024-03-05 20:31:58,264:INFO:                umap: Not installed
2024-03-05 20:31:58,264:INFO:     ydata_profiling: Not installed
2024-03-05 20:31:58,264:INFO:  explainerdashboard: Not installed
2024-03-05 20:31:58,264:INFO:             autoviz: Not installed
2024-03-05 20:31:58,264:INFO:           fairlearn: Not installed
2024-03-05 20:31:58,264:INFO:          deepchecks: Not installed
2024-03-05 20:31:58,264:INFO:             xgboost: 2.0.3
2024-03-05 20:31:58,264:INFO:            catboost: 1.2.2
2024-03-05 20:31:58,264:INFO:              kmodes: Not installed
2024-03-05 20:31:58,264:INFO:             mlxtend: Not installed
2024-03-05 20:31:58,264:INFO:       statsforecast: Not installed
2024-03-05 20:31:58,264:INFO:        tune_sklearn: Not installed
2024-03-05 20:31:58,264:INFO:                 ray: Not installed
2024-03-05 20:31:58,264:INFO:            hyperopt: Not installed
2024-03-05 20:31:58,264:INFO:              optuna: Not installed
2024-03-05 20:31:58,264:INFO:               skopt: Not installed
2024-03-05 20:31:58,264:INFO:              mlflow: Not installed
2024-03-05 20:31:58,264:INFO:              gradio: Not installed
2024-03-05 20:31:58,264:INFO:             fastapi: Not installed
2024-03-05 20:31:58,264:INFO:             uvicorn: Not installed
2024-03-05 20:31:58,264:INFO:              m2cgen: Not installed
2024-03-05 20:31:58,264:INFO:           evidently: Not installed
2024-03-05 20:31:58,264:INFO:               fugue: Not installed
2024-03-05 20:31:58,264:INFO:           streamlit: Not installed
2024-03-05 20:31:58,264:INFO:             prophet: Not installed
2024-03-05 20:31:58,264:INFO:None
2024-03-05 20:31:58,264:INFO:Set up data.
2024-03-05 20:31:58,516:INFO:Set up folding strategy.
2024-03-05 20:31:58,516:INFO:Set up train/test split.
2024-03-05 20:31:58,697:INFO:Set up index.
2024-03-05 20:31:58,717:INFO:Assigning column types.
2024-03-05 20:31:58,949:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-03-05 20:31:58,949:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-05 20:31:58,965:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 20:31:58,965:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,266:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,301:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,301:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:31:59,301:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:31:59,301:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,301:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,317:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,601:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,633:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,633:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:31:59,649:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:31:59,649:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-03-05 20:31:59,649:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,649:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,949:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,981:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,981:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:31:59,981:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:31:59,981:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-05 20:31:59,981:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:32:00,302:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:32:00,335:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:32:00,335:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:32:00,335:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:32:00,335:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-03-05 20:32:00,335:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:32:00,635:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:32:00,667:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:32:00,667:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:32:00,667:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:32:00,683:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-05 20:32:01,003:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:32:01,035:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:32:01,035:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:32:01,035:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:32:01,035:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-03-05 20:32:01,336:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:32:01,385:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:32:01,385:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:32:01,385:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:32:01,683:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:32:01,718:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-05 20:32:01,719:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:32:01,719:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:32:01,719:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-03-05 20:32:02,021:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:32:02,053:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:32:02,053:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:32:02,406:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-05 20:32:02,435:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:32:02,451:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:32:02,451:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-03-05 20:32:02,785:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:32:02,785:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:32:03,154:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:32:03,154:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:32:03,154:INFO:Preparing preprocessing pipeline...
2024-03-05 20:32:03,154:INFO:Set up simple imputation.
2024-03-05 20:32:03,625:INFO:Finished creating preprocessing pipeline.
2024-03-05 20:32:03,625:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\dell\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2024-03-05 20:32:03,625:INFO:Creating final display dataframe.
2024-03-05 20:32:04,758:INFO:Setup _display_container:                     Description             Value
0                    Session id              3430
1                        Target           Current
2                   Target type        Regression
3           Original data shape     (1257130, 13)
4        Transformed data shape     (1257130, 13)
5   Transformed train set shape      (879991, 13)
6    Transformed test set shape      (377139, 13)
7              Numeric features                12
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   TimeSeriesSplit
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              7399
2024-03-05 20:32:05,142:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:32:05,142:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:32:05,486:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-05 20:32:05,502:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-05 20:32:05,502:WARNING:C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\metrics.py:51: FutureWarning: The `needs_threshold` and `needs_proba` parameter are deprecated in version 1.4 and will be removed in 1.6. You can either let `response_method` be `None` or set it to `predict` to preserve the same behaviour.
  warnings.warn(

2024-03-05 20:32:05,502:INFO:setup() successfully completed in 7.27s...............
2024-03-05 20:32:05,502:INFO:Initializing compare_models()
2024-03-05 20:32:05,502:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-03-05 20:32:05,502:INFO:Checking exceptions
2024-03-05 20:32:05,641:INFO:Preparing display monitor
2024-03-05 20:32:05,657:INFO:Initializing Linear Regression
2024-03-05 20:32:05,657:INFO:Total runtime is 0.0 minutes
2024-03-05 20:32:05,668:INFO:SubProcess create_model() called ==================================
2024-03-05 20:32:05,668:INFO:Initializing create_model()
2024-03-05 20:32:05,668:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=lr, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:32:05,668:INFO:Checking exceptions
2024-03-05 20:32:05,669:INFO:Importing libraries
2024-03-05 20:32:05,670:INFO:Copying training dataset
2024-03-05 20:32:06,028:INFO:Defining folds
2024-03-05 20:32:06,028:INFO:Declaring metric variables
2024-03-05 20:32:06,028:INFO:Importing untrained model
2024-03-05 20:32:06,028:INFO:Linear Regression Imported successfully
2024-03-05 20:32:06,043:INFO:Starting cross validation
2024-03-05 20:32:06,060:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:32:14,748:INFO:Calculating mean and std
2024-03-05 20:32:14,750:INFO:Creating metrics dataframe
2024-03-05 20:32:14,754:INFO:Uploading results into container
2024-03-05 20:32:14,754:INFO:Uploading model into container now
2024-03-05 20:32:14,755:INFO:_master_model_container: 1
2024-03-05 20:32:14,755:INFO:_display_container: 2
2024-03-05 20:32:14,755:INFO:LinearRegression(n_jobs=-1)
2024-03-05 20:32:14,755:INFO:create_model() successfully completed......................................
2024-03-05 20:32:14,849:INFO:SubProcess create_model() end ==================================
2024-03-05 20:32:14,850:INFO:Creating metrics dataframe
2024-03-05 20:32:14,857:INFO:Initializing Lasso Regression
2024-03-05 20:32:14,857:INFO:Total runtime is 0.15332731405893962 minutes
2024-03-05 20:32:14,860:INFO:SubProcess create_model() called ==================================
2024-03-05 20:32:14,860:INFO:Initializing create_model()
2024-03-05 20:32:14,860:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=lasso, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:32:14,860:INFO:Checking exceptions
2024-03-05 20:32:14,860:INFO:Importing libraries
2024-03-05 20:32:14,860:INFO:Copying training dataset
2024-03-05 20:32:15,250:INFO:Defining folds
2024-03-05 20:32:15,250:INFO:Declaring metric variables
2024-03-05 20:32:15,253:INFO:Importing untrained model
2024-03-05 20:32:15,257:INFO:Lasso Regression Imported successfully
2024-03-05 20:32:15,261:INFO:Starting cross validation
2024-03-05 20:32:15,261:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:32:16,641:INFO:Calculating mean and std
2024-03-05 20:32:16,643:INFO:Creating metrics dataframe
2024-03-05 20:32:16,645:INFO:Uploading results into container
2024-03-05 20:32:16,645:INFO:Uploading model into container now
2024-03-05 20:32:16,646:INFO:_master_model_container: 2
2024-03-05 20:32:16,646:INFO:_display_container: 2
2024-03-05 20:32:16,646:INFO:Lasso(random_state=3430)
2024-03-05 20:32:16,646:INFO:create_model() successfully completed......................................
2024-03-05 20:32:16,733:INFO:SubProcess create_model() end ==================================
2024-03-05 20:32:16,733:INFO:Creating metrics dataframe
2024-03-05 20:32:16,742:INFO:Initializing Ridge Regression
2024-03-05 20:32:16,742:INFO:Total runtime is 0.18474183082580567 minutes
2024-03-05 20:32:16,745:INFO:SubProcess create_model() called ==================================
2024-03-05 20:32:16,745:INFO:Initializing create_model()
2024-03-05 20:32:16,745:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=ridge, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:32:16,745:INFO:Checking exceptions
2024-03-05 20:32:16,745:INFO:Importing libraries
2024-03-05 20:32:16,746:INFO:Copying training dataset
2024-03-05 20:32:17,150:INFO:Defining folds
2024-03-05 20:32:17,150:INFO:Declaring metric variables
2024-03-05 20:32:17,153:INFO:Importing untrained model
2024-03-05 20:32:17,156:INFO:Ridge Regression Imported successfully
2024-03-05 20:32:17,158:INFO:Starting cross validation
2024-03-05 20:32:17,163:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:32:17,409:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.28823e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:32:17,455:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.1328e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:32:17,524:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=7.00956e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:32:17,598:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.25128e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:32:17,659:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.2704e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:32:17,781:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.58744e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:32:17,831:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.00227e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:32:17,920:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.58174e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:32:17,993:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26418e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:32:18,047:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.04342e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-05 20:32:18,195:INFO:Calculating mean and std
2024-03-05 20:32:18,195:INFO:Creating metrics dataframe
2024-03-05 20:32:18,199:INFO:Uploading results into container
2024-03-05 20:32:18,199:INFO:Uploading model into container now
2024-03-05 20:32:18,199:INFO:_master_model_container: 3
2024-03-05 20:32:18,199:INFO:_display_container: 2
2024-03-05 20:32:18,199:INFO:Ridge(random_state=3430)
2024-03-05 20:32:18,199:INFO:create_model() successfully completed......................................
2024-03-05 20:32:18,275:INFO:SubProcess create_model() end ==================================
2024-03-05 20:32:18,275:INFO:Creating metrics dataframe
2024-03-05 20:32:18,292:INFO:Initializing Elastic Net
2024-03-05 20:32:18,292:INFO:Total runtime is 0.21057103872299196 minutes
2024-03-05 20:32:18,292:INFO:SubProcess create_model() called ==================================
2024-03-05 20:32:18,292:INFO:Initializing create_model()
2024-03-05 20:32:18,292:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=en, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:32:18,292:INFO:Checking exceptions
2024-03-05 20:32:18,292:INFO:Importing libraries
2024-03-05 20:32:18,292:INFO:Copying training dataset
2024-03-05 20:32:18,709:INFO:Defining folds
2024-03-05 20:32:18,709:INFO:Declaring metric variables
2024-03-05 20:32:18,719:INFO:Importing untrained model
2024-03-05 20:32:18,725:INFO:Elastic Net Imported successfully
2024-03-05 20:32:18,729:INFO:Starting cross validation
2024-03-05 20:32:18,732:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:32:20,176:INFO:Calculating mean and std
2024-03-05 20:32:20,176:INFO:Creating metrics dataframe
2024-03-05 20:32:20,178:INFO:Uploading results into container
2024-03-05 20:32:20,178:INFO:Uploading model into container now
2024-03-05 20:32:20,181:INFO:_master_model_container: 4
2024-03-05 20:32:20,181:INFO:_display_container: 2
2024-03-05 20:32:20,181:INFO:ElasticNet(random_state=3430)
2024-03-05 20:32:20,181:INFO:create_model() successfully completed......................................
2024-03-05 20:32:20,263:INFO:SubProcess create_model() end ==================================
2024-03-05 20:32:20,263:INFO:Creating metrics dataframe
2024-03-05 20:32:20,271:INFO:Initializing Least Angle Regression
2024-03-05 20:32:20,271:INFO:Total runtime is 0.24355997641881308 minutes
2024-03-05 20:32:20,276:INFO:SubProcess create_model() called ==================================
2024-03-05 20:32:20,276:INFO:Initializing create_model()
2024-03-05 20:32:20,276:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=lar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:32:20,276:INFO:Checking exceptions
2024-03-05 20:32:20,276:INFO:Importing libraries
2024-03-05 20:32:20,276:INFO:Copying training dataset
2024-03-05 20:32:20,659:INFO:Defining folds
2024-03-05 20:32:20,659:INFO:Declaring metric variables
2024-03-05 20:32:20,659:INFO:Importing untrained model
2024-03-05 20:32:20,675:INFO:Least Angle Regression Imported successfully
2024-03-05 20:32:20,675:INFO:Starting cross validation
2024-03-05 20:32:20,675:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:32:21,713:INFO:Calculating mean and std
2024-03-05 20:32:21,713:INFO:Creating metrics dataframe
2024-03-05 20:32:21,715:INFO:Uploading results into container
2024-03-05 20:32:21,715:INFO:Uploading model into container now
2024-03-05 20:32:21,715:INFO:_master_model_container: 5
2024-03-05 20:32:21,715:INFO:_display_container: 2
2024-03-05 20:32:21,715:INFO:Lars(random_state=3430)
2024-03-05 20:32:21,715:INFO:create_model() successfully completed......................................
2024-03-05 20:32:21,810:INFO:SubProcess create_model() end ==================================
2024-03-05 20:32:21,810:INFO:Creating metrics dataframe
2024-03-05 20:32:21,817:INFO:Initializing Lasso Least Angle Regression
2024-03-05 20:32:21,817:INFO:Total runtime is 0.2693339347839356 minutes
2024-03-05 20:32:21,819:INFO:SubProcess create_model() called ==================================
2024-03-05 20:32:21,819:INFO:Initializing create_model()
2024-03-05 20:32:21,819:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=llar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:32:21,819:INFO:Checking exceptions
2024-03-05 20:32:21,819:INFO:Importing libraries
2024-03-05 20:32:21,819:INFO:Copying training dataset
2024-03-05 20:32:22,225:INFO:Defining folds
2024-03-05 20:32:22,226:INFO:Declaring metric variables
2024-03-05 20:32:22,227:INFO:Importing untrained model
2024-03-05 20:32:22,227:INFO:Lasso Least Angle Regression Imported successfully
2024-03-05 20:32:22,235:INFO:Starting cross validation
2024-03-05 20:32:22,235:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:32:23,285:INFO:Calculating mean and std
2024-03-05 20:32:23,285:INFO:Creating metrics dataframe
2024-03-05 20:32:23,285:INFO:Uploading results into container
2024-03-05 20:32:23,285:INFO:Uploading model into container now
2024-03-05 20:32:23,288:INFO:_master_model_container: 6
2024-03-05 20:32:23,288:INFO:_display_container: 2
2024-03-05 20:32:23,288:INFO:LassoLars(random_state=3430)
2024-03-05 20:32:23,288:INFO:create_model() successfully completed......................................
2024-03-05 20:32:23,374:INFO:SubProcess create_model() end ==================================
2024-03-05 20:32:23,374:INFO:Creating metrics dataframe
2024-03-05 20:32:23,381:INFO:Initializing Orthogonal Matching Pursuit
2024-03-05 20:32:23,381:INFO:Total runtime is 0.2953954895337423 minutes
2024-03-05 20:32:23,384:INFO:SubProcess create_model() called ==================================
2024-03-05 20:32:23,384:INFO:Initializing create_model()
2024-03-05 20:32:23,384:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=omp, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:32:23,384:INFO:Checking exceptions
2024-03-05 20:32:23,384:INFO:Importing libraries
2024-03-05 20:32:23,384:INFO:Copying training dataset
2024-03-05 20:32:23,768:INFO:Defining folds
2024-03-05 20:32:23,769:INFO:Declaring metric variables
2024-03-05 20:32:23,771:INFO:Importing untrained model
2024-03-05 20:32:23,775:INFO:Orthogonal Matching Pursuit Imported successfully
2024-03-05 20:32:23,781:INFO:Starting cross validation
2024-03-05 20:32:23,781:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:32:24,854:INFO:Calculating mean and std
2024-03-05 20:32:24,854:INFO:Creating metrics dataframe
2024-03-05 20:32:24,854:INFO:Uploading results into container
2024-03-05 20:32:24,854:INFO:Uploading model into container now
2024-03-05 20:32:24,854:INFO:_master_model_container: 7
2024-03-05 20:32:24,854:INFO:_display_container: 2
2024-03-05 20:32:24,854:INFO:OrthogonalMatchingPursuit()
2024-03-05 20:32:24,854:INFO:create_model() successfully completed......................................
2024-03-05 20:32:24,944:INFO:SubProcess create_model() end ==================================
2024-03-05 20:32:24,944:INFO:Creating metrics dataframe
2024-03-05 20:32:24,952:INFO:Initializing Bayesian Ridge
2024-03-05 20:32:24,952:INFO:Total runtime is 0.321580696105957 minutes
2024-03-05 20:32:24,954:INFO:SubProcess create_model() called ==================================
2024-03-05 20:32:24,954:INFO:Initializing create_model()
2024-03-05 20:32:24,954:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=br, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:32:24,954:INFO:Checking exceptions
2024-03-05 20:32:24,954:INFO:Importing libraries
2024-03-05 20:32:24,954:INFO:Copying training dataset
2024-03-05 20:32:25,344:INFO:Defining folds
2024-03-05 20:32:25,344:INFO:Declaring metric variables
2024-03-05 20:32:25,344:INFO:Importing untrained model
2024-03-05 20:32:25,353:INFO:Bayesian Ridge Imported successfully
2024-03-05 20:32:25,353:INFO:Starting cross validation
2024-03-05 20:32:25,353:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:32:26,733:INFO:Calculating mean and std
2024-03-05 20:32:26,733:INFO:Creating metrics dataframe
2024-03-05 20:32:26,733:INFO:Uploading results into container
2024-03-05 20:32:26,733:INFO:Uploading model into container now
2024-03-05 20:32:26,733:INFO:_master_model_container: 8
2024-03-05 20:32:26,733:INFO:_display_container: 2
2024-03-05 20:32:26,733:INFO:BayesianRidge()
2024-03-05 20:32:26,733:INFO:create_model() successfully completed......................................
2024-03-05 20:32:26,825:INFO:SubProcess create_model() end ==================================
2024-03-05 20:32:26,825:INFO:Creating metrics dataframe
2024-03-05 20:32:26,833:INFO:Initializing Passive Aggressive Regressor
2024-03-05 20:32:26,833:INFO:Total runtime is 0.35292253096898396 minutes
2024-03-05 20:32:26,833:INFO:SubProcess create_model() called ==================================
2024-03-05 20:32:26,833:INFO:Initializing create_model()
2024-03-05 20:32:26,833:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=par, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:32:26,833:INFO:Checking exceptions
2024-03-05 20:32:26,833:INFO:Importing libraries
2024-03-05 20:32:26,833:INFO:Copying training dataset
2024-03-05 20:32:27,212:INFO:Defining folds
2024-03-05 20:32:27,212:INFO:Declaring metric variables
2024-03-05 20:32:27,212:INFO:Importing untrained model
2024-03-05 20:32:27,212:INFO:Passive Aggressive Regressor Imported successfully
2024-03-05 20:32:27,229:INFO:Starting cross validation
2024-03-05 20:32:27,230:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:32:31,348:INFO:Calculating mean and std
2024-03-05 20:32:31,349:INFO:Creating metrics dataframe
2024-03-05 20:32:31,349:INFO:Uploading results into container
2024-03-05 20:32:31,349:INFO:Uploading model into container now
2024-03-05 20:32:31,349:INFO:_master_model_container: 9
2024-03-05 20:32:31,349:INFO:_display_container: 2
2024-03-05 20:32:31,349:INFO:PassiveAggressiveRegressor(random_state=3430)
2024-03-05 20:32:31,349:INFO:create_model() successfully completed......................................
2024-03-05 20:32:31,430:INFO:SubProcess create_model() end ==================================
2024-03-05 20:32:31,430:INFO:Creating metrics dataframe
2024-03-05 20:32:31,431:INFO:Initializing Huber Regressor
2024-03-05 20:32:31,431:INFO:Total runtime is 0.42955760161081946 minutes
2024-03-05 20:32:31,431:INFO:SubProcess create_model() called ==================================
2024-03-05 20:32:31,431:INFO:Initializing create_model()
2024-03-05 20:32:31,431:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=huber, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:32:31,431:INFO:Checking exceptions
2024-03-05 20:32:31,431:INFO:Importing libraries
2024-03-05 20:32:31,431:INFO:Copying training dataset
2024-03-05 20:32:31,780:INFO:Defining folds
2024-03-05 20:32:31,780:INFO:Declaring metric variables
2024-03-05 20:32:31,780:INFO:Importing untrained model
2024-03-05 20:32:31,780:INFO:Huber Regressor Imported successfully
2024-03-05 20:32:31,780:INFO:Starting cross validation
2024-03-05 20:32:31,796:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:32:35,624:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:32:40,972:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:32:46,054:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:32:48,953:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:32:53,192:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:32:56,590:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:32:59,337:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:33:04,266:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:33:07,410:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-05 20:33:07,588:INFO:Calculating mean and std
2024-03-05 20:33:07,588:INFO:Creating metrics dataframe
2024-03-05 20:33:07,593:INFO:Uploading results into container
2024-03-05 20:33:07,593:INFO:Uploading model into container now
2024-03-05 20:33:07,593:INFO:_master_model_container: 10
2024-03-05 20:33:07,593:INFO:_display_container: 2
2024-03-05 20:33:07,593:INFO:HuberRegressor()
2024-03-05 20:33:07,593:INFO:create_model() successfully completed......................................
2024-03-05 20:33:07,694:INFO:SubProcess create_model() end ==================================
2024-03-05 20:33:07,694:INFO:Creating metrics dataframe
2024-03-05 20:33:07,697:INFO:Initializing K Neighbors Regressor
2024-03-05 20:33:07,697:INFO:Total runtime is 1.033989350001017 minutes
2024-03-05 20:33:07,697:INFO:SubProcess create_model() called ==================================
2024-03-05 20:33:07,697:INFO:Initializing create_model()
2024-03-05 20:33:07,697:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=knn, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:33:07,697:INFO:Checking exceptions
2024-03-05 20:33:07,697:INFO:Importing libraries
2024-03-05 20:33:07,697:INFO:Copying training dataset
2024-03-05 20:33:08,066:INFO:Defining folds
2024-03-05 20:33:08,066:INFO:Declaring metric variables
2024-03-05 20:33:08,069:INFO:Importing untrained model
2024-03-05 20:33:08,072:INFO:K Neighbors Regressor Imported successfully
2024-03-05 20:33:08,077:INFO:Starting cross validation
2024-03-05 20:33:08,077:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:33:42,038:INFO:Calculating mean and std
2024-03-05 20:33:42,041:INFO:Creating metrics dataframe
2024-03-05 20:33:42,044:INFO:Uploading results into container
2024-03-05 20:33:42,045:INFO:Uploading model into container now
2024-03-05 20:33:42,045:INFO:_master_model_container: 11
2024-03-05 20:33:42,045:INFO:_display_container: 2
2024-03-05 20:33:42,046:INFO:KNeighborsRegressor(n_jobs=-1)
2024-03-05 20:33:42,046:INFO:create_model() successfully completed......................................
2024-03-05 20:33:42,124:INFO:SubProcess create_model() end ==================================
2024-03-05 20:33:42,124:INFO:Creating metrics dataframe
2024-03-05 20:33:42,140:INFO:Initializing Decision Tree Regressor
2024-03-05 20:33:42,140:INFO:Total runtime is 1.6080445488293964 minutes
2024-03-05 20:33:42,142:INFO:SubProcess create_model() called ==================================
2024-03-05 20:33:42,142:INFO:Initializing create_model()
2024-03-05 20:33:42,142:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=dt, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:33:42,142:INFO:Checking exceptions
2024-03-05 20:33:42,143:INFO:Importing libraries
2024-03-05 20:33:42,143:INFO:Copying training dataset
2024-03-05 20:33:42,490:INFO:Defining folds
2024-03-05 20:33:42,490:INFO:Declaring metric variables
2024-03-05 20:33:42,490:INFO:Importing untrained model
2024-03-05 20:33:42,506:INFO:Decision Tree Regressor Imported successfully
2024-03-05 20:33:42,507:INFO:Starting cross validation
2024-03-05 20:33:42,507:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:34:01,824:INFO:Calculating mean and std
2024-03-05 20:34:01,824:INFO:Creating metrics dataframe
2024-03-05 20:34:01,824:INFO:Uploading results into container
2024-03-05 20:34:01,824:INFO:Uploading model into container now
2024-03-05 20:34:01,824:INFO:_master_model_container: 12
2024-03-05 20:34:01,824:INFO:_display_container: 2
2024-03-05 20:34:01,831:INFO:DecisionTreeRegressor(random_state=3430)
2024-03-05 20:34:01,832:INFO:create_model() successfully completed......................................
2024-03-05 20:34:01,898:INFO:SubProcess create_model() end ==================================
2024-03-05 20:34:01,898:INFO:Creating metrics dataframe
2024-03-05 20:34:01,920:INFO:Initializing Random Forest Regressor
2024-03-05 20:34:01,920:INFO:Total runtime is 1.937712526321411 minutes
2024-03-05 20:34:01,920:INFO:SubProcess create_model() called ==================================
2024-03-05 20:34:01,925:INFO:Initializing create_model()
2024-03-05 20:34:01,925:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=rf, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:34:01,925:INFO:Checking exceptions
2024-03-05 20:34:01,925:INFO:Importing libraries
2024-03-05 20:34:01,926:INFO:Copying training dataset
2024-03-05 20:34:02,286:INFO:Defining folds
2024-03-05 20:34:02,287:INFO:Declaring metric variables
2024-03-05 20:34:02,290:INFO:Importing untrained model
2024-03-05 20:34:02,293:INFO:Random Forest Regressor Imported successfully
2024-03-05 20:34:02,298:INFO:Starting cross validation
2024-03-05 20:34:02,298:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:50:59,179:INFO:Calculating mean and std
2024-03-05 20:50:59,250:INFO:Creating metrics dataframe
2024-03-05 20:50:59,323:INFO:Uploading results into container
2024-03-05 20:50:59,331:INFO:Uploading model into container now
2024-03-05 20:50:59,341:INFO:_master_model_container: 13
2024-03-05 20:50:59,341:INFO:_display_container: 2
2024-03-05 20:50:59,350:INFO:RandomForestRegressor(n_jobs=-1, random_state=3430)
2024-03-05 20:50:59,351:INFO:create_model() successfully completed......................................
2024-03-05 20:51:00,025:INFO:SubProcess create_model() end ==================================
2024-03-05 20:51:00,025:INFO:Creating metrics dataframe
2024-03-05 20:51:00,045:INFO:Initializing Extra Trees Regressor
2024-03-05 20:51:00,045:INFO:Total runtime is 18.906467211246493 minutes
2024-03-05 20:51:00,049:INFO:SubProcess create_model() called ==================================
2024-03-05 20:51:00,049:INFO:Initializing create_model()
2024-03-05 20:51:00,049:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=et, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:51:00,049:INFO:Checking exceptions
2024-03-05 20:51:00,049:INFO:Importing libraries
2024-03-05 20:51:00,050:INFO:Copying training dataset
2024-03-05 20:51:00,780:INFO:Defining folds
2024-03-05 20:51:00,780:INFO:Declaring metric variables
2024-03-05 20:51:00,783:INFO:Importing untrained model
2024-03-05 20:51:00,787:INFO:Extra Trees Regressor Imported successfully
2024-03-05 20:51:00,793:INFO:Starting cross validation
2024-03-05 20:51:00,793:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:54:54,058:WARNING:create_model() for et raised an exception or returned all 0.0, trying without fit_kwargs:
2024-03-05 20:54:54,223:WARNING:Traceback (most recent call last):
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
              ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 567, in wrap_future_result
    return future.result(timeout=timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\concurrent\futures\_base.py", line 456, in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\concurrent\futures\_base.py", line 401, in __get_result
    raise self._exception
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 3.66 MiB for an array with shape (12, 79999) and data type float32

2024-03-05 20:54:54,238:INFO:Initializing create_model()
2024-03-05 20:54:54,238:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=et, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:54:54,239:INFO:Checking exceptions
2024-03-05 20:54:54,240:INFO:Importing libraries
2024-03-05 20:54:54,243:INFO:Copying training dataset
2024-03-05 20:54:55,492:INFO:Defining folds
2024-03-05 20:54:55,493:INFO:Declaring metric variables
2024-03-05 20:54:55,526:INFO:Importing untrained model
2024-03-05 20:54:55,537:INFO:Extra Trees Regressor Imported successfully
2024-03-05 20:54:55,548:INFO:Starting cross validation
2024-03-05 20:54:55,561:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 20:59:44,942:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
7 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
2 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 33554432 bytes

--------------------------------------------------------------------------------
2 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 909, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 8388608 bytes

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 67108864 bytes

--------------------------------------------------------------------------------
2 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 134217728 bytes

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-03-05 20:59:44,948:INFO:Calculating mean and std
2024-03-05 20:59:44,959:INFO:Creating metrics dataframe
2024-03-05 20:59:44,997:INFO:Uploading results into container
2024-03-05 20:59:44,999:INFO:Uploading model into container now
2024-03-05 20:59:45,005:INFO:_master_model_container: 14
2024-03-05 20:59:45,005:INFO:_display_container: 2
2024-03-05 20:59:45,011:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=3430)
2024-03-05 20:59:45,011:INFO:create_model() successfully completed......................................
2024-03-05 20:59:46,037:INFO:SubProcess create_model() end ==================================
2024-03-05 20:59:46,037:INFO:Creating metrics dataframe
2024-03-05 20:59:46,061:INFO:Initializing AdaBoost Regressor
2024-03-05 20:59:46,061:INFO:Total runtime is 27.673396305243177 minutes
2024-03-05 20:59:46,067:INFO:SubProcess create_model() called ==================================
2024-03-05 20:59:46,067:INFO:Initializing create_model()
2024-03-05 20:59:46,067:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=ada, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 20:59:46,068:INFO:Checking exceptions
2024-03-05 20:59:46,068:INFO:Importing libraries
2024-03-05 20:59:46,068:INFO:Copying training dataset
2024-03-05 20:59:46,924:INFO:Defining folds
2024-03-05 20:59:46,924:INFO:Declaring metric variables
2024-03-05 20:59:46,930:INFO:Importing untrained model
2024-03-05 20:59:46,938:INFO:AdaBoost Regressor Imported successfully
2024-03-05 20:59:46,949:INFO:Starting cross validation
2024-03-05 20:59:46,951:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 21:01:06,578:INFO:Calculating mean and std
2024-03-05 21:01:06,582:INFO:Creating metrics dataframe
2024-03-05 21:01:06,585:INFO:Uploading results into container
2024-03-05 21:01:06,586:INFO:Uploading model into container now
2024-03-05 21:01:06,587:INFO:_master_model_container: 15
2024-03-05 21:01:06,588:INFO:_display_container: 2
2024-03-05 21:01:06,588:INFO:AdaBoostRegressor(random_state=3430)
2024-03-05 21:01:06,588:INFO:create_model() successfully completed......................................
2024-03-05 21:01:06,745:INFO:SubProcess create_model() end ==================================
2024-03-05 21:01:06,745:INFO:Creating metrics dataframe
2024-03-05 21:01:06,765:INFO:Initializing Gradient Boosting Regressor
2024-03-05 21:01:06,765:INFO:Total runtime is 29.018461004892988 minutes
2024-03-05 21:01:06,768:INFO:SubProcess create_model() called ==================================
2024-03-05 21:01:06,768:INFO:Initializing create_model()
2024-03-05 21:01:06,768:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=gbr, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 21:01:06,768:INFO:Checking exceptions
2024-03-05 21:01:06,768:INFO:Importing libraries
2024-03-05 21:01:06,768:INFO:Copying training dataset
2024-03-05 21:01:07,231:INFO:Defining folds
2024-03-05 21:01:07,231:INFO:Declaring metric variables
2024-03-05 21:01:07,234:INFO:Importing untrained model
2024-03-05 21:01:07,237:INFO:Gradient Boosting Regressor Imported successfully
2024-03-05 21:01:07,245:INFO:Starting cross validation
2024-03-05 21:01:07,246:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 21:04:50,261:INFO:Calculating mean and std
2024-03-05 21:04:50,263:INFO:Creating metrics dataframe
2024-03-05 21:04:50,267:INFO:Uploading results into container
2024-03-05 21:04:50,269:INFO:Uploading model into container now
2024-03-05 21:04:50,270:INFO:_master_model_container: 16
2024-03-05 21:04:50,270:INFO:_display_container: 2
2024-03-05 21:04:50,271:INFO:GradientBoostingRegressor(random_state=3430)
2024-03-05 21:04:50,271:INFO:create_model() successfully completed......................................
2024-03-05 21:04:50,412:INFO:SubProcess create_model() end ==================================
2024-03-05 21:04:50,412:INFO:Creating metrics dataframe
2024-03-05 21:04:50,426:INFO:Initializing Extreme Gradient Boosting
2024-03-05 21:04:50,427:INFO:Total runtime is 32.7461651245753 minutes
2024-03-05 21:04:50,430:INFO:SubProcess create_model() called ==================================
2024-03-05 21:04:50,431:INFO:Initializing create_model()
2024-03-05 21:04:50,431:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=xgboost, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 21:04:50,431:INFO:Checking exceptions
2024-03-05 21:04:50,431:INFO:Importing libraries
2024-03-05 21:04:50,431:INFO:Copying training dataset
2024-03-05 21:04:51,011:INFO:Defining folds
2024-03-05 21:04:51,012:INFO:Declaring metric variables
2024-03-05 21:04:51,017:INFO:Importing untrained model
2024-03-05 21:04:51,021:INFO:Extreme Gradient Boosting Imported successfully
2024-03-05 21:04:51,030:INFO:Starting cross validation
2024-03-05 21:04:51,031:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 21:05:02,588:INFO:Calculating mean and std
2024-03-05 21:05:02,590:INFO:Creating metrics dataframe
2024-03-05 21:05:02,593:INFO:Uploading results into container
2024-03-05 21:05:02,593:INFO:Uploading model into container now
2024-03-05 21:05:02,594:INFO:_master_model_container: 17
2024-03-05 21:05:02,594:INFO:_display_container: 2
2024-03-05 21:05:02,595:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=3430, ...)
2024-03-05 21:05:02,595:INFO:create_model() successfully completed......................................
2024-03-05 21:05:02,709:INFO:SubProcess create_model() end ==================================
2024-03-05 21:05:02,709:INFO:Creating metrics dataframe
2024-03-05 21:05:02,730:INFO:Initializing Light Gradient Boosting Machine
2024-03-05 21:05:02,731:INFO:Total runtime is 32.95122539599737 minutes
2024-03-05 21:05:02,735:INFO:SubProcess create_model() called ==================================
2024-03-05 21:05:02,735:INFO:Initializing create_model()
2024-03-05 21:05:02,736:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=lightgbm, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 21:05:02,736:INFO:Checking exceptions
2024-03-05 21:05:02,736:INFO:Importing libraries
2024-03-05 21:05:02,736:INFO:Copying training dataset
2024-03-05 21:05:03,343:INFO:Defining folds
2024-03-05 21:05:03,344:INFO:Declaring metric variables
2024-03-05 21:05:03,349:INFO:Importing untrained model
2024-03-05 21:05:03,355:INFO:Light Gradient Boosting Machine Imported successfully
2024-03-05 21:05:03,364:INFO:Starting cross validation
2024-03-05 21:05:03,365:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 21:05:12,466:INFO:Calculating mean and std
2024-03-05 21:05:12,468:INFO:Creating metrics dataframe
2024-03-05 21:05:12,471:INFO:Uploading results into container
2024-03-05 21:05:12,472:INFO:Uploading model into container now
2024-03-05 21:05:12,472:INFO:_master_model_container: 18
2024-03-05 21:05:12,473:INFO:_display_container: 2
2024-03-05 21:05:12,473:INFO:LGBMRegressor(n_jobs=-1, random_state=3430)
2024-03-05 21:05:12,474:INFO:create_model() successfully completed......................................
2024-03-05 21:05:12,608:INFO:SubProcess create_model() end ==================================
2024-03-05 21:05:12,608:INFO:Creating metrics dataframe
2024-03-05 21:05:12,639:INFO:Initializing CatBoost Regressor
2024-03-05 21:05:12,640:INFO:Total runtime is 33.116380004088086 minutes
2024-03-05 21:05:12,646:INFO:SubProcess create_model() called ==================================
2024-03-05 21:05:12,647:INFO:Initializing create_model()
2024-03-05 21:05:12,648:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=catboost, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 21:05:12,648:INFO:Checking exceptions
2024-03-05 21:05:12,648:INFO:Importing libraries
2024-03-05 21:05:12,648:INFO:Copying training dataset
2024-03-05 21:05:13,312:INFO:Defining folds
2024-03-05 21:05:13,312:INFO:Declaring metric variables
2024-03-05 21:05:13,316:INFO:Importing untrained model
2024-03-05 21:05:13,327:INFO:CatBoost Regressor Imported successfully
2024-03-05 21:05:13,335:INFO:Starting cross validation
2024-03-05 21:05:13,336:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 21:08:54,219:INFO:Calculating mean and std
2024-03-05 21:08:54,221:INFO:Creating metrics dataframe
2024-03-05 21:08:54,223:INFO:Uploading results into container
2024-03-05 21:08:54,223:INFO:Uploading model into container now
2024-03-05 21:08:54,224:INFO:_master_model_container: 19
2024-03-05 21:08:54,224:INFO:_display_container: 2
2024-03-05 21:08:54,224:INFO:<catboost.core.CatBoostRegressor object at 0x000001EE1C777E10>
2024-03-05 21:08:54,224:INFO:create_model() successfully completed......................................
2024-03-05 21:08:54,365:INFO:SubProcess create_model() end ==================================
2024-03-05 21:08:54,365:INFO:Creating metrics dataframe
2024-03-05 21:08:54,388:INFO:Initializing Dummy Regressor
2024-03-05 21:08:54,389:INFO:Total runtime is 36.81219112078349 minutes
2024-03-05 21:08:54,395:INFO:SubProcess create_model() called ==================================
2024-03-05 21:08:54,395:INFO:Initializing create_model()
2024-03-05 21:08:54,396:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=dummy, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE13DCE290>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 21:08:54,396:INFO:Checking exceptions
2024-03-05 21:08:54,396:INFO:Importing libraries
2024-03-05 21:08:54,396:INFO:Copying training dataset
2024-03-05 21:08:55,137:INFO:Defining folds
2024-03-05 21:08:55,137:INFO:Declaring metric variables
2024-03-05 21:08:55,144:INFO:Importing untrained model
2024-03-05 21:08:55,148:INFO:Dummy Regressor Imported successfully
2024-03-05 21:08:55,153:INFO:Starting cross validation
2024-03-05 21:08:55,155:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-05 21:08:56,200:INFO:Calculating mean and std
2024-03-05 21:08:56,202:INFO:Creating metrics dataframe
2024-03-05 21:08:56,205:INFO:Uploading results into container
2024-03-05 21:08:56,206:INFO:Uploading model into container now
2024-03-05 21:08:56,207:INFO:_master_model_container: 20
2024-03-05 21:08:56,207:INFO:_display_container: 2
2024-03-05 21:08:56,208:INFO:DummyRegressor()
2024-03-05 21:08:56,208:INFO:create_model() successfully completed......................................
2024-03-05 21:08:56,366:INFO:SubProcess create_model() end ==================================
2024-03-05 21:08:56,366:INFO:Creating metrics dataframe
2024-03-05 21:08:56,407:INFO:Initializing create_model()
2024-03-05 21:08:56,408:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=RandomForestRegressor(n_jobs=-1, random_state=3430), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 21:08:56,408:INFO:Checking exceptions
2024-03-05 21:08:56,413:INFO:Importing libraries
2024-03-05 21:08:56,413:INFO:Copying training dataset
2024-03-05 21:08:56,974:INFO:Defining folds
2024-03-05 21:08:56,974:INFO:Declaring metric variables
2024-03-05 21:08:56,974:INFO:Importing untrained model
2024-03-05 21:08:56,975:INFO:Declaring custom model
2024-03-05 21:08:56,976:INFO:Random Forest Regressor Imported successfully
2024-03-05 21:08:56,977:INFO:Cross validation set to False
2024-03-05 21:08:56,977:INFO:Fitting Model
2024-03-05 21:12:39,905:INFO:RandomForestRegressor(n_jobs=-1, random_state=3430)
2024-03-05 21:12:39,905:INFO:create_model() successfully completed......................................
2024-03-05 21:12:40,104:INFO:_master_model_container: 20
2024-03-05 21:12:40,104:INFO:_display_container: 2
2024-03-05 21:12:40,104:INFO:RandomForestRegressor(n_jobs=-1, random_state=3430)
2024-03-05 21:12:40,104:INFO:compare_models() successfully completed......................................
2024-03-05 21:12:40,246:INFO:Initializing finalize_model()
2024-03-05 21:12:40,246:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 21:12:40,247:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2113345654)
2024-03-05 21:12:40,530:INFO:Initializing create_model()
2024-03-05 21:12:40,530:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 21:12:40,531:INFO:Checking exceptions
2024-03-05 21:12:40,533:INFO:Importing libraries
2024-03-05 21:12:40,533:INFO:Copying training dataset
2024-03-05 21:12:40,589:INFO:Defining folds
2024-03-05 21:12:40,589:INFO:Declaring metric variables
2024-03-05 21:12:40,590:INFO:Importing untrained model
2024-03-05 21:12:40,590:INFO:Declaring custom model
2024-03-05 21:12:40,591:INFO:Decision Tree Regressor Imported successfully
2024-03-05 21:12:40,592:INFO:Cross validation set to False
2024-03-05 21:12:40,592:INFO:Fitting Model
2024-03-05 21:13:01,657:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 21:13:01,658:INFO:create_model() successfully completed......................................
2024-03-05 21:13:01,760:INFO:_master_model_container: 20
2024-03-05 21:13:01,760:INFO:_display_container: 2
2024-03-05 21:13:01,764:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 21:13:01,764:INFO:finalize_model() successfully completed......................................
2024-03-05 21:13:01,886:INFO:Initializing predict_model()
2024-03-05 21:13:01,887:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4B4F3420>)
2024-03-05 21:13:01,887:INFO:Checking exceptions
2024-03-05 21:13:01,887:INFO:Preloading libraries
2024-03-05 21:13:01,889:INFO:Set up data.
2024-03-05 21:13:02,281:INFO:Set up index.
2024-03-05 21:13:02,776:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:21:51,519:INFO:Initializing finalize_model()
2024-03-05 23:21:51,519:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:21:51,519:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2113345654)
2024-03-05 23:21:51,709:INFO:Initializing create_model()
2024-03-05 23:21:51,709:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:21:51,709:INFO:Checking exceptions
2024-03-05 23:21:51,709:INFO:Importing libraries
2024-03-05 23:21:51,709:INFO:Copying training dataset
2024-03-05 23:21:51,742:INFO:Defining folds
2024-03-05 23:21:51,742:INFO:Declaring metric variables
2024-03-05 23:21:51,742:INFO:Importing untrained model
2024-03-05 23:21:51,742:INFO:Declaring custom model
2024-03-05 23:21:51,742:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:21:51,742:INFO:Cross validation set to False
2024-03-05 23:21:51,742:INFO:Fitting Model
2024-03-05 23:22:05,781:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:22:05,781:INFO:create_model() successfully completed......................................
2024-03-05 23:22:05,880:INFO:_master_model_container: 20
2024-03-05 23:22:05,880:INFO:_display_container: 3
2024-03-05 23:22:05,880:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:22:05,880:INFO:finalize_model() successfully completed......................................
2024-03-05 23:22:05,981:INFO:Initializing predict_model()
2024-03-05 23:22:05,981:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE145A0220>)
2024-03-05 23:22:05,981:INFO:Checking exceptions
2024-03-05 23:22:05,981:INFO:Preloading libraries
2024-03-05 23:22:05,981:INFO:Set up data.
2024-03-05 23:22:06,117:INFO:Set up index.
2024-03-05 23:22:06,382:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:25:38,665:WARNING:C:\Users\dell\AppData\Local\Temp\ipykernel_38608\3550175529.py:9: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  X_train.loc[:, 'Current'] = y_train

2024-03-05 23:25:43,280:INFO:Initializing finalize_model()
2024-03-05 23:25:43,280:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:25:43,280:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2113345654)
2024-03-05 23:25:43,464:INFO:Initializing create_model()
2024-03-05 23:25:43,464:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:25:43,464:INFO:Checking exceptions
2024-03-05 23:25:43,464:INFO:Importing libraries
2024-03-05 23:25:43,464:INFO:Copying training dataset
2024-03-05 23:25:43,497:INFO:Defining folds
2024-03-05 23:25:43,497:INFO:Declaring metric variables
2024-03-05 23:25:43,497:INFO:Importing untrained model
2024-03-05 23:25:43,497:INFO:Declaring custom model
2024-03-05 23:25:43,497:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:25:43,513:INFO:Cross validation set to False
2024-03-05 23:25:43,513:INFO:Fitting Model
2024-03-05 23:25:57,686:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:25:57,686:INFO:create_model() successfully completed......................................
2024-03-05 23:25:57,802:INFO:_master_model_container: 20
2024-03-05 23:25:57,802:INFO:_display_container: 4
2024-03-05 23:25:57,802:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:25:57,802:INFO:finalize_model() successfully completed......................................
2024-03-05 23:25:57,903:INFO:Initializing predict_model()
2024-03-05 23:25:57,903:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC0BD80>)
2024-03-05 23:25:57,903:INFO:Checking exceptions
2024-03-05 23:25:57,903:INFO:Preloading libraries
2024-03-05 23:25:57,903:INFO:Set up data.
2024-03-05 23:25:57,971:INFO:Set up index.
2024-03-05 23:28:14,954:INFO:Initializing finalize_model()
2024-03-05 23:28:14,955:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:28:14,956:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2113345654)
2024-03-05 23:28:15,141:INFO:Initializing create_model()
2024-03-05 23:28:15,141:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:28:15,141:INFO:Checking exceptions
2024-03-05 23:28:15,141:INFO:Importing libraries
2024-03-05 23:28:15,141:INFO:Copying training dataset
2024-03-05 23:28:15,172:INFO:Defining folds
2024-03-05 23:28:15,172:INFO:Declaring metric variables
2024-03-05 23:28:15,172:INFO:Importing untrained model
2024-03-05 23:28:15,172:INFO:Declaring custom model
2024-03-05 23:28:15,172:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:28:15,172:INFO:Cross validation set to False
2024-03-05 23:28:15,172:INFO:Fitting Model
2024-03-05 23:28:29,510:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:28:29,510:INFO:create_model() successfully completed......................................
2024-03-05 23:28:29,661:INFO:_master_model_container: 20
2024-03-05 23:28:29,661:INFO:_display_container: 4
2024-03-05 23:28:29,661:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:28:29,661:INFO:finalize_model() successfully completed......................................
2024-03-05 23:28:29,761:INFO:Initializing predict_model()
2024-03-05 23:28:29,761:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE480FD3A0>)
2024-03-05 23:28:29,761:INFO:Checking exceptions
2024-03-05 23:28:29,761:INFO:Preloading libraries
2024-03-05 23:28:29,761:INFO:Set up data.
2024-03-05 23:28:29,834:INFO:Set up index.
2024-03-05 23:30:48,275:INFO:Initializing finalize_model()
2024-03-05 23:30:48,275:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:30:48,275:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2113345654)
2024-03-05 23:30:48,449:INFO:Initializing create_model()
2024-03-05 23:30:48,449:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:30:48,449:INFO:Checking exceptions
2024-03-05 23:30:48,449:INFO:Importing libraries
2024-03-05 23:30:48,449:INFO:Copying training dataset
2024-03-05 23:30:48,496:INFO:Defining folds
2024-03-05 23:30:48,497:INFO:Declaring metric variables
2024-03-05 23:30:48,497:INFO:Importing untrained model
2024-03-05 23:30:48,497:INFO:Declaring custom model
2024-03-05 23:30:48,497:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:30:48,498:INFO:Cross validation set to False
2024-03-05 23:30:48,498:INFO:Fitting Model
2024-03-05 23:31:02,768:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:31:02,768:INFO:create_model() successfully completed......................................
2024-03-05 23:31:02,886:INFO:_master_model_container: 20
2024-03-05 23:31:02,886:INFO:_display_container: 4
2024-03-05 23:31:02,886:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:31:02,886:INFO:finalize_model() successfully completed......................................
2024-03-05 23:31:03,036:INFO:Initializing predict_model()
2024-03-05 23:31:03,036:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE45150AE0>)
2024-03-05 23:31:03,036:INFO:Checking exceptions
2024-03-05 23:31:03,036:INFO:Preloading libraries
2024-03-05 23:31:03,036:INFO:Set up data.
2024-03-05 23:31:03,089:INFO:Set up index.
2024-03-05 23:31:03,454:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:32:26,537:INFO:Initializing finalize_model()
2024-03-05 23:32:26,538:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:32:26,538:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2113345654)
2024-03-05 23:32:26,717:INFO:Initializing create_model()
2024-03-05 23:32:26,717:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:32:26,717:INFO:Checking exceptions
2024-03-05 23:32:26,717:INFO:Importing libraries
2024-03-05 23:32:26,717:INFO:Copying training dataset
2024-03-05 23:32:26,753:INFO:Defining folds
2024-03-05 23:32:26,753:INFO:Declaring metric variables
2024-03-05 23:32:26,753:INFO:Importing untrained model
2024-03-05 23:32:26,753:INFO:Declaring custom model
2024-03-05 23:32:26,753:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:32:26,753:INFO:Cross validation set to False
2024-03-05 23:32:26,753:INFO:Fitting Model
2024-03-05 23:32:40,813:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:32:40,816:INFO:create_model() successfully completed......................................
2024-03-05 23:32:40,940:INFO:_master_model_container: 20
2024-03-05 23:32:40,940:INFO:_display_container: 4
2024-03-05 23:32:40,940:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:32:40,940:INFO:finalize_model() successfully completed......................................
2024-03-05 23:32:41,090:INFO:Initializing predict_model()
2024-03-05 23:32:41,090:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE1D8E4D60>)
2024-03-05 23:32:41,090:INFO:Checking exceptions
2024-03-05 23:32:41,090:INFO:Preloading libraries
2024-03-05 23:32:41,090:INFO:Set up data.
2024-03-05 23:32:41,160:INFO:Set up index.
2024-03-05 23:32:41,523:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:35:14,619:INFO:Initializing finalize_model()
2024-03-05 23:35:14,619:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:35:14,619:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2113345654)
2024-03-05 23:35:14,815:INFO:Initializing create_model()
2024-03-05 23:35:14,815:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2113345654), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:35:14,815:INFO:Checking exceptions
2024-03-05 23:35:14,815:INFO:Importing libraries
2024-03-05 23:35:14,815:INFO:Copying training dataset
2024-03-05 23:35:14,851:INFO:Defining folds
2024-03-05 23:35:14,851:INFO:Declaring metric variables
2024-03-05 23:35:14,851:INFO:Importing untrained model
2024-03-05 23:35:14,851:INFO:Declaring custom model
2024-03-05 23:35:14,851:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:35:14,851:INFO:Cross validation set to False
2024-03-05 23:35:14,851:INFO:Fitting Model
2024-03-05 23:35:28,821:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:35:28,821:INFO:create_model() successfully completed......................................
2024-03-05 23:35:28,954:INFO:_master_model_container: 20
2024-03-05 23:35:28,954:INFO:_display_container: 4
2024-03-05 23:35:28,954:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))])
2024-03-05 23:35:28,954:INFO:finalize_model() successfully completed......................................
2024-03-05 23:35:29,104:INFO:Initializing predict_model()
2024-03-05 23:35:29,104:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2113345654))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:35:29,104:INFO:Checking exceptions
2024-03-05 23:35:29,104:INFO:Preloading libraries
2024-03-05 23:35:29,104:INFO:Set up data.
2024-03-05 23:35:29,159:INFO:Set up index.
2024-03-05 23:35:29,537:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:35:29,571:INFO:Initializing finalize_model()
2024-03-05 23:35:29,571:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1569871810), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:35:29,571:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1569871810)
2024-03-05 23:35:29,754:INFO:Initializing create_model()
2024-03-05 23:35:29,754:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1569871810), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:35:29,754:INFO:Checking exceptions
2024-03-05 23:35:29,754:INFO:Importing libraries
2024-03-05 23:35:29,754:INFO:Copying training dataset
2024-03-05 23:35:29,788:INFO:Defining folds
2024-03-05 23:35:29,788:INFO:Declaring metric variables
2024-03-05 23:35:29,788:INFO:Importing untrained model
2024-03-05 23:35:29,788:INFO:Declaring custom model
2024-03-05 23:35:29,788:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:35:29,788:INFO:Cross validation set to False
2024-03-05 23:35:29,788:INFO:Fitting Model
2024-03-05 23:35:43,826:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1569871810))])
2024-03-05 23:35:43,826:INFO:create_model() successfully completed......................................
2024-03-05 23:35:43,962:INFO:_master_model_container: 20
2024-03-05 23:35:43,962:INFO:_display_container: 4
2024-03-05 23:35:43,962:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1569871810))])
2024-03-05 23:35:43,962:INFO:finalize_model() successfully completed......................................
2024-03-05 23:35:44,110:INFO:Initializing predict_model()
2024-03-05 23:35:44,110:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1569871810))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:35:44,110:INFO:Checking exceptions
2024-03-05 23:35:44,110:INFO:Preloading libraries
2024-03-05 23:35:44,110:INFO:Set up data.
2024-03-05 23:35:44,185:INFO:Set up index.
2024-03-05 23:35:44,694:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:35:44,728:INFO:Initializing finalize_model()
2024-03-05 23:35:44,728:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=325466424), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:35:44,728:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=325466424)
2024-03-05 23:35:44,929:INFO:Initializing create_model()
2024-03-05 23:35:44,929:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=325466424), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:35:44,929:INFO:Checking exceptions
2024-03-05 23:35:44,929:INFO:Importing libraries
2024-03-05 23:35:44,929:INFO:Copying training dataset
2024-03-05 23:35:44,960:INFO:Defining folds
2024-03-05 23:35:44,960:INFO:Declaring metric variables
2024-03-05 23:35:44,960:INFO:Importing untrained model
2024-03-05 23:35:44,960:INFO:Declaring custom model
2024-03-05 23:35:44,960:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:35:44,960:INFO:Cross validation set to False
2024-03-05 23:35:44,960:INFO:Fitting Model
2024-03-05 23:35:58,915:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=325466424))])
2024-03-05 23:35:58,915:INFO:create_model() successfully completed......................................
2024-03-05 23:35:59,049:INFO:_master_model_container: 20
2024-03-05 23:35:59,049:INFO:_display_container: 4
2024-03-05 23:35:59,066:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=325466424))])
2024-03-05 23:35:59,066:INFO:finalize_model() successfully completed......................................
2024-03-05 23:35:59,199:INFO:Initializing predict_model()
2024-03-05 23:35:59,199:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=325466424))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:35:59,199:INFO:Checking exceptions
2024-03-05 23:35:59,199:INFO:Preloading libraries
2024-03-05 23:35:59,215:INFO:Set up data.
2024-03-05 23:35:59,268:INFO:Set up index.
2024-03-05 23:35:59,632:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:35:59,666:INFO:Initializing finalize_model()
2024-03-05 23:35:59,666:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=822080656), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:35:59,666:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=822080656)
2024-03-05 23:35:59,832:INFO:Initializing create_model()
2024-03-05 23:35:59,832:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=822080656), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:35:59,832:INFO:Checking exceptions
2024-03-05 23:35:59,832:INFO:Importing libraries
2024-03-05 23:35:59,832:INFO:Copying training dataset
2024-03-05 23:35:59,866:INFO:Defining folds
2024-03-05 23:35:59,866:INFO:Declaring metric variables
2024-03-05 23:35:59,866:INFO:Importing untrained model
2024-03-05 23:35:59,866:INFO:Declaring custom model
2024-03-05 23:35:59,866:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:35:59,866:INFO:Cross validation set to False
2024-03-05 23:35:59,866:INFO:Fitting Model
2024-03-05 23:36:13,754:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=822080656))])
2024-03-05 23:36:13,754:INFO:create_model() successfully completed......................................
2024-03-05 23:36:13,888:INFO:_master_model_container: 20
2024-03-05 23:36:13,888:INFO:_display_container: 4
2024-03-05 23:36:13,888:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=822080656))])
2024-03-05 23:36:13,888:INFO:finalize_model() successfully completed......................................
2024-03-05 23:36:14,040:INFO:Initializing predict_model()
2024-03-05 23:36:14,040:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=822080656))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:36:14,040:INFO:Checking exceptions
2024-03-05 23:36:14,040:INFO:Preloading libraries
2024-03-05 23:36:14,040:INFO:Set up data.
2024-03-05 23:36:14,091:INFO:Set up index.
2024-03-05 23:36:14,455:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:36:14,488:INFO:Initializing finalize_model()
2024-03-05 23:36:14,488:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1809881982), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:36:14,488:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1809881982)
2024-03-05 23:36:14,671:INFO:Initializing create_model()
2024-03-05 23:36:14,671:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1809881982), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:36:14,671:INFO:Checking exceptions
2024-03-05 23:36:14,671:INFO:Importing libraries
2024-03-05 23:36:14,671:INFO:Copying training dataset
2024-03-05 23:36:14,705:INFO:Defining folds
2024-03-05 23:36:14,705:INFO:Declaring metric variables
2024-03-05 23:36:14,705:INFO:Importing untrained model
2024-03-05 23:36:14,705:INFO:Declaring custom model
2024-03-05 23:36:14,705:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:36:14,705:INFO:Cross validation set to False
2024-03-05 23:36:14,705:INFO:Fitting Model
2024-03-05 23:36:28,727:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1809881982))])
2024-03-05 23:36:28,727:INFO:create_model() successfully completed......................................
2024-03-05 23:36:28,860:INFO:_master_model_container: 20
2024-03-05 23:36:28,860:INFO:_display_container: 4
2024-03-05 23:36:28,860:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1809881982))])
2024-03-05 23:36:28,860:INFO:finalize_model() successfully completed......................................
2024-03-05 23:36:29,010:INFO:Initializing predict_model()
2024-03-05 23:36:29,010:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1809881982))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:36:29,010:INFO:Checking exceptions
2024-03-05 23:36:29,010:INFO:Preloading libraries
2024-03-05 23:36:29,010:INFO:Set up data.
2024-03-05 23:36:29,065:INFO:Set up index.
2024-03-05 23:36:29,427:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:36:29,462:INFO:Initializing finalize_model()
2024-03-05 23:36:29,462:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1059584192), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:36:29,462:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1059584192)
2024-03-05 23:36:29,644:INFO:Initializing create_model()
2024-03-05 23:36:29,644:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1059584192), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:36:29,644:INFO:Checking exceptions
2024-03-05 23:36:29,644:INFO:Importing libraries
2024-03-05 23:36:29,644:INFO:Copying training dataset
2024-03-05 23:36:29,677:INFO:Defining folds
2024-03-05 23:36:29,677:INFO:Declaring metric variables
2024-03-05 23:36:29,677:INFO:Importing untrained model
2024-03-05 23:36:29,677:INFO:Declaring custom model
2024-03-05 23:36:29,693:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:36:29,694:INFO:Cross validation set to False
2024-03-05 23:36:29,694:INFO:Fitting Model
2024-03-05 23:36:44,101:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1059584192))])
2024-03-05 23:36:44,101:INFO:create_model() successfully completed......................................
2024-03-05 23:36:44,235:INFO:_master_model_container: 20
2024-03-05 23:36:44,235:INFO:_display_container: 4
2024-03-05 23:36:44,235:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1059584192))])
2024-03-05 23:36:44,235:INFO:finalize_model() successfully completed......................................
2024-03-05 23:36:44,382:INFO:Initializing predict_model()
2024-03-05 23:36:44,382:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1059584192))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:36:44,382:INFO:Checking exceptions
2024-03-05 23:36:44,382:INFO:Preloading libraries
2024-03-05 23:36:44,382:INFO:Set up data.
2024-03-05 23:36:44,441:INFO:Set up index.
2024-03-05 23:36:44,832:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:36:44,870:INFO:Initializing finalize_model()
2024-03-05 23:36:44,870:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1148576320), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:36:44,870:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1148576320)
2024-03-05 23:36:45,031:INFO:Initializing create_model()
2024-03-05 23:36:45,031:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1148576320), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:36:45,031:INFO:Checking exceptions
2024-03-05 23:36:45,031:INFO:Importing libraries
2024-03-05 23:36:45,031:INFO:Copying training dataset
2024-03-05 23:36:45,078:INFO:Defining folds
2024-03-05 23:36:45,078:INFO:Declaring metric variables
2024-03-05 23:36:45,078:INFO:Importing untrained model
2024-03-05 23:36:45,078:INFO:Declaring custom model
2024-03-05 23:36:45,078:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:36:45,078:INFO:Cross validation set to False
2024-03-05 23:36:45,078:INFO:Fitting Model
2024-03-05 23:36:59,182:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1148576320))])
2024-03-05 23:36:59,182:INFO:create_model() successfully completed......................................
2024-03-05 23:36:59,310:INFO:_master_model_container: 20
2024-03-05 23:36:59,310:INFO:_display_container: 4
2024-03-05 23:36:59,325:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1148576320))])
2024-03-05 23:36:59,325:INFO:finalize_model() successfully completed......................................
2024-03-05 23:36:59,453:INFO:Initializing predict_model()
2024-03-05 23:36:59,453:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1148576320))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:36:59,453:INFO:Checking exceptions
2024-03-05 23:36:59,453:INFO:Preloading libraries
2024-03-05 23:36:59,453:INFO:Set up data.
2024-03-05 23:36:59,537:INFO:Set up index.
2024-03-05 23:36:59,905:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:36:59,938:INFO:Initializing finalize_model()
2024-03-05 23:36:59,938:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=532828437), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:36:59,938:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=532828437)
2024-03-05 23:37:00,119:INFO:Initializing create_model()
2024-03-05 23:37:00,119:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=532828437), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:37:00,119:INFO:Checking exceptions
2024-03-05 23:37:00,119:INFO:Importing libraries
2024-03-05 23:37:00,119:INFO:Copying training dataset
2024-03-05 23:37:00,151:INFO:Defining folds
2024-03-05 23:37:00,151:INFO:Declaring metric variables
2024-03-05 23:37:00,151:INFO:Importing untrained model
2024-03-05 23:37:00,151:INFO:Declaring custom model
2024-03-05 23:37:00,151:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:37:00,151:INFO:Cross validation set to False
2024-03-05 23:37:00,151:INFO:Fitting Model
2024-03-05 23:37:14,094:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=532828437))])
2024-03-05 23:37:14,094:INFO:create_model() successfully completed......................................
2024-03-05 23:37:14,233:INFO:_master_model_container: 20
2024-03-05 23:37:14,233:INFO:_display_container: 4
2024-03-05 23:37:14,237:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=532828437))])
2024-03-05 23:37:14,237:INFO:finalize_model() successfully completed......................................
2024-03-05 23:37:14,377:INFO:Initializing predict_model()
2024-03-05 23:37:14,377:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=532828437))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:37:14,377:INFO:Checking exceptions
2024-03-05 23:37:14,377:INFO:Preloading libraries
2024-03-05 23:37:14,378:INFO:Set up data.
2024-03-05 23:37:14,441:INFO:Set up index.
2024-03-05 23:37:14,830:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:37:14,861:INFO:Initializing finalize_model()
2024-03-05 23:37:14,861:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=747537993), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:37:14,861:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=747537993)
2024-03-05 23:37:15,036:INFO:Initializing create_model()
2024-03-05 23:37:15,036:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=747537993), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:37:15,036:INFO:Checking exceptions
2024-03-05 23:37:15,037:INFO:Importing libraries
2024-03-05 23:37:15,037:INFO:Copying training dataset
2024-03-05 23:37:15,061:INFO:Defining folds
2024-03-05 23:37:15,061:INFO:Declaring metric variables
2024-03-05 23:37:15,061:INFO:Importing untrained model
2024-03-05 23:37:15,061:INFO:Declaring custom model
2024-03-05 23:37:15,061:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:37:15,061:INFO:Cross validation set to False
2024-03-05 23:37:15,061:INFO:Fitting Model
2024-03-05 23:37:29,319:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=747537993))])
2024-03-05 23:37:29,319:INFO:create_model() successfully completed......................................
2024-03-05 23:37:29,466:INFO:_master_model_container: 20
2024-03-05 23:37:29,466:INFO:_display_container: 4
2024-03-05 23:37:29,466:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=747537993))])
2024-03-05 23:37:29,466:INFO:finalize_model() successfully completed......................................
2024-03-05 23:37:29,600:INFO:Initializing predict_model()
2024-03-05 23:37:29,600:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=747537993))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:37:29,600:INFO:Checking exceptions
2024-03-05 23:37:29,600:INFO:Preloading libraries
2024-03-05 23:37:29,600:INFO:Set up data.
2024-03-05 23:37:29,688:INFO:Set up index.
2024-03-05 23:37:30,050:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:37:30,083:INFO:Initializing finalize_model()
2024-03-05 23:37:30,083:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1818141491), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:37:30,083:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1818141491)
2024-03-05 23:37:30,250:INFO:Initializing create_model()
2024-03-05 23:37:30,250:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1818141491), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:37:30,250:INFO:Checking exceptions
2024-03-05 23:37:30,250:INFO:Importing libraries
2024-03-05 23:37:30,250:INFO:Copying training dataset
2024-03-05 23:37:30,281:INFO:Defining folds
2024-03-05 23:37:30,281:INFO:Declaring metric variables
2024-03-05 23:37:30,281:INFO:Importing untrained model
2024-03-05 23:37:30,281:INFO:Declaring custom model
2024-03-05 23:37:30,281:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:37:30,281:INFO:Cross validation set to False
2024-03-05 23:37:30,281:INFO:Fitting Model
2024-03-05 23:37:44,188:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1818141491))])
2024-03-05 23:37:44,188:INFO:create_model() successfully completed......................................
2024-03-05 23:37:44,322:INFO:_master_model_container: 20
2024-03-05 23:37:44,322:INFO:_display_container: 4
2024-03-05 23:37:44,322:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1818141491))])
2024-03-05 23:37:44,322:INFO:finalize_model() successfully completed......................................
2024-03-05 23:37:44,474:INFO:Initializing predict_model()
2024-03-05 23:37:44,474:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1818141491))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC0BD80>)
2024-03-05 23:37:44,474:INFO:Checking exceptions
2024-03-05 23:37:44,474:INFO:Preloading libraries
2024-03-05 23:37:44,474:INFO:Set up data.
2024-03-05 23:37:44,526:INFO:Set up index.
2024-03-05 23:37:44,889:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:37:44,924:INFO:Initializing finalize_model()
2024-03-05 23:37:44,924:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1096051101), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:37:44,924:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1096051101)
2024-03-05 23:37:45,105:INFO:Initializing create_model()
2024-03-05 23:37:45,105:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1096051101), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:37:45,105:INFO:Checking exceptions
2024-03-05 23:37:45,105:INFO:Importing libraries
2024-03-05 23:37:45,105:INFO:Copying training dataset
2024-03-05 23:37:45,153:INFO:Defining folds
2024-03-05 23:37:45,153:INFO:Declaring metric variables
2024-03-05 23:37:45,153:INFO:Importing untrained model
2024-03-05 23:37:45,153:INFO:Declaring custom model
2024-03-05 23:37:45,153:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:37:45,153:INFO:Cross validation set to False
2024-03-05 23:37:45,153:INFO:Fitting Model
2024-03-05 23:37:59,445:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1096051101))])
2024-03-05 23:37:59,445:INFO:create_model() successfully completed......................................
2024-03-05 23:37:59,578:INFO:_master_model_container: 20
2024-03-05 23:37:59,578:INFO:_display_container: 4
2024-03-05 23:37:59,578:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1096051101))])
2024-03-05 23:37:59,578:INFO:finalize_model() successfully completed......................................
2024-03-05 23:37:59,732:INFO:Initializing predict_model()
2024-03-05 23:37:59,732:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1096051101))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:37:59,732:INFO:Checking exceptions
2024-03-05 23:37:59,732:INFO:Preloading libraries
2024-03-05 23:37:59,745:INFO:Set up data.
2024-03-05 23:37:59,799:INFO:Set up index.
2024-03-05 23:38:00,178:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:38:00,212:INFO:Initializing finalize_model()
2024-03-05 23:38:00,212:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=657353272), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:38:00,212:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=657353272)
2024-03-05 23:38:00,378:INFO:Initializing create_model()
2024-03-05 23:38:00,378:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=657353272), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:38:00,378:INFO:Checking exceptions
2024-03-05 23:38:00,378:INFO:Importing libraries
2024-03-05 23:38:00,378:INFO:Copying training dataset
2024-03-05 23:38:00,412:INFO:Defining folds
2024-03-05 23:38:00,412:INFO:Declaring metric variables
2024-03-05 23:38:00,412:INFO:Importing untrained model
2024-03-05 23:38:00,412:INFO:Declaring custom model
2024-03-05 23:38:00,412:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:38:00,412:INFO:Cross validation set to False
2024-03-05 23:38:00,412:INFO:Fitting Model
2024-03-05 23:38:14,367:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=657353272))])
2024-03-05 23:38:14,367:INFO:create_model() successfully completed......................................
2024-03-05 23:38:14,518:INFO:_master_model_container: 20
2024-03-05 23:38:14,519:INFO:_display_container: 4
2024-03-05 23:38:14,519:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=657353272))])
2024-03-05 23:38:14,519:INFO:finalize_model() successfully completed......................................
2024-03-05 23:38:14,667:INFO:Initializing predict_model()
2024-03-05 23:38:14,667:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=657353272))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:38:14,667:INFO:Checking exceptions
2024-03-05 23:38:14,667:INFO:Preloading libraries
2024-03-05 23:38:14,667:INFO:Set up data.
2024-03-05 23:38:14,722:INFO:Set up index.
2024-03-05 23:38:15,084:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:38:15,117:INFO:Initializing finalize_model()
2024-03-05 23:38:15,117:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=15509015), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:38:15,117:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=15509015)
2024-03-05 23:38:15,284:INFO:Initializing create_model()
2024-03-05 23:38:15,284:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=15509015), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:38:15,284:INFO:Checking exceptions
2024-03-05 23:38:15,284:INFO:Importing libraries
2024-03-05 23:38:15,284:INFO:Copying training dataset
2024-03-05 23:38:15,317:INFO:Defining folds
2024-03-05 23:38:15,317:INFO:Declaring metric variables
2024-03-05 23:38:15,317:INFO:Importing untrained model
2024-03-05 23:38:15,317:INFO:Declaring custom model
2024-03-05 23:38:15,317:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:38:15,317:INFO:Cross validation set to False
2024-03-05 23:38:15,317:INFO:Fitting Model
2024-03-05 23:38:29,289:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=15509015))])
2024-03-05 23:38:29,289:INFO:create_model() successfully completed......................................
2024-03-05 23:38:29,406:INFO:_master_model_container: 20
2024-03-05 23:38:29,406:INFO:_display_container: 4
2024-03-05 23:38:29,423:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=15509015))])
2024-03-05 23:38:29,423:INFO:finalize_model() successfully completed......................................
2024-03-05 23:38:29,573:INFO:Initializing predict_model()
2024-03-05 23:38:29,573:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=15509015))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:38:29,573:INFO:Checking exceptions
2024-03-05 23:38:29,573:INFO:Preloading libraries
2024-03-05 23:38:29,573:INFO:Set up data.
2024-03-05 23:38:29,639:INFO:Set up index.
2024-03-05 23:38:29,990:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:38:30,023:INFO:Initializing finalize_model()
2024-03-05 23:38:30,023:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=391432728), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:38:30,023:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=391432728)
2024-03-05 23:38:30,206:INFO:Initializing create_model()
2024-03-05 23:38:30,206:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=391432728), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:38:30,206:INFO:Checking exceptions
2024-03-05 23:38:30,206:INFO:Importing libraries
2024-03-05 23:38:30,206:INFO:Copying training dataset
2024-03-05 23:38:30,240:INFO:Defining folds
2024-03-05 23:38:30,240:INFO:Declaring metric variables
2024-03-05 23:38:30,240:INFO:Importing untrained model
2024-03-05 23:38:30,240:INFO:Declaring custom model
2024-03-05 23:38:30,240:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:38:30,240:INFO:Cross validation set to False
2024-03-05 23:38:30,240:INFO:Fitting Model
2024-03-05 23:38:44,195:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=391432728))])
2024-03-05 23:38:44,195:INFO:create_model() successfully completed......................................
2024-03-05 23:38:44,332:INFO:_master_model_container: 20
2024-03-05 23:38:44,332:INFO:_display_container: 4
2024-03-05 23:38:44,332:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=391432728))])
2024-03-05 23:38:44,332:INFO:finalize_model() successfully completed......................................
2024-03-05 23:38:44,478:INFO:Initializing predict_model()
2024-03-05 23:38:44,478:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=391432728))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:38:44,478:INFO:Checking exceptions
2024-03-05 23:38:44,478:INFO:Preloading libraries
2024-03-05 23:38:44,478:INFO:Set up data.
2024-03-05 23:38:44,538:INFO:Set up index.
2024-03-05 23:38:44,896:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:38:44,929:INFO:Initializing finalize_model()
2024-03-05 23:38:44,929:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=793826030), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:38:44,929:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=793826030)
2024-03-05 23:38:45,112:INFO:Initializing create_model()
2024-03-05 23:38:45,112:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=793826030), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:38:45,112:INFO:Checking exceptions
2024-03-05 23:38:45,112:INFO:Importing libraries
2024-03-05 23:38:45,112:INFO:Copying training dataset
2024-03-05 23:38:45,145:INFO:Defining folds
2024-03-05 23:38:45,145:INFO:Declaring metric variables
2024-03-05 23:38:45,145:INFO:Importing untrained model
2024-03-05 23:38:45,145:INFO:Declaring custom model
2024-03-05 23:38:45,145:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:38:45,145:INFO:Cross validation set to False
2024-03-05 23:38:45,145:INFO:Fitting Model
2024-03-05 23:38:59,067:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=793826030))])
2024-03-05 23:38:59,067:INFO:create_model() successfully completed......................................
2024-03-05 23:38:59,201:INFO:_master_model_container: 20
2024-03-05 23:38:59,201:INFO:_display_container: 4
2024-03-05 23:38:59,201:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=793826030))])
2024-03-05 23:38:59,201:INFO:finalize_model() successfully completed......................................
2024-03-05 23:38:59,351:INFO:Initializing predict_model()
2024-03-05 23:38:59,351:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=793826030))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:38:59,351:INFO:Checking exceptions
2024-03-05 23:38:59,351:INFO:Preloading libraries
2024-03-05 23:38:59,351:INFO:Set up data.
2024-03-05 23:38:59,413:INFO:Set up index.
2024-03-05 23:38:59,768:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:38:59,801:INFO:Initializing finalize_model()
2024-03-05 23:38:59,801:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=963562354), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:38:59,801:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=963562354)
2024-03-05 23:38:59,984:INFO:Initializing create_model()
2024-03-05 23:38:59,984:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=963562354), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:38:59,984:INFO:Checking exceptions
2024-03-05 23:38:59,984:INFO:Importing libraries
2024-03-05 23:38:59,984:INFO:Copying training dataset
2024-03-05 23:39:00,035:INFO:Defining folds
2024-03-05 23:39:00,035:INFO:Declaring metric variables
2024-03-05 23:39:00,035:INFO:Importing untrained model
2024-03-05 23:39:00,035:INFO:Declaring custom model
2024-03-05 23:39:00,035:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:39:00,035:INFO:Cross validation set to False
2024-03-05 23:39:00,035:INFO:Fitting Model
2024-03-05 23:39:14,056:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=963562354))])
2024-03-05 23:39:14,056:INFO:create_model() successfully completed......................................
2024-03-05 23:39:14,193:INFO:_master_model_container: 20
2024-03-05 23:39:14,193:INFO:_display_container: 4
2024-03-05 23:39:14,193:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=963562354))])
2024-03-05 23:39:14,193:INFO:finalize_model() successfully completed......................................
2024-03-05 23:39:14,340:INFO:Initializing predict_model()
2024-03-05 23:39:14,340:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=963562354))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:39:14,340:INFO:Checking exceptions
2024-03-05 23:39:14,340:INFO:Preloading libraries
2024-03-05 23:39:14,340:INFO:Set up data.
2024-03-05 23:39:14,397:INFO:Set up index.
2024-03-05 23:39:14,757:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:39:14,790:INFO:Initializing finalize_model()
2024-03-05 23:39:14,790:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=825485063), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:39:14,790:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=825485063)
2024-03-05 23:39:14,940:INFO:Initializing create_model()
2024-03-05 23:39:14,940:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=825485063), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:39:14,940:INFO:Checking exceptions
2024-03-05 23:39:14,957:INFO:Importing libraries
2024-03-05 23:39:14,957:INFO:Copying training dataset
2024-03-05 23:39:14,990:INFO:Defining folds
2024-03-05 23:39:14,990:INFO:Declaring metric variables
2024-03-05 23:39:14,990:INFO:Importing untrained model
2024-03-05 23:39:14,990:INFO:Declaring custom model
2024-03-05 23:39:14,990:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:39:14,990:INFO:Cross validation set to False
2024-03-05 23:39:14,990:INFO:Fitting Model
2024-03-05 23:39:29,230:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=825485063))])
2024-03-05 23:39:29,230:INFO:create_model() successfully completed......................................
2024-03-05 23:39:29,362:INFO:_master_model_container: 20
2024-03-05 23:39:29,362:INFO:_display_container: 4
2024-03-05 23:39:29,362:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=825485063))])
2024-03-05 23:39:29,362:INFO:finalize_model() successfully completed......................................
2024-03-05 23:39:29,512:INFO:Initializing predict_model()
2024-03-05 23:39:29,512:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=825485063))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:39:29,512:INFO:Checking exceptions
2024-03-05 23:39:29,512:INFO:Preloading libraries
2024-03-05 23:39:29,512:INFO:Set up data.
2024-03-05 23:39:29,579:INFO:Set up index.
2024-03-05 23:39:29,929:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:39:29,946:INFO:Initializing finalize_model()
2024-03-05 23:39:29,946:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1090881647), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:39:29,946:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1090881647)
2024-03-05 23:39:30,129:INFO:Initializing create_model()
2024-03-05 23:39:30,129:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1090881647), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:39:30,129:INFO:Checking exceptions
2024-03-05 23:39:30,129:INFO:Importing libraries
2024-03-05 23:39:30,129:INFO:Copying training dataset
2024-03-05 23:39:30,162:INFO:Defining folds
2024-03-05 23:39:30,162:INFO:Declaring metric variables
2024-03-05 23:39:30,162:INFO:Importing untrained model
2024-03-05 23:39:30,162:INFO:Declaring custom model
2024-03-05 23:39:30,162:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:39:30,162:INFO:Cross validation set to False
2024-03-05 23:39:30,162:INFO:Fitting Model
2024-03-05 23:39:43,985:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1090881647))])
2024-03-05 23:39:43,985:INFO:create_model() successfully completed......................................
2024-03-05 23:39:44,121:INFO:_master_model_container: 20
2024-03-05 23:39:44,121:INFO:_display_container: 4
2024-03-05 23:39:44,121:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1090881647))])
2024-03-05 23:39:44,121:INFO:finalize_model() successfully completed......................................
2024-03-05 23:39:44,252:INFO:Initializing predict_model()
2024-03-05 23:39:44,252:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1090881647))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC0BD80>)
2024-03-05 23:39:44,252:INFO:Checking exceptions
2024-03-05 23:39:44,252:INFO:Preloading libraries
2024-03-05 23:39:44,268:INFO:Set up data.
2024-03-05 23:39:44,339:INFO:Set up index.
2024-03-05 23:39:44,701:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:39:44,735:INFO:Initializing finalize_model()
2024-03-05 23:39:44,735:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1331920699), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:39:44,735:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1331920699)
2024-03-05 23:39:44,918:INFO:Initializing create_model()
2024-03-05 23:39:44,918:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1331920699), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:39:44,918:INFO:Checking exceptions
2024-03-05 23:39:44,918:INFO:Importing libraries
2024-03-05 23:39:44,918:INFO:Copying training dataset
2024-03-05 23:39:44,952:INFO:Defining folds
2024-03-05 23:39:44,952:INFO:Declaring metric variables
2024-03-05 23:39:44,952:INFO:Importing untrained model
2024-03-05 23:39:44,952:INFO:Declaring custom model
2024-03-05 23:39:44,952:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:39:44,952:INFO:Cross validation set to False
2024-03-05 23:39:44,952:INFO:Fitting Model
2024-03-05 23:39:58,924:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1331920699))])
2024-03-05 23:39:58,924:INFO:create_model() successfully completed......................................
2024-03-05 23:39:59,057:INFO:_master_model_container: 20
2024-03-05 23:39:59,057:INFO:_display_container: 4
2024-03-05 23:39:59,057:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1331920699))])
2024-03-05 23:39:59,057:INFO:finalize_model() successfully completed......................................
2024-03-05 23:39:59,207:INFO:Initializing predict_model()
2024-03-05 23:39:59,207:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1331920699))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:39:59,207:INFO:Checking exceptions
2024-03-05 23:39:59,207:INFO:Preloading libraries
2024-03-05 23:39:59,207:INFO:Set up data.
2024-03-05 23:39:59,269:INFO:Set up index.
2024-03-05 23:39:59,638:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:39:59,680:INFO:Initializing finalize_model()
2024-03-05 23:39:59,680:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2073643214), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:39:59,680:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2073643214)
2024-03-05 23:39:59,866:INFO:Initializing create_model()
2024-03-05 23:39:59,866:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2073643214), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:39:59,866:INFO:Checking exceptions
2024-03-05 23:39:59,867:INFO:Importing libraries
2024-03-05 23:39:59,867:INFO:Copying training dataset
2024-03-05 23:39:59,901:INFO:Defining folds
2024-03-05 23:39:59,901:INFO:Declaring metric variables
2024-03-05 23:39:59,901:INFO:Importing untrained model
2024-03-05 23:39:59,901:INFO:Declaring custom model
2024-03-05 23:39:59,903:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:39:59,903:INFO:Cross validation set to False
2024-03-05 23:39:59,903:INFO:Fitting Model
2024-03-05 23:40:13,980:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2073643214))])
2024-03-05 23:40:13,980:INFO:create_model() successfully completed......................................
2024-03-05 23:40:14,113:INFO:_master_model_container: 20
2024-03-05 23:40:14,113:INFO:_display_container: 4
2024-03-05 23:40:14,129:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2073643214))])
2024-03-05 23:40:14,129:INFO:finalize_model() successfully completed......................................
2024-03-05 23:40:14,263:INFO:Initializing predict_model()
2024-03-05 23:40:14,263:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2073643214))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:40:14,263:INFO:Checking exceptions
2024-03-05 23:40:14,263:INFO:Preloading libraries
2024-03-05 23:40:14,263:INFO:Set up data.
2024-03-05 23:40:14,330:INFO:Set up index.
2024-03-05 23:40:14,711:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:40:14,748:INFO:Initializing finalize_model()
2024-03-05 23:40:14,748:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1686614889), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:40:14,749:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1686614889)
2024-03-05 23:40:14,912:INFO:Initializing create_model()
2024-03-05 23:40:14,912:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1686614889), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:40:14,912:INFO:Checking exceptions
2024-03-05 23:40:14,912:INFO:Importing libraries
2024-03-05 23:40:14,912:INFO:Copying training dataset
2024-03-05 23:40:14,944:INFO:Defining folds
2024-03-05 23:40:14,944:INFO:Declaring metric variables
2024-03-05 23:40:14,944:INFO:Importing untrained model
2024-03-05 23:40:14,944:INFO:Declaring custom model
2024-03-05 23:40:14,944:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:40:14,944:INFO:Cross validation set to False
2024-03-05 23:40:14,944:INFO:Fitting Model
2024-03-05 23:40:29,023:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1686614889))])
2024-03-05 23:40:29,023:INFO:create_model() successfully completed......................................
2024-03-05 23:40:29,152:INFO:_master_model_container: 20
2024-03-05 23:40:29,152:INFO:_display_container: 4
2024-03-05 23:40:29,168:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1686614889))])
2024-03-05 23:40:29,168:INFO:finalize_model() successfully completed......................................
2024-03-05 23:40:29,302:INFO:Initializing predict_model()
2024-03-05 23:40:29,302:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1686614889))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:40:29,302:INFO:Checking exceptions
2024-03-05 23:40:29,302:INFO:Preloading libraries
2024-03-05 23:40:29,302:INFO:Set up data.
2024-03-05 23:40:29,369:INFO:Set up index.
2024-03-05 23:40:29,735:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:40:29,769:INFO:Initializing finalize_model()
2024-03-05 23:40:29,769:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1835921082), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:40:29,769:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1835921082)
2024-03-05 23:40:29,935:INFO:Initializing create_model()
2024-03-05 23:40:29,935:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1835921082), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:40:29,935:INFO:Checking exceptions
2024-03-05 23:40:29,935:INFO:Importing libraries
2024-03-05 23:40:29,935:INFO:Copying training dataset
2024-03-05 23:40:29,969:INFO:Defining folds
2024-03-05 23:40:29,969:INFO:Declaring metric variables
2024-03-05 23:40:29,969:INFO:Importing untrained model
2024-03-05 23:40:29,969:INFO:Declaring custom model
2024-03-05 23:40:29,969:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:40:29,969:INFO:Cross validation set to False
2024-03-05 23:40:29,969:INFO:Fitting Model
2024-03-05 23:40:43,860:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1835921082))])
2024-03-05 23:40:43,860:INFO:create_model() successfully completed......................................
2024-03-05 23:40:43,991:INFO:_master_model_container: 20
2024-03-05 23:40:43,991:INFO:_display_container: 4
2024-03-05 23:40:43,991:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1835921082))])
2024-03-05 23:40:43,991:INFO:finalize_model() successfully completed......................................
2024-03-05 23:40:44,141:INFO:Initializing predict_model()
2024-03-05 23:40:44,141:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1835921082))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:40:44,141:INFO:Checking exceptions
2024-03-05 23:40:44,141:INFO:Preloading libraries
2024-03-05 23:40:44,141:INFO:Set up data.
2024-03-05 23:40:44,203:INFO:Set up index.
2024-03-05 23:40:44,558:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:40:44,591:INFO:Initializing finalize_model()
2024-03-05 23:40:44,591:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1082647538), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:40:44,591:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1082647538)
2024-03-05 23:40:44,776:INFO:Initializing create_model()
2024-03-05 23:40:44,776:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1082647538), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:40:44,776:INFO:Checking exceptions
2024-03-05 23:40:44,777:INFO:Importing libraries
2024-03-05 23:40:44,777:INFO:Copying training dataset
2024-03-05 23:40:44,808:INFO:Defining folds
2024-03-05 23:40:44,808:INFO:Declaring metric variables
2024-03-05 23:40:44,808:INFO:Importing untrained model
2024-03-05 23:40:44,808:INFO:Declaring custom model
2024-03-05 23:40:44,808:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:40:44,808:INFO:Cross validation set to False
2024-03-05 23:40:44,808:INFO:Fitting Model
2024-03-05 23:40:59,013:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1082647538))])
2024-03-05 23:40:59,013:INFO:create_model() successfully completed......................................
2024-03-05 23:40:59,148:INFO:_master_model_container: 20
2024-03-05 23:40:59,148:INFO:_display_container: 4
2024-03-05 23:40:59,148:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1082647538))])
2024-03-05 23:40:59,148:INFO:finalize_model() successfully completed......................................
2024-03-05 23:40:59,296:INFO:Initializing predict_model()
2024-03-05 23:40:59,296:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1082647538))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:40:59,296:INFO:Checking exceptions
2024-03-05 23:40:59,296:INFO:Preloading libraries
2024-03-05 23:40:59,296:INFO:Set up data.
2024-03-05 23:40:59,363:INFO:Set up index.
2024-03-05 23:40:59,749:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:40:59,780:INFO:Initializing finalize_model()
2024-03-05 23:40:59,780:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1917898337), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:40:59,780:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1917898337)
2024-03-05 23:40:59,947:INFO:Initializing create_model()
2024-03-05 23:40:59,947:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1917898337), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:40:59,947:INFO:Checking exceptions
2024-03-05 23:40:59,947:INFO:Importing libraries
2024-03-05 23:40:59,947:INFO:Copying training dataset
2024-03-05 23:40:59,983:INFO:Defining folds
2024-03-05 23:40:59,983:INFO:Declaring metric variables
2024-03-05 23:40:59,983:INFO:Importing untrained model
2024-03-05 23:40:59,983:INFO:Declaring custom model
2024-03-05 23:40:59,983:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:40:59,983:INFO:Cross validation set to False
2024-03-05 23:40:59,983:INFO:Fitting Model
2024-03-05 23:41:14,002:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1917898337))])
2024-03-05 23:41:14,002:INFO:create_model() successfully completed......................................
2024-03-05 23:41:14,136:INFO:_master_model_container: 20
2024-03-05 23:41:14,136:INFO:_display_container: 4
2024-03-05 23:41:14,136:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1917898337))])
2024-03-05 23:41:14,136:INFO:finalize_model() successfully completed......................................
2024-03-05 23:41:14,286:INFO:Initializing predict_model()
2024-03-05 23:41:14,286:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1917898337))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:41:14,286:INFO:Checking exceptions
2024-03-05 23:41:14,286:INFO:Preloading libraries
2024-03-05 23:41:14,286:INFO:Set up data.
2024-03-05 23:41:14,352:INFO:Set up index.
2024-03-05 23:41:14,718:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:41:14,749:INFO:Initializing finalize_model()
2024-03-05 23:41:14,749:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1017394556), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:41:14,749:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1017394556)
2024-03-05 23:41:14,920:INFO:Initializing create_model()
2024-03-05 23:41:14,920:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1017394556), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:41:14,920:INFO:Checking exceptions
2024-03-05 23:41:14,920:INFO:Importing libraries
2024-03-05 23:41:14,920:INFO:Copying training dataset
2024-03-05 23:41:14,951:INFO:Defining folds
2024-03-05 23:41:14,951:INFO:Declaring metric variables
2024-03-05 23:41:14,951:INFO:Importing untrained model
2024-03-05 23:41:14,951:INFO:Declaring custom model
2024-03-05 23:41:14,951:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:41:14,951:INFO:Cross validation set to False
2024-03-05 23:41:14,951:INFO:Fitting Model
2024-03-05 23:41:29,111:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1017394556))])
2024-03-05 23:41:29,111:INFO:create_model() successfully completed......................................
2024-03-05 23:41:29,241:INFO:_master_model_container: 20
2024-03-05 23:41:29,241:INFO:_display_container: 4
2024-03-05 23:41:29,241:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1017394556))])
2024-03-05 23:41:29,241:INFO:finalize_model() successfully completed......................................
2024-03-05 23:41:29,392:INFO:Initializing predict_model()
2024-03-05 23:41:29,392:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1017394556))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:41:29,392:INFO:Checking exceptions
2024-03-05 23:41:29,392:INFO:Preloading libraries
2024-03-05 23:41:29,392:INFO:Set up data.
2024-03-05 23:41:29,446:INFO:Set up index.
2024-03-05 23:41:29,808:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:41:29,861:INFO:Initializing finalize_model()
2024-03-05 23:41:29,861:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1090726534), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:41:29,861:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1090726534)
2024-03-05 23:41:30,025:INFO:Initializing create_model()
2024-03-05 23:41:30,025:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1090726534), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:41:30,025:INFO:Checking exceptions
2024-03-05 23:41:30,025:INFO:Importing libraries
2024-03-05 23:41:30,025:INFO:Copying training dataset
2024-03-05 23:41:30,058:INFO:Defining folds
2024-03-05 23:41:30,058:INFO:Declaring metric variables
2024-03-05 23:41:30,058:INFO:Importing untrained model
2024-03-05 23:41:30,058:INFO:Declaring custom model
2024-03-05 23:41:30,058:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:41:30,058:INFO:Cross validation set to False
2024-03-05 23:41:30,058:INFO:Fitting Model
2024-03-05 23:41:44,097:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1090726534))])
2024-03-05 23:41:44,097:INFO:create_model() successfully completed......................................
2024-03-05 23:41:44,213:INFO:_master_model_container: 20
2024-03-05 23:41:44,213:INFO:_display_container: 4
2024-03-05 23:41:44,230:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1090726534))])
2024-03-05 23:41:44,230:INFO:finalize_model() successfully completed......................................
2024-03-05 23:41:44,380:INFO:Initializing predict_model()
2024-03-05 23:41:44,380:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1090726534))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC0BD80>)
2024-03-05 23:41:44,380:INFO:Checking exceptions
2024-03-05 23:41:44,380:INFO:Preloading libraries
2024-03-05 23:41:44,380:INFO:Set up data.
2024-03-05 23:41:44,440:INFO:Set up index.
2024-03-05 23:41:44,799:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:41:44,830:INFO:Initializing finalize_model()
2024-03-05 23:41:44,830:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=546158129), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:41:44,830:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=546158129)
2024-03-05 23:41:44,999:INFO:Initializing create_model()
2024-03-05 23:41:44,999:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=546158129), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:41:44,999:INFO:Checking exceptions
2024-03-05 23:41:45,015:INFO:Importing libraries
2024-03-05 23:41:45,015:INFO:Copying training dataset
2024-03-05 23:41:45,046:INFO:Defining folds
2024-03-05 23:41:45,046:INFO:Declaring metric variables
2024-03-05 23:41:45,046:INFO:Importing untrained model
2024-03-05 23:41:45,046:INFO:Declaring custom model
2024-03-05 23:41:45,046:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:41:45,046:INFO:Cross validation set to False
2024-03-05 23:41:45,046:INFO:Fitting Model
2024-03-05 23:41:59,135:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=546158129))])
2024-03-05 23:41:59,135:INFO:create_model() successfully completed......................................
2024-03-05 23:41:59,271:INFO:_master_model_container: 20
2024-03-05 23:41:59,271:INFO:_display_container: 4
2024-03-05 23:41:59,271:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=546158129))])
2024-03-05 23:41:59,271:INFO:finalize_model() successfully completed......................................
2024-03-05 23:41:59,420:INFO:Initializing predict_model()
2024-03-05 23:41:59,420:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=546158129))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:41:59,420:INFO:Checking exceptions
2024-03-05 23:41:59,420:INFO:Preloading libraries
2024-03-05 23:41:59,420:INFO:Set up data.
2024-03-05 23:41:59,475:INFO:Set up index.
2024-03-05 23:41:59,837:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:41:59,870:INFO:Initializing finalize_model()
2024-03-05 23:41:59,870:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=410204030), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:41:59,870:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=410204030)
2024-03-05 23:42:00,054:INFO:Initializing create_model()
2024-03-05 23:42:00,054:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=410204030), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:42:00,054:INFO:Checking exceptions
2024-03-05 23:42:00,070:INFO:Importing libraries
2024-03-05 23:42:00,070:INFO:Copying training dataset
2024-03-05 23:42:00,106:INFO:Defining folds
2024-03-05 23:42:00,106:INFO:Declaring metric variables
2024-03-05 23:42:00,106:INFO:Importing untrained model
2024-03-05 23:42:00,106:INFO:Declaring custom model
2024-03-05 23:42:00,106:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:42:00,106:INFO:Cross validation set to False
2024-03-05 23:42:00,106:INFO:Fitting Model
2024-03-05 23:42:14,008:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=410204030))])
2024-03-05 23:42:14,008:INFO:create_model() successfully completed......................................
2024-03-05 23:42:14,142:INFO:_master_model_container: 20
2024-03-05 23:42:14,142:INFO:_display_container: 4
2024-03-05 23:42:14,142:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=410204030))])
2024-03-05 23:42:14,142:INFO:finalize_model() successfully completed......................................
2024-03-05 23:42:14,295:INFO:Initializing predict_model()
2024-03-05 23:42:14,295:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=410204030))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:42:14,295:INFO:Checking exceptions
2024-03-05 23:42:14,295:INFO:Preloading libraries
2024-03-05 23:42:14,295:INFO:Set up data.
2024-03-05 23:42:14,349:INFO:Set up index.
2024-03-05 23:42:14,711:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:42:14,742:INFO:Initializing finalize_model()
2024-03-05 23:42:14,742:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1503007177), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:42:14,742:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1503007177)
2024-03-05 23:42:14,911:INFO:Initializing create_model()
2024-03-05 23:42:14,911:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1503007177), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:42:14,911:INFO:Checking exceptions
2024-03-05 23:42:14,911:INFO:Importing libraries
2024-03-05 23:42:14,911:INFO:Copying training dataset
2024-03-05 23:42:14,958:INFO:Defining folds
2024-03-05 23:42:14,958:INFO:Declaring metric variables
2024-03-05 23:42:14,958:INFO:Importing untrained model
2024-03-05 23:42:14,958:INFO:Declaring custom model
2024-03-05 23:42:14,958:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:42:14,958:INFO:Cross validation set to False
2024-03-05 23:42:14,958:INFO:Fitting Model
2024-03-05 23:42:29,047:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1503007177))])
2024-03-05 23:42:29,047:INFO:create_model() successfully completed......................................
2024-03-05 23:42:29,164:INFO:_master_model_container: 20
2024-03-05 23:42:29,164:INFO:_display_container: 4
2024-03-05 23:42:29,181:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1503007177))])
2024-03-05 23:42:29,181:INFO:finalize_model() successfully completed......................................
2024-03-05 23:42:29,317:INFO:Initializing predict_model()
2024-03-05 23:42:29,317:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1503007177))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:42:29,317:INFO:Checking exceptions
2024-03-05 23:42:29,317:INFO:Preloading libraries
2024-03-05 23:42:29,317:INFO:Set up data.
2024-03-05 23:42:29,373:INFO:Set up index.
2024-03-05 23:42:29,733:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:42:29,765:INFO:Initializing finalize_model()
2024-03-05 23:42:29,765:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1302217685), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:42:29,765:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1302217685)
2024-03-05 23:42:29,933:INFO:Initializing create_model()
2024-03-05 23:42:29,933:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1302217685), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:42:29,933:INFO:Checking exceptions
2024-03-05 23:42:29,933:INFO:Importing libraries
2024-03-05 23:42:29,933:INFO:Copying training dataset
2024-03-05 23:42:29,981:INFO:Defining folds
2024-03-05 23:42:29,981:INFO:Declaring metric variables
2024-03-05 23:42:29,981:INFO:Importing untrained model
2024-03-05 23:42:29,981:INFO:Declaring custom model
2024-03-05 23:42:29,981:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:42:29,981:INFO:Cross validation set to False
2024-03-05 23:42:29,981:INFO:Fitting Model
2024-03-05 23:42:43,986:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1302217685))])
2024-03-05 23:42:43,986:INFO:create_model() successfully completed......................................
2024-03-05 23:42:44,104:INFO:_master_model_container: 20
2024-03-05 23:42:44,104:INFO:_display_container: 4
2024-03-05 23:42:44,120:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1302217685))])
2024-03-05 23:42:44,120:INFO:finalize_model() successfully completed......................................
2024-03-05 23:42:44,253:INFO:Initializing predict_model()
2024-03-05 23:42:44,253:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1302217685))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:42:44,253:INFO:Checking exceptions
2024-03-05 23:42:44,253:INFO:Preloading libraries
2024-03-05 23:42:44,253:INFO:Set up data.
2024-03-05 23:42:44,330:INFO:Set up index.
2024-03-05 23:42:44,672:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:42:44,704:INFO:Initializing finalize_model()
2024-03-05 23:42:44,704:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1238421036), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:42:44,704:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1238421036)
2024-03-05 23:42:44,889:INFO:Initializing create_model()
2024-03-05 23:42:44,889:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1238421036), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:42:44,889:INFO:Checking exceptions
2024-03-05 23:42:44,889:INFO:Importing libraries
2024-03-05 23:42:44,889:INFO:Copying training dataset
2024-03-05 23:42:44,921:INFO:Defining folds
2024-03-05 23:42:44,921:INFO:Declaring metric variables
2024-03-05 23:42:44,921:INFO:Importing untrained model
2024-03-05 23:42:44,921:INFO:Declaring custom model
2024-03-05 23:42:44,921:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:42:44,936:INFO:Cross validation set to False
2024-03-05 23:42:44,936:INFO:Fitting Model
2024-03-05 23:42:58,876:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1238421036))])
2024-03-05 23:42:58,876:INFO:create_model() successfully completed......................................
2024-03-05 23:42:58,995:INFO:_master_model_container: 20
2024-03-05 23:42:58,995:INFO:_display_container: 4
2024-03-05 23:42:59,009:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1238421036))])
2024-03-05 23:42:59,009:INFO:finalize_model() successfully completed......................................
2024-03-05 23:42:59,142:INFO:Initializing predict_model()
2024-03-05 23:42:59,142:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1238421036))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:42:59,142:INFO:Checking exceptions
2024-03-05 23:42:59,142:INFO:Preloading libraries
2024-03-05 23:42:59,158:INFO:Set up data.
2024-03-05 23:42:59,221:INFO:Set up index.
2024-03-05 23:42:59,576:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:42:59,609:INFO:Initializing finalize_model()
2024-03-05 23:42:59,609:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1512871663), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:42:59,609:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1512871663)
2024-03-05 23:42:59,794:INFO:Initializing create_model()
2024-03-05 23:42:59,794:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1512871663), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:42:59,794:INFO:Checking exceptions
2024-03-05 23:42:59,794:INFO:Importing libraries
2024-03-05 23:42:59,794:INFO:Copying training dataset
2024-03-05 23:42:59,825:INFO:Defining folds
2024-03-05 23:42:59,825:INFO:Declaring metric variables
2024-03-05 23:42:59,825:INFO:Importing untrained model
2024-03-05 23:42:59,825:INFO:Declaring custom model
2024-03-05 23:42:59,825:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:42:59,825:INFO:Cross validation set to False
2024-03-05 23:42:59,825:INFO:Fitting Model
2024-03-05 23:43:13,948:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1512871663))])
2024-03-05 23:43:13,948:INFO:create_model() successfully completed......................................
2024-03-05 23:43:14,084:INFO:_master_model_container: 20
2024-03-05 23:43:14,084:INFO:_display_container: 4
2024-03-05 23:43:14,084:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1512871663))])
2024-03-05 23:43:14,084:INFO:finalize_model() successfully completed......................................
2024-03-05 23:43:14,229:INFO:Initializing predict_model()
2024-03-05 23:43:14,229:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1512871663))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:43:14,229:INFO:Checking exceptions
2024-03-05 23:43:14,229:INFO:Preloading libraries
2024-03-05 23:43:14,231:INFO:Set up data.
2024-03-05 23:43:14,288:INFO:Set up index.
2024-03-05 23:43:14,651:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:43:14,683:INFO:Initializing finalize_model()
2024-03-05 23:43:14,683:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1496074125), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:43:14,683:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1496074125)
2024-03-05 23:43:14,849:INFO:Initializing create_model()
2024-03-05 23:43:14,849:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1496074125), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:43:14,849:INFO:Checking exceptions
2024-03-05 23:43:14,865:INFO:Importing libraries
2024-03-05 23:43:14,865:INFO:Copying training dataset
2024-03-05 23:43:14,897:INFO:Defining folds
2024-03-05 23:43:14,897:INFO:Declaring metric variables
2024-03-05 23:43:14,897:INFO:Importing untrained model
2024-03-05 23:43:14,897:INFO:Declaring custom model
2024-03-05 23:43:14,897:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:43:14,897:INFO:Cross validation set to False
2024-03-05 23:43:14,897:INFO:Fitting Model
2024-03-05 23:43:28,873:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1496074125))])
2024-03-05 23:43:28,873:INFO:create_model() successfully completed......................................
2024-03-05 23:43:29,005:INFO:_master_model_container: 20
2024-03-05 23:43:29,005:INFO:_display_container: 4
2024-03-05 23:43:29,005:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1496074125))])
2024-03-05 23:43:29,005:INFO:finalize_model() successfully completed......................................
2024-03-05 23:43:29,154:INFO:Initializing predict_model()
2024-03-05 23:43:29,154:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1496074125))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:43:29,154:INFO:Checking exceptions
2024-03-05 23:43:29,154:INFO:Preloading libraries
2024-03-05 23:43:29,154:INFO:Set up data.
2024-03-05 23:43:29,214:INFO:Set up index.
2024-03-05 23:43:29,571:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:43:29,603:INFO:Initializing finalize_model()
2024-03-05 23:43:29,603:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2081350940), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:43:29,603:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2081350940)
2024-03-05 23:43:29,774:INFO:Initializing create_model()
2024-03-05 23:43:29,774:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2081350940), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:43:29,774:INFO:Checking exceptions
2024-03-05 23:43:29,790:INFO:Importing libraries
2024-03-05 23:43:29,790:INFO:Copying training dataset
2024-03-05 23:43:29,821:INFO:Defining folds
2024-03-05 23:43:29,821:INFO:Declaring metric variables
2024-03-05 23:43:29,821:INFO:Importing untrained model
2024-03-05 23:43:29,821:INFO:Declaring custom model
2024-03-05 23:43:29,821:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:43:29,821:INFO:Cross validation set to False
2024-03-05 23:43:29,821:INFO:Fitting Model
2024-03-05 23:43:43,926:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2081350940))])
2024-03-05 23:43:43,926:INFO:create_model() successfully completed......................................
2024-03-05 23:43:44,059:INFO:_master_model_container: 20
2024-03-05 23:43:44,059:INFO:_display_container: 4
2024-03-05 23:43:44,059:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2081350940))])
2024-03-05 23:43:44,059:INFO:finalize_model() successfully completed......................................
2024-03-05 23:43:44,210:INFO:Initializing predict_model()
2024-03-05 23:43:44,210:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2081350940))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC0BD80>)
2024-03-05 23:43:44,210:INFO:Checking exceptions
2024-03-05 23:43:44,210:INFO:Preloading libraries
2024-03-05 23:43:44,210:INFO:Set up data.
2024-03-05 23:43:44,272:INFO:Set up index.
2024-03-05 23:43:44,645:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:43:44,696:INFO:Initializing finalize_model()
2024-03-05 23:43:44,696:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=396824183), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:43:44,696:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=396824183)
2024-03-05 23:43:44,860:INFO:Initializing create_model()
2024-03-05 23:43:44,860:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=396824183), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:43:44,860:INFO:Checking exceptions
2024-03-05 23:43:44,860:INFO:Importing libraries
2024-03-05 23:43:44,860:INFO:Copying training dataset
2024-03-05 23:43:44,891:INFO:Defining folds
2024-03-05 23:43:44,891:INFO:Declaring metric variables
2024-03-05 23:43:44,891:INFO:Importing untrained model
2024-03-05 23:43:44,891:INFO:Declaring custom model
2024-03-05 23:43:44,891:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:43:44,891:INFO:Cross validation set to False
2024-03-05 23:43:44,891:INFO:Fitting Model
2024-03-05 23:43:59,134:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=396824183))])
2024-03-05 23:43:59,134:INFO:create_model() successfully completed......................................
2024-03-05 23:43:59,265:INFO:_master_model_container: 20
2024-03-05 23:43:59,265:INFO:_display_container: 4
2024-03-05 23:43:59,282:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=396824183))])
2024-03-05 23:43:59,282:INFO:finalize_model() successfully completed......................................
2024-03-05 23:43:59,424:INFO:Initializing predict_model()
2024-03-05 23:43:59,424:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=396824183))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:43:59,424:INFO:Checking exceptions
2024-03-05 23:43:59,424:INFO:Preloading libraries
2024-03-05 23:43:59,426:INFO:Set up data.
2024-03-05 23:43:59,482:INFO:Set up index.
2024-03-05 23:43:59,840:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:43:59,872:INFO:Initializing finalize_model()
2024-03-05 23:43:59,872:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=900074242), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:43:59,872:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=900074242)
2024-03-05 23:44:00,066:INFO:Initializing create_model()
2024-03-05 23:44:00,066:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=900074242), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:44:00,066:INFO:Checking exceptions
2024-03-05 23:44:00,247:INFO:Importing libraries
2024-03-05 23:44:00,247:INFO:Copying training dataset
2024-03-05 23:44:00,293:INFO:Defining folds
2024-03-05 23:44:00,293:INFO:Declaring metric variables
2024-03-05 23:44:00,293:INFO:Importing untrained model
2024-03-05 23:44:00,293:INFO:Declaring custom model
2024-03-05 23:44:00,293:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:44:00,293:INFO:Cross validation set to False
2024-03-05 23:44:00,293:INFO:Fitting Model
2024-03-05 23:44:14,222:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=900074242))])
2024-03-05 23:44:14,222:INFO:create_model() successfully completed......................................
2024-03-05 23:44:14,339:INFO:_master_model_container: 20
2024-03-05 23:44:14,339:INFO:_display_container: 4
2024-03-05 23:44:14,355:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=900074242))])
2024-03-05 23:44:14,355:INFO:finalize_model() successfully completed......................................
2024-03-05 23:44:14,488:INFO:Initializing predict_model()
2024-03-05 23:44:14,488:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=900074242))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:44:14,488:INFO:Checking exceptions
2024-03-05 23:44:14,488:INFO:Preloading libraries
2024-03-05 23:44:14,488:INFO:Set up data.
2024-03-05 23:44:14,559:INFO:Set up index.
2024-03-05 23:44:14,922:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:44:14,954:INFO:Initializing finalize_model()
2024-03-05 23:44:14,954:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=542979730), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:44:14,954:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=542979730)
2024-03-05 23:44:15,137:INFO:Initializing create_model()
2024-03-05 23:44:15,137:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=542979730), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:44:15,137:INFO:Checking exceptions
2024-03-05 23:44:15,153:INFO:Importing libraries
2024-03-05 23:44:15,153:INFO:Copying training dataset
2024-03-05 23:44:15,186:INFO:Defining folds
2024-03-05 23:44:15,186:INFO:Declaring metric variables
2024-03-05 23:44:15,186:INFO:Importing untrained model
2024-03-05 23:44:15,186:INFO:Declaring custom model
2024-03-05 23:44:15,186:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:44:15,186:INFO:Cross validation set to False
2024-03-05 23:44:15,186:INFO:Fitting Model
2024-03-05 23:44:29,113:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=542979730))])
2024-03-05 23:44:29,113:INFO:create_model() successfully completed......................................
2024-03-05 23:44:29,244:INFO:_master_model_container: 20
2024-03-05 23:44:29,244:INFO:_display_container: 4
2024-03-05 23:44:29,244:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=542979730))])
2024-03-05 23:44:29,244:INFO:finalize_model() successfully completed......................................
2024-03-05 23:44:29,393:INFO:Initializing predict_model()
2024-03-05 23:44:29,393:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=542979730))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:44:29,393:INFO:Checking exceptions
2024-03-05 23:44:29,393:INFO:Preloading libraries
2024-03-05 23:44:29,393:INFO:Set up data.
2024-03-05 23:44:29,449:INFO:Set up index.
2024-03-05 23:44:29,811:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:44:29,846:INFO:Initializing finalize_model()
2024-03-05 23:44:29,846:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=320454482), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:44:29,846:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=320454482)
2024-03-05 23:44:30,010:INFO:Initializing create_model()
2024-03-05 23:44:30,010:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=320454482), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:44:30,010:INFO:Checking exceptions
2024-03-05 23:44:30,010:INFO:Importing libraries
2024-03-05 23:44:30,010:INFO:Copying training dataset
2024-03-05 23:44:30,042:INFO:Defining folds
2024-03-05 23:44:30,042:INFO:Declaring metric variables
2024-03-05 23:44:30,042:INFO:Importing untrained model
2024-03-05 23:44:30,042:INFO:Declaring custom model
2024-03-05 23:44:30,042:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:44:30,042:INFO:Cross validation set to False
2024-03-05 23:44:30,042:INFO:Fitting Model
2024-03-05 23:44:43,966:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=320454482))])
2024-03-05 23:44:43,966:INFO:create_model() successfully completed......................................
2024-03-05 23:44:44,102:INFO:_master_model_container: 20
2024-03-05 23:44:44,102:INFO:_display_container: 4
2024-03-05 23:44:44,102:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=320454482))])
2024-03-05 23:44:44,115:INFO:finalize_model() successfully completed......................................
2024-03-05 23:44:44,249:INFO:Initializing predict_model()
2024-03-05 23:44:44,249:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=320454482))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:44:44,249:INFO:Checking exceptions
2024-03-05 23:44:44,249:INFO:Preloading libraries
2024-03-05 23:44:44,249:INFO:Set up data.
2024-03-05 23:44:44,317:INFO:Set up index.
2024-03-05 23:44:44,682:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:44:44,699:INFO:Initializing finalize_model()
2024-03-05 23:44:44,699:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1312343574), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:44:44,699:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1312343574)
2024-03-05 23:44:44,884:INFO:Initializing create_model()
2024-03-05 23:44:44,884:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1312343574), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:44:44,884:INFO:Checking exceptions
2024-03-05 23:44:44,884:INFO:Importing libraries
2024-03-05 23:44:44,884:INFO:Copying training dataset
2024-03-05 23:44:44,916:INFO:Defining folds
2024-03-05 23:44:44,916:INFO:Declaring metric variables
2024-03-05 23:44:44,916:INFO:Importing untrained model
2024-03-05 23:44:44,916:INFO:Declaring custom model
2024-03-05 23:44:44,916:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:44:44,916:INFO:Cross validation set to False
2024-03-05 23:44:44,916:INFO:Fitting Model
2024-03-05 23:44:58,857:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1312343574))])
2024-03-05 23:44:58,857:INFO:create_model() successfully completed......................................
2024-03-05 23:44:59,004:INFO:_master_model_container: 20
2024-03-05 23:44:59,004:INFO:_display_container: 4
2024-03-05 23:44:59,004:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1312343574))])
2024-03-05 23:44:59,004:INFO:finalize_model() successfully completed......................................
2024-03-05 23:44:59,141:INFO:Initializing predict_model()
2024-03-05 23:44:59,141:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1312343574))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:44:59,141:INFO:Checking exceptions
2024-03-05 23:44:59,141:INFO:Preloading libraries
2024-03-05 23:44:59,141:INFO:Set up data.
2024-03-05 23:44:59,202:INFO:Set up index.
2024-03-05 23:44:59,573:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:44:59,605:INFO:Initializing finalize_model()
2024-03-05 23:44:59,605:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1074767884), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:44:59,605:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1074767884)
2024-03-05 23:44:59,774:INFO:Initializing create_model()
2024-03-05 23:44:59,774:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1074767884), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:44:59,774:INFO:Checking exceptions
2024-03-05 23:44:59,774:INFO:Importing libraries
2024-03-05 23:44:59,774:INFO:Copying training dataset
2024-03-05 23:44:59,821:INFO:Defining folds
2024-03-05 23:44:59,821:INFO:Declaring metric variables
2024-03-05 23:44:59,821:INFO:Importing untrained model
2024-03-05 23:44:59,821:INFO:Declaring custom model
2024-03-05 23:44:59,821:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:44:59,821:INFO:Cross validation set to False
2024-03-05 23:44:59,821:INFO:Fitting Model
2024-03-05 23:45:14,044:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1074767884))])
2024-03-05 23:45:14,044:INFO:create_model() successfully completed......................................
2024-03-05 23:45:14,177:INFO:_master_model_container: 20
2024-03-05 23:45:14,177:INFO:_display_container: 4
2024-03-05 23:45:14,177:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1074767884))])
2024-03-05 23:45:14,177:INFO:finalize_model() successfully completed......................................
2024-03-05 23:45:14,327:INFO:Initializing predict_model()
2024-03-05 23:45:14,327:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1074767884))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:45:14,327:INFO:Checking exceptions
2024-03-05 23:45:14,327:INFO:Preloading libraries
2024-03-05 23:45:14,327:INFO:Set up data.
2024-03-05 23:45:14,397:INFO:Set up index.
2024-03-05 23:45:14,762:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:45:14,794:INFO:Initializing finalize_model()
2024-03-05 23:45:14,794:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=743424086), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:45:14,794:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=743424086)
2024-03-05 23:45:14,962:INFO:Initializing create_model()
2024-03-05 23:45:14,962:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=743424086), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:45:14,962:INFO:Checking exceptions
2024-03-05 23:45:14,962:INFO:Importing libraries
2024-03-05 23:45:14,962:INFO:Copying training dataset
2024-03-05 23:45:15,010:INFO:Defining folds
2024-03-05 23:45:15,010:INFO:Declaring metric variables
2024-03-05 23:45:15,010:INFO:Importing untrained model
2024-03-05 23:45:15,010:INFO:Declaring custom model
2024-03-05 23:45:15,010:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:45:15,010:INFO:Cross validation set to False
2024-03-05 23:45:15,010:INFO:Fitting Model
2024-03-05 23:45:29,019:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=743424086))])
2024-03-05 23:45:29,019:INFO:create_model() successfully completed......................................
2024-03-05 23:45:29,150:INFO:_master_model_container: 20
2024-03-05 23:45:29,150:INFO:_display_container: 4
2024-03-05 23:45:29,166:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=743424086))])
2024-03-05 23:45:29,166:INFO:finalize_model() successfully completed......................................
2024-03-05 23:45:29,303:INFO:Initializing predict_model()
2024-03-05 23:45:29,303:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=743424086))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:45:29,303:INFO:Checking exceptions
2024-03-05 23:45:29,303:INFO:Preloading libraries
2024-03-05 23:45:29,303:INFO:Set up data.
2024-03-05 23:45:29,360:INFO:Set up index.
2024-03-05 23:45:29,733:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:45:29,764:INFO:Initializing finalize_model()
2024-03-05 23:45:29,764:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1487350537), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:45:29,764:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1487350537)
2024-03-05 23:45:29,951:INFO:Initializing create_model()
2024-03-05 23:45:29,951:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1487350537), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:45:29,951:INFO:Checking exceptions
2024-03-05 23:45:29,951:INFO:Importing libraries
2024-03-05 23:45:29,951:INFO:Copying training dataset
2024-03-05 23:45:30,001:INFO:Defining folds
2024-03-05 23:45:30,001:INFO:Declaring metric variables
2024-03-05 23:45:30,001:INFO:Importing untrained model
2024-03-05 23:45:30,001:INFO:Declaring custom model
2024-03-05 23:45:30,001:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:45:30,002:INFO:Cross validation set to False
2024-03-05 23:45:30,002:INFO:Fitting Model
2024-03-05 23:45:44,076:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1487350537))])
2024-03-05 23:45:44,076:INFO:create_model() successfully completed......................................
2024-03-05 23:45:44,207:INFO:_master_model_container: 20
2024-03-05 23:45:44,207:INFO:_display_container: 4
2024-03-05 23:45:44,207:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1487350537))])
2024-03-05 23:45:44,207:INFO:finalize_model() successfully completed......................................
2024-03-05 23:45:44,355:INFO:Initializing predict_model()
2024-03-05 23:45:44,355:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1487350537))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:45:44,355:INFO:Checking exceptions
2024-03-05 23:45:44,355:INFO:Preloading libraries
2024-03-05 23:45:44,355:INFO:Set up data.
2024-03-05 23:45:44,426:INFO:Set up index.
2024-03-05 23:45:44,789:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:45:44,821:INFO:Initializing finalize_model()
2024-03-05 23:45:44,821:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1455346164), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:45:44,821:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1455346164)
2024-03-05 23:45:44,991:INFO:Initializing create_model()
2024-03-05 23:45:44,991:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1455346164), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:45:44,991:INFO:Checking exceptions
2024-03-05 23:45:44,991:INFO:Importing libraries
2024-03-05 23:45:44,991:INFO:Copying training dataset
2024-03-05 23:45:45,039:INFO:Defining folds
2024-03-05 23:45:45,039:INFO:Declaring metric variables
2024-03-05 23:45:45,039:INFO:Importing untrained model
2024-03-05 23:45:45,039:INFO:Declaring custom model
2024-03-05 23:45:45,039:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:45:45,039:INFO:Cross validation set to False
2024-03-05 23:45:45,039:INFO:Fitting Model
2024-03-05 23:45:59,160:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1455346164))])
2024-03-05 23:45:59,160:INFO:create_model() successfully completed......................................
2024-03-05 23:45:59,278:INFO:_master_model_container: 20
2024-03-05 23:45:59,278:INFO:_display_container: 4
2024-03-05 23:45:59,294:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1455346164))])
2024-03-05 23:45:59,294:INFO:finalize_model() successfully completed......................................
2024-03-05 23:45:59,428:INFO:Initializing predict_model()
2024-03-05 23:45:59,428:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1455346164))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:45:59,428:INFO:Checking exceptions
2024-03-05 23:45:59,428:INFO:Preloading libraries
2024-03-05 23:45:59,428:INFO:Set up data.
2024-03-05 23:45:59,489:INFO:Set up index.
2024-03-05 23:45:59,848:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:45:59,879:INFO:Initializing finalize_model()
2024-03-05 23:45:59,879:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=490894283), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:45:59,879:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=490894283)
2024-03-05 23:46:00,079:INFO:Initializing create_model()
2024-03-05 23:46:00,079:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=490894283), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:46:00,079:INFO:Checking exceptions
2024-03-05 23:46:00,079:INFO:Importing libraries
2024-03-05 23:46:00,079:INFO:Copying training dataset
2024-03-05 23:46:00,112:INFO:Defining folds
2024-03-05 23:46:00,128:INFO:Declaring metric variables
2024-03-05 23:46:00,128:INFO:Importing untrained model
2024-03-05 23:46:00,128:INFO:Declaring custom model
2024-03-05 23:46:00,129:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:46:00,129:INFO:Cross validation set to False
2024-03-05 23:46:00,129:INFO:Fitting Model
2024-03-05 23:46:14,303:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=490894283))])
2024-03-05 23:46:14,303:INFO:create_model() successfully completed......................................
2024-03-05 23:46:14,434:INFO:_master_model_container: 20
2024-03-05 23:46:14,434:INFO:_display_container: 4
2024-03-05 23:46:14,434:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=490894283))])
2024-03-05 23:46:14,434:INFO:finalize_model() successfully completed......................................
2024-03-05 23:46:14,584:INFO:Initializing predict_model()
2024-03-05 23:46:14,584:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=490894283))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC0BD80>)
2024-03-05 23:46:14,584:INFO:Checking exceptions
2024-03-05 23:46:14,584:INFO:Preloading libraries
2024-03-05 23:46:14,584:INFO:Set up data.
2024-03-05 23:46:14,653:INFO:Set up index.
2024-03-05 23:46:15,019:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:46:15,051:INFO:Initializing finalize_model()
2024-03-05 23:46:15,051:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=569818961), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:46:15,051:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=569818961)
2024-03-05 23:46:15,219:INFO:Initializing create_model()
2024-03-05 23:46:15,219:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=569818961), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:46:15,219:INFO:Checking exceptions
2024-03-05 23:46:15,219:INFO:Importing libraries
2024-03-05 23:46:15,219:INFO:Copying training dataset
2024-03-05 23:46:15,251:INFO:Defining folds
2024-03-05 23:46:15,251:INFO:Declaring metric variables
2024-03-05 23:46:15,251:INFO:Importing untrained model
2024-03-05 23:46:15,251:INFO:Declaring custom model
2024-03-05 23:46:15,251:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:46:15,251:INFO:Cross validation set to False
2024-03-05 23:46:15,251:INFO:Fitting Model
2024-03-05 23:46:29,438:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=569818961))])
2024-03-05 23:46:29,438:INFO:create_model() successfully completed......................................
2024-03-05 23:46:29,571:INFO:_master_model_container: 20
2024-03-05 23:46:29,571:INFO:_display_container: 4
2024-03-05 23:46:29,571:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=569818961))])
2024-03-05 23:46:29,571:INFO:finalize_model() successfully completed......................................
2024-03-05 23:46:29,725:INFO:Initializing predict_model()
2024-03-05 23:46:29,725:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=569818961))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:46:29,725:INFO:Checking exceptions
2024-03-05 23:46:29,725:INFO:Preloading libraries
2024-03-05 23:46:29,725:INFO:Set up data.
2024-03-05 23:46:29,784:INFO:Set up index.
2024-03-05 23:46:30,125:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:46:30,156:INFO:Initializing finalize_model()
2024-03-05 23:46:30,156:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=594400428), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:46:30,156:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=594400428)
2024-03-05 23:46:30,326:INFO:Initializing create_model()
2024-03-05 23:46:30,326:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=594400428), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:46:30,326:INFO:Checking exceptions
2024-03-05 23:46:30,326:INFO:Importing libraries
2024-03-05 23:46:30,326:INFO:Copying training dataset
2024-03-05 23:46:30,358:INFO:Defining folds
2024-03-05 23:46:30,358:INFO:Declaring metric variables
2024-03-05 23:46:30,358:INFO:Importing untrained model
2024-03-05 23:46:30,358:INFO:Declaring custom model
2024-03-05 23:46:30,358:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:46:30,358:INFO:Cross validation set to False
2024-03-05 23:46:30,358:INFO:Fitting Model
2024-03-05 23:46:44,262:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=594400428))])
2024-03-05 23:46:44,262:INFO:create_model() successfully completed......................................
2024-03-05 23:46:44,405:INFO:_master_model_container: 20
2024-03-05 23:46:44,405:INFO:_display_container: 4
2024-03-05 23:46:44,409:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=594400428))])
2024-03-05 23:46:44,409:INFO:finalize_model() successfully completed......................................
2024-03-05 23:46:44,545:INFO:Initializing predict_model()
2024-03-05 23:46:44,545:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=594400428))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:46:44,545:INFO:Checking exceptions
2024-03-05 23:46:44,545:INFO:Preloading libraries
2024-03-05 23:46:44,545:INFO:Set up data.
2024-03-05 23:46:44,603:INFO:Set up index.
2024-03-05 23:46:44,963:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:46:44,996:INFO:Initializing finalize_model()
2024-03-05 23:46:44,996:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=735623427), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:46:44,996:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=735623427)
2024-03-05 23:46:45,148:INFO:Initializing create_model()
2024-03-05 23:46:45,148:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=735623427), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:46:45,148:INFO:Checking exceptions
2024-03-05 23:46:45,148:INFO:Importing libraries
2024-03-05 23:46:45,148:INFO:Copying training dataset
2024-03-05 23:46:45,179:INFO:Defining folds
2024-03-05 23:46:45,179:INFO:Declaring metric variables
2024-03-05 23:46:45,179:INFO:Importing untrained model
2024-03-05 23:46:45,179:INFO:Declaring custom model
2024-03-05 23:46:45,179:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:46:45,179:INFO:Cross validation set to False
2024-03-05 23:46:45,179:INFO:Fitting Model
2024-03-05 23:46:59,168:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=735623427))])
2024-03-05 23:46:59,168:INFO:create_model() successfully completed......................................
2024-03-05 23:46:59,317:INFO:_master_model_container: 20
2024-03-05 23:46:59,317:INFO:_display_container: 4
2024-03-05 23:46:59,317:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=735623427))])
2024-03-05 23:46:59,317:INFO:finalize_model() successfully completed......................................
2024-03-05 23:46:59,484:INFO:Initializing predict_model()
2024-03-05 23:46:59,484:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=735623427))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:46:59,484:INFO:Checking exceptions
2024-03-05 23:46:59,484:INFO:Preloading libraries
2024-03-05 23:46:59,484:INFO:Set up data.
2024-03-05 23:46:59,549:INFO:Set up index.
2024-03-05 23:46:59,920:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:46:59,952:INFO:Initializing finalize_model()
2024-03-05 23:46:59,952:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=527275150), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:46:59,952:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=527275150)
2024-03-05 23:47:00,158:INFO:Initializing create_model()
2024-03-05 23:47:00,158:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=527275150), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:47:00,158:INFO:Checking exceptions
2024-03-05 23:47:00,158:INFO:Importing libraries
2024-03-05 23:47:00,158:INFO:Copying training dataset
2024-03-05 23:47:00,187:INFO:Defining folds
2024-03-05 23:47:00,187:INFO:Declaring metric variables
2024-03-05 23:47:00,187:INFO:Importing untrained model
2024-03-05 23:47:00,187:INFO:Declaring custom model
2024-03-05 23:47:00,187:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:47:00,187:INFO:Cross validation set to False
2024-03-05 23:47:00,187:INFO:Fitting Model
2024-03-05 23:47:14,190:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=527275150))])
2024-03-05 23:47:14,190:INFO:create_model() successfully completed......................................
2024-03-05 23:47:14,322:INFO:_master_model_container: 20
2024-03-05 23:47:14,322:INFO:_display_container: 4
2024-03-05 23:47:14,322:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=527275150))])
2024-03-05 23:47:14,322:INFO:finalize_model() successfully completed......................................
2024-03-05 23:47:14,474:INFO:Initializing predict_model()
2024-03-05 23:47:14,474:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=527275150))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:47:14,474:INFO:Checking exceptions
2024-03-05 23:47:14,474:INFO:Preloading libraries
2024-03-05 23:47:14,474:INFO:Set up data.
2024-03-05 23:47:14,533:INFO:Set up index.
2024-03-05 23:47:14,876:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:47:14,907:INFO:Initializing finalize_model()
2024-03-05 23:47:14,907:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=402029478), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:47:14,907:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=402029478)
2024-03-05 23:47:15,092:INFO:Initializing create_model()
2024-03-05 23:47:15,092:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=402029478), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:47:15,093:INFO:Checking exceptions
2024-03-05 23:47:15,093:INFO:Importing libraries
2024-03-05 23:47:15,093:INFO:Copying training dataset
2024-03-05 23:47:15,108:INFO:Defining folds
2024-03-05 23:47:15,124:INFO:Declaring metric variables
2024-03-05 23:47:15,124:INFO:Importing untrained model
2024-03-05 23:47:15,124:INFO:Declaring custom model
2024-03-05 23:47:15,125:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:47:15,125:INFO:Cross validation set to False
2024-03-05 23:47:15,125:INFO:Fitting Model
2024-03-05 23:47:29,029:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=402029478))])
2024-03-05 23:47:29,029:INFO:create_model() successfully completed......................................
2024-03-05 23:47:29,162:INFO:_master_model_container: 20
2024-03-05 23:47:29,162:INFO:_display_container: 4
2024-03-05 23:47:29,179:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=402029478))])
2024-03-05 23:47:29,179:INFO:finalize_model() successfully completed......................................
2024-03-05 23:47:29,312:INFO:Initializing predict_model()
2024-03-05 23:47:29,312:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=402029478))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:47:29,312:INFO:Checking exceptions
2024-03-05 23:47:29,312:INFO:Preloading libraries
2024-03-05 23:47:29,312:INFO:Set up data.
2024-03-05 23:47:29,372:INFO:Set up index.
2024-03-05 23:47:29,730:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:47:29,746:INFO:Initializing finalize_model()
2024-03-05 23:47:29,746:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=953674859), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:47:29,746:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=953674859)
2024-03-05 23:47:29,915:INFO:Initializing create_model()
2024-03-05 23:47:29,915:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=953674859), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:47:29,915:INFO:Checking exceptions
2024-03-05 23:47:29,915:INFO:Importing libraries
2024-03-05 23:47:29,915:INFO:Copying training dataset
2024-03-05 23:47:29,947:INFO:Defining folds
2024-03-05 23:47:29,947:INFO:Declaring metric variables
2024-03-05 23:47:29,947:INFO:Importing untrained model
2024-03-05 23:47:29,947:INFO:Declaring custom model
2024-03-05 23:47:29,947:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:47:29,947:INFO:Cross validation set to False
2024-03-05 23:47:29,947:INFO:Fitting Model
2024-03-05 23:47:43,818:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=953674859))])
2024-03-05 23:47:43,818:INFO:create_model() successfully completed......................................
2024-03-05 23:47:43,951:INFO:_master_model_container: 20
2024-03-05 23:47:43,951:INFO:_display_container: 4
2024-03-05 23:47:43,951:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=953674859))])
2024-03-05 23:47:43,951:INFO:finalize_model() successfully completed......................................
2024-03-05 23:47:44,101:INFO:Initializing predict_model()
2024-03-05 23:47:44,101:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=953674859))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:47:44,101:INFO:Checking exceptions
2024-03-05 23:47:44,101:INFO:Preloading libraries
2024-03-05 23:47:44,101:INFO:Set up data.
2024-03-05 23:47:44,163:INFO:Set up index.
2024-03-05 23:47:44,503:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:47:44,535:INFO:Initializing finalize_model()
2024-03-05 23:47:44,535:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=366586216), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:47:44,535:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=366586216)
2024-03-05 23:47:44,701:INFO:Initializing create_model()
2024-03-05 23:47:44,701:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=366586216), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:47:44,701:INFO:Checking exceptions
2024-03-05 23:47:44,704:INFO:Importing libraries
2024-03-05 23:47:44,704:INFO:Copying training dataset
2024-03-05 23:47:44,720:INFO:Defining folds
2024-03-05 23:47:44,720:INFO:Declaring metric variables
2024-03-05 23:47:44,720:INFO:Importing untrained model
2024-03-05 23:47:44,720:INFO:Declaring custom model
2024-03-05 23:47:44,736:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:47:44,736:INFO:Cross validation set to False
2024-03-05 23:47:44,736:INFO:Fitting Model
2024-03-05 23:47:58,711:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=366586216))])
2024-03-05 23:47:58,711:INFO:create_model() successfully completed......................................
2024-03-05 23:47:58,842:INFO:_master_model_container: 20
2024-03-05 23:47:58,842:INFO:_display_container: 4
2024-03-05 23:47:58,842:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=366586216))])
2024-03-05 23:47:58,842:INFO:finalize_model() successfully completed......................................
2024-03-05 23:47:58,993:INFO:Initializing predict_model()
2024-03-05 23:47:58,993:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=366586216))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:47:58,993:INFO:Checking exceptions
2024-03-05 23:47:58,993:INFO:Preloading libraries
2024-03-05 23:47:58,993:INFO:Set up data.
2024-03-05 23:47:59,045:INFO:Set up index.
2024-03-05 23:47:59,425:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:47:59,457:INFO:Initializing finalize_model()
2024-03-05 23:47:59,457:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1293146163), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:47:59,457:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1293146163)
2024-03-05 23:47:59,624:INFO:Initializing create_model()
2024-03-05 23:47:59,624:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1293146163), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:47:59,624:INFO:Checking exceptions
2024-03-05 23:47:59,624:INFO:Importing libraries
2024-03-05 23:47:59,624:INFO:Copying training dataset
2024-03-05 23:47:59,640:INFO:Defining folds
2024-03-05 23:47:59,640:INFO:Declaring metric variables
2024-03-05 23:47:59,640:INFO:Importing untrained model
2024-03-05 23:47:59,640:INFO:Declaring custom model
2024-03-05 23:47:59,656:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:47:59,656:INFO:Cross validation set to False
2024-03-05 23:47:59,656:INFO:Fitting Model
2024-03-05 23:48:13,595:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1293146163))])
2024-03-05 23:48:13,595:INFO:create_model() successfully completed......................................
2024-03-05 23:48:13,746:INFO:_master_model_container: 20
2024-03-05 23:48:13,746:INFO:_display_container: 4
2024-03-05 23:48:13,746:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1293146163))])
2024-03-05 23:48:13,746:INFO:finalize_model() successfully completed......................................
2024-03-05 23:48:13,880:INFO:Initializing predict_model()
2024-03-05 23:48:13,880:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1293146163))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC0BD80>)
2024-03-05 23:48:13,880:INFO:Checking exceptions
2024-03-05 23:48:13,880:INFO:Preloading libraries
2024-03-05 23:48:13,896:INFO:Set up data.
2024-03-05 23:48:13,948:INFO:Set up index.
2024-03-05 23:48:14,297:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:48:14,314:INFO:Initializing finalize_model()
2024-03-05 23:48:14,314:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=19992231), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:48:14,314:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=19992231)
2024-03-05 23:48:14,482:INFO:Initializing create_model()
2024-03-05 23:48:14,482:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=19992231), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:48:14,482:INFO:Checking exceptions
2024-03-05 23:48:14,482:INFO:Importing libraries
2024-03-05 23:48:14,482:INFO:Copying training dataset
2024-03-05 23:48:14,515:INFO:Defining folds
2024-03-05 23:48:14,515:INFO:Declaring metric variables
2024-03-05 23:48:14,515:INFO:Importing untrained model
2024-03-05 23:48:14,515:INFO:Declaring custom model
2024-03-05 23:48:14,515:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:48:14,515:INFO:Cross validation set to False
2024-03-05 23:48:14,515:INFO:Fitting Model
2024-03-05 23:48:28,434:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=19992231))])
2024-03-05 23:48:28,434:INFO:create_model() successfully completed......................................
2024-03-05 23:48:28,568:INFO:_master_model_container: 20
2024-03-05 23:48:28,568:INFO:_display_container: 4
2024-03-05 23:48:28,585:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=19992231))])
2024-03-05 23:48:28,585:INFO:finalize_model() successfully completed......................................
2024-03-05 23:48:28,718:INFO:Initializing predict_model()
2024-03-05 23:48:28,718:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=19992231))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:48:28,718:INFO:Checking exceptions
2024-03-05 23:48:28,718:INFO:Preloading libraries
2024-03-05 23:48:28,718:INFO:Set up data.
2024-03-05 23:48:28,778:INFO:Set up index.
2024-03-05 23:48:29,122:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:48:29,153:INFO:Initializing finalize_model()
2024-03-05 23:48:29,153:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2104208193), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:48:29,153:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2104208193)
2024-03-05 23:48:29,322:INFO:Initializing create_model()
2024-03-05 23:48:29,322:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2104208193), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:48:29,322:INFO:Checking exceptions
2024-03-05 23:48:29,322:INFO:Importing libraries
2024-03-05 23:48:29,322:INFO:Copying training dataset
2024-03-05 23:48:29,354:INFO:Defining folds
2024-03-05 23:48:29,354:INFO:Declaring metric variables
2024-03-05 23:48:29,354:INFO:Importing untrained model
2024-03-05 23:48:29,354:INFO:Declaring custom model
2024-03-05 23:48:29,354:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:48:29,354:INFO:Cross validation set to False
2024-03-05 23:48:29,354:INFO:Fitting Model
2024-03-05 23:48:43,223:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2104208193))])
2024-03-05 23:48:43,223:INFO:create_model() successfully completed......................................
2024-03-05 23:48:43,360:INFO:_master_model_container: 20
2024-03-05 23:48:43,360:INFO:_display_container: 4
2024-03-05 23:48:43,375:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2104208193))])
2024-03-05 23:48:43,375:INFO:finalize_model() successfully completed......................................
2024-03-05 23:48:43,507:INFO:Initializing predict_model()
2024-03-05 23:48:43,507:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2104208193))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:48:43,507:INFO:Checking exceptions
2024-03-05 23:48:43,507:INFO:Preloading libraries
2024-03-05 23:48:43,507:INFO:Set up data.
2024-03-05 23:48:43,568:INFO:Set up index.
2024-03-05 23:48:43,909:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:48:43,940:INFO:Initializing finalize_model()
2024-03-05 23:48:43,940:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1537329120), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:48:43,940:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1537329120)
2024-03-05 23:48:44,110:INFO:Initializing create_model()
2024-03-05 23:48:44,110:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1537329120), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:48:44,110:INFO:Checking exceptions
2024-03-05 23:48:44,110:INFO:Importing libraries
2024-03-05 23:48:44,110:INFO:Copying training dataset
2024-03-05 23:48:44,142:INFO:Defining folds
2024-03-05 23:48:44,142:INFO:Declaring metric variables
2024-03-05 23:48:44,142:INFO:Importing untrained model
2024-03-05 23:48:44,142:INFO:Declaring custom model
2024-03-05 23:48:44,142:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:48:44,142:INFO:Cross validation set to False
2024-03-05 23:48:44,142:INFO:Fitting Model
2024-03-05 23:48:58,066:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1537329120))])
2024-03-05 23:48:58,066:INFO:create_model() successfully completed......................................
2024-03-05 23:48:58,198:INFO:_master_model_container: 20
2024-03-05 23:48:58,198:INFO:_display_container: 4
2024-03-05 23:48:58,198:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1537329120))])
2024-03-05 23:48:58,198:INFO:finalize_model() successfully completed......................................
2024-03-05 23:48:58,346:INFO:Initializing predict_model()
2024-03-05 23:48:58,346:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1537329120))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:48:58,346:INFO:Checking exceptions
2024-03-05 23:48:58,346:INFO:Preloading libraries
2024-03-05 23:48:58,346:INFO:Set up data.
2024-03-05 23:48:58,410:INFO:Set up index.
2024-03-05 23:48:58,748:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:48:58,780:INFO:Initializing finalize_model()
2024-03-05 23:48:58,780:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=398953125), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:48:58,780:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=398953125)
2024-03-05 23:48:58,948:INFO:Initializing create_model()
2024-03-05 23:48:58,948:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=398953125), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:48:58,948:INFO:Checking exceptions
2024-03-05 23:48:58,948:INFO:Importing libraries
2024-03-05 23:48:58,948:INFO:Copying training dataset
2024-03-05 23:48:58,980:INFO:Defining folds
2024-03-05 23:48:58,980:INFO:Declaring metric variables
2024-03-05 23:48:58,980:INFO:Importing untrained model
2024-03-05 23:48:58,980:INFO:Declaring custom model
2024-03-05 23:48:58,980:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:48:58,980:INFO:Cross validation set to False
2024-03-05 23:48:58,980:INFO:Fitting Model
2024-03-05 23:49:12,885:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=398953125))])
2024-03-05 23:49:12,885:INFO:create_model() successfully completed......................................
2024-03-05 23:49:13,021:INFO:_master_model_container: 20
2024-03-05 23:49:13,021:INFO:_display_container: 4
2024-03-05 23:49:13,035:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=398953125))])
2024-03-05 23:49:13,035:INFO:finalize_model() successfully completed......................................
2024-03-05 23:49:13,168:INFO:Initializing predict_model()
2024-03-05 23:49:13,168:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=398953125))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:49:13,168:INFO:Checking exceptions
2024-03-05 23:49:13,168:INFO:Preloading libraries
2024-03-05 23:49:13,168:INFO:Set up data.
2024-03-05 23:49:13,231:INFO:Set up index.
2024-03-05 23:49:13,571:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:49:13,602:INFO:Initializing finalize_model()
2024-03-05 23:49:13,602:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=972041060), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:49:13,602:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=972041060)
2024-03-05 23:49:13,771:INFO:Initializing create_model()
2024-03-05 23:49:13,771:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=972041060), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:49:13,771:INFO:Checking exceptions
2024-03-05 23:49:13,771:INFO:Importing libraries
2024-03-05 23:49:13,771:INFO:Copying training dataset
2024-03-05 23:49:13,803:INFO:Defining folds
2024-03-05 23:49:13,803:INFO:Declaring metric variables
2024-03-05 23:49:13,803:INFO:Importing untrained model
2024-03-05 23:49:13,803:INFO:Declaring custom model
2024-03-05 23:49:13,803:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:49:13,803:INFO:Cross validation set to False
2024-03-05 23:49:13,803:INFO:Fitting Model
2024-03-05 23:49:27,682:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=972041060))])
2024-03-05 23:49:27,682:INFO:create_model() successfully completed......................................
2024-03-05 23:49:27,807:INFO:_master_model_container: 20
2024-03-05 23:49:27,807:INFO:_display_container: 4
2024-03-05 23:49:27,807:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=972041060))])
2024-03-05 23:49:27,807:INFO:finalize_model() successfully completed......................................
2024-03-05 23:49:27,958:INFO:Initializing predict_model()
2024-03-05 23:49:27,958:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=972041060))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:49:27,958:INFO:Checking exceptions
2024-03-05 23:49:27,958:INFO:Preloading libraries
2024-03-05 23:49:27,958:INFO:Set up data.
2024-03-05 23:49:28,019:INFO:Set up index.
2024-03-05 23:49:28,360:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:49:28,392:INFO:Initializing finalize_model()
2024-03-05 23:49:28,392:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1063104015), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:49:28,392:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1063104015)
2024-03-05 23:49:28,541:INFO:Initializing create_model()
2024-03-05 23:49:28,541:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1063104015), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:49:28,541:INFO:Checking exceptions
2024-03-05 23:49:28,541:INFO:Importing libraries
2024-03-05 23:49:28,541:INFO:Copying training dataset
2024-03-05 23:49:28,609:INFO:Defining folds
2024-03-05 23:49:28,609:INFO:Declaring metric variables
2024-03-05 23:49:28,609:INFO:Importing untrained model
2024-03-05 23:49:28,609:INFO:Declaring custom model
2024-03-05 23:49:28,609:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:49:28,609:INFO:Cross validation set to False
2024-03-05 23:49:28,609:INFO:Fitting Model
2024-03-05 23:49:42,680:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1063104015))])
2024-03-05 23:49:42,680:INFO:create_model() successfully completed......................................
2024-03-05 23:49:42,813:INFO:_master_model_container: 20
2024-03-05 23:49:42,813:INFO:_display_container: 4
2024-03-05 23:49:42,813:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1063104015))])
2024-03-05 23:49:42,813:INFO:finalize_model() successfully completed......................................
2024-03-05 23:49:42,963:INFO:Initializing predict_model()
2024-03-05 23:49:42,963:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1063104015))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:49:42,963:INFO:Checking exceptions
2024-03-05 23:49:42,963:INFO:Preloading libraries
2024-03-05 23:49:42,963:INFO:Set up data.
2024-03-05 23:49:43,031:INFO:Set up index.
2024-03-05 23:49:43,366:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:49:43,397:INFO:Initializing finalize_model()
2024-03-05 23:49:43,397:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1560872234), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:49:43,397:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1560872234)
2024-03-05 23:49:43,562:INFO:Initializing create_model()
2024-03-05 23:49:43,562:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1560872234), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:49:43,562:INFO:Checking exceptions
2024-03-05 23:49:43,562:INFO:Importing libraries
2024-03-05 23:49:43,562:INFO:Copying training dataset
2024-03-05 23:49:43,599:INFO:Defining folds
2024-03-05 23:49:43,599:INFO:Declaring metric variables
2024-03-05 23:49:43,599:INFO:Importing untrained model
2024-03-05 23:49:43,599:INFO:Declaring custom model
2024-03-05 23:49:43,599:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:49:43,599:INFO:Cross validation set to False
2024-03-05 23:49:43,599:INFO:Fitting Model
2024-03-05 23:49:57,620:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1560872234))])
2024-03-05 23:49:57,620:INFO:create_model() successfully completed......................................
2024-03-05 23:49:57,754:INFO:_master_model_container: 20
2024-03-05 23:49:57,754:INFO:_display_container: 4
2024-03-05 23:49:57,754:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1560872234))])
2024-03-05 23:49:57,754:INFO:finalize_model() successfully completed......................................
2024-03-05 23:49:57,900:INFO:Initializing predict_model()
2024-03-05 23:49:57,900:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1560872234))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:49:57,900:INFO:Checking exceptions
2024-03-05 23:49:57,900:INFO:Preloading libraries
2024-03-05 23:49:57,900:INFO:Set up data.
2024-03-05 23:49:57,962:INFO:Set up index.
2024-03-05 23:49:58,305:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:49:58,336:INFO:Initializing finalize_model()
2024-03-05 23:49:58,336:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2063069753), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:49:58,336:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2063069753)
2024-03-05 23:49:58,486:INFO:Initializing create_model()
2024-03-05 23:49:58,486:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2063069753), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:49:58,486:INFO:Checking exceptions
2024-03-05 23:49:58,503:INFO:Importing libraries
2024-03-05 23:49:58,503:INFO:Copying training dataset
2024-03-05 23:49:58,519:INFO:Defining folds
2024-03-05 23:49:58,519:INFO:Declaring metric variables
2024-03-05 23:49:58,519:INFO:Importing untrained model
2024-03-05 23:49:58,519:INFO:Declaring custom model
2024-03-05 23:49:58,519:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:49:58,535:INFO:Cross validation set to False
2024-03-05 23:49:58,535:INFO:Fitting Model
2024-03-05 23:50:12,878:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2063069753))])
2024-03-05 23:50:12,879:INFO:create_model() successfully completed......................................
2024-03-05 23:50:13,008:INFO:_master_model_container: 20
2024-03-05 23:50:13,008:INFO:_display_container: 4
2024-03-05 23:50:13,008:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2063069753))])
2024-03-05 23:50:13,008:INFO:finalize_model() successfully completed......................................
2024-03-05 23:50:13,141:INFO:Initializing predict_model()
2024-03-05 23:50:13,141:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2063069753))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:50:13,141:INFO:Checking exceptions
2024-03-05 23:50:13,141:INFO:Preloading libraries
2024-03-05 23:50:13,158:INFO:Set up data.
2024-03-05 23:50:13,210:INFO:Set up index.
2024-03-05 23:50:13,560:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:50:13,576:INFO:Initializing finalize_model()
2024-03-05 23:50:13,576:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1580685272), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:50:13,576:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1580685272)
2024-03-05 23:50:13,744:INFO:Initializing create_model()
2024-03-05 23:50:13,744:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1580685272), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:50:13,744:INFO:Checking exceptions
2024-03-05 23:50:13,744:INFO:Importing libraries
2024-03-05 23:50:13,744:INFO:Copying training dataset
2024-03-05 23:50:13,776:INFO:Defining folds
2024-03-05 23:50:13,776:INFO:Declaring metric variables
2024-03-05 23:50:13,776:INFO:Importing untrained model
2024-03-05 23:50:13,776:INFO:Declaring custom model
2024-03-05 23:50:13,776:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:50:13,776:INFO:Cross validation set to False
2024-03-05 23:50:13,776:INFO:Fitting Model
2024-03-05 23:50:27,747:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1580685272))])
2024-03-05 23:50:27,747:INFO:create_model() successfully completed......................................
2024-03-05 23:50:27,880:INFO:_master_model_container: 20
2024-03-05 23:50:27,880:INFO:_display_container: 4
2024-03-05 23:50:27,880:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1580685272))])
2024-03-05 23:50:27,880:INFO:finalize_model() successfully completed......................................
2024-03-05 23:50:28,024:INFO:Initializing predict_model()
2024-03-05 23:50:28,024:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1580685272))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:50:28,024:INFO:Checking exceptions
2024-03-05 23:50:28,024:INFO:Preloading libraries
2024-03-05 23:50:28,026:INFO:Set up data.
2024-03-05 23:50:28,080:INFO:Set up index.
2024-03-05 23:50:28,432:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:50:28,448:INFO:Initializing finalize_model()
2024-03-05 23:50:28,448:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=691031580), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:50:28,464:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=691031580)
2024-03-05 23:50:28,615:INFO:Initializing create_model()
2024-03-05 23:50:28,615:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=691031580), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:50:28,615:INFO:Checking exceptions
2024-03-05 23:50:28,615:INFO:Importing libraries
2024-03-05 23:50:28,615:INFO:Copying training dataset
2024-03-05 23:50:28,679:INFO:Defining folds
2024-03-05 23:50:28,679:INFO:Declaring metric variables
2024-03-05 23:50:28,679:INFO:Importing untrained model
2024-03-05 23:50:28,679:INFO:Declaring custom model
2024-03-05 23:50:28,679:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:50:28,679:INFO:Cross validation set to False
2024-03-05 23:50:28,679:INFO:Fitting Model
2024-03-05 23:50:42,949:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=691031580))])
2024-03-05 23:50:42,949:INFO:create_model() successfully completed......................................
2024-03-05 23:50:43,086:INFO:_master_model_container: 20
2024-03-05 23:50:43,086:INFO:_display_container: 4
2024-03-05 23:50:43,089:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=691031580))])
2024-03-05 23:50:43,089:INFO:finalize_model() successfully completed......................................
2024-03-05 23:50:43,235:INFO:Initializing predict_model()
2024-03-05 23:50:43,235:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=691031580))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC0BD80>)
2024-03-05 23:50:43,235:INFO:Checking exceptions
2024-03-05 23:50:43,235:INFO:Preloading libraries
2024-03-05 23:50:43,235:INFO:Set up data.
2024-03-05 23:50:43,294:INFO:Set up index.
2024-03-05 23:50:43,638:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:50:43,669:INFO:Initializing finalize_model()
2024-03-05 23:50:43,669:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1574810443), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:50:43,669:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1574810443)
2024-03-05 23:50:43,822:INFO:Initializing create_model()
2024-03-05 23:50:43,822:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1574810443), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:50:43,822:INFO:Checking exceptions
2024-03-05 23:50:43,822:INFO:Importing libraries
2024-03-05 23:50:43,822:INFO:Copying training dataset
2024-03-05 23:50:43,853:INFO:Defining folds
2024-03-05 23:50:43,853:INFO:Declaring metric variables
2024-03-05 23:50:43,853:INFO:Importing untrained model
2024-03-05 23:50:43,853:INFO:Declaring custom model
2024-03-05 23:50:43,869:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:50:43,870:INFO:Cross validation set to False
2024-03-05 23:50:43,870:INFO:Fitting Model
2024-03-05 23:50:58,376:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1574810443))])
2024-03-05 23:50:58,376:INFO:create_model() successfully completed......................................
2024-03-05 23:50:58,509:INFO:_master_model_container: 20
2024-03-05 23:50:58,509:INFO:_display_container: 4
2024-03-05 23:50:58,509:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1574810443))])
2024-03-05 23:50:58,509:INFO:finalize_model() successfully completed......................................
2024-03-05 23:50:58,642:INFO:Initializing predict_model()
2024-03-05 23:50:58,642:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1574810443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:50:58,642:INFO:Checking exceptions
2024-03-05 23:50:58,642:INFO:Preloading libraries
2024-03-05 23:50:58,658:INFO:Set up data.
2024-03-05 23:50:58,713:INFO:Set up index.
2024-03-05 23:50:59,045:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:50:59,092:INFO:Initializing finalize_model()
2024-03-05 23:50:59,092:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=172773625), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:50:59,092:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=172773625)
2024-03-05 23:50:59,245:INFO:Initializing create_model()
2024-03-05 23:50:59,245:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=172773625), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:50:59,245:INFO:Checking exceptions
2024-03-05 23:50:59,245:INFO:Importing libraries
2024-03-05 23:50:59,245:INFO:Copying training dataset
2024-03-05 23:50:59,309:INFO:Defining folds
2024-03-05 23:50:59,309:INFO:Declaring metric variables
2024-03-05 23:50:59,309:INFO:Importing untrained model
2024-03-05 23:50:59,309:INFO:Declaring custom model
2024-03-05 23:50:59,309:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:50:59,309:INFO:Cross validation set to False
2024-03-05 23:50:59,309:INFO:Fitting Model
2024-03-05 23:51:13,297:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=172773625))])
2024-03-05 23:51:13,297:INFO:create_model() successfully completed......................................
2024-03-05 23:51:13,434:INFO:_master_model_container: 20
2024-03-05 23:51:13,434:INFO:_display_container: 4
2024-03-05 23:51:13,434:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=172773625))])
2024-03-05 23:51:13,434:INFO:finalize_model() successfully completed......................................
2024-03-05 23:51:13,581:INFO:Initializing predict_model()
2024-03-05 23:51:13,581:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=172773625))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:51:13,581:INFO:Checking exceptions
2024-03-05 23:51:13,581:INFO:Preloading libraries
2024-03-05 23:51:13,581:INFO:Set up data.
2024-03-05 23:51:13,638:INFO:Set up index.
2024-03-05 23:51:13,983:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:51:14,015:INFO:Initializing finalize_model()
2024-03-05 23:51:14,015:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=707897536), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:51:14,015:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=707897536)
2024-03-05 23:51:14,164:INFO:Initializing create_model()
2024-03-05 23:51:14,164:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=707897536), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:51:14,164:INFO:Checking exceptions
2024-03-05 23:51:14,181:INFO:Importing libraries
2024-03-05 23:51:14,181:INFO:Copying training dataset
2024-03-05 23:51:14,201:INFO:Defining folds
2024-03-05 23:51:14,201:INFO:Declaring metric variables
2024-03-05 23:51:14,201:INFO:Importing untrained model
2024-03-05 23:51:14,201:INFO:Declaring custom model
2024-03-05 23:51:14,201:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:51:14,201:INFO:Cross validation set to False
2024-03-05 23:51:14,201:INFO:Fitting Model
2024-03-05 23:51:28,223:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=707897536))])
2024-03-05 23:51:28,223:INFO:create_model() successfully completed......................................
2024-03-05 23:51:28,366:INFO:_master_model_container: 20
2024-03-05 23:51:28,366:INFO:_display_container: 4
2024-03-05 23:51:28,366:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=707897536))])
2024-03-05 23:51:28,366:INFO:finalize_model() successfully completed......................................
2024-03-05 23:51:28,520:INFO:Initializing predict_model()
2024-03-05 23:51:28,520:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=707897536))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:51:28,520:INFO:Checking exceptions
2024-03-05 23:51:28,520:INFO:Preloading libraries
2024-03-05 23:51:28,520:INFO:Set up data.
2024-03-05 23:51:28,571:INFO:Set up index.
2024-03-05 23:51:28,923:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:51:28,954:INFO:Initializing finalize_model()
2024-03-05 23:51:28,954:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1599836895), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:51:28,954:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1599836895)
2024-03-05 23:51:29,106:INFO:Initializing create_model()
2024-03-05 23:51:29,106:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1599836895), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:51:29,106:INFO:Checking exceptions
2024-03-05 23:51:29,106:INFO:Importing libraries
2024-03-05 23:51:29,106:INFO:Copying training dataset
2024-03-05 23:51:29,137:INFO:Defining folds
2024-03-05 23:51:29,137:INFO:Declaring metric variables
2024-03-05 23:51:29,137:INFO:Importing untrained model
2024-03-05 23:51:29,137:INFO:Declaring custom model
2024-03-05 23:51:29,137:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:51:29,137:INFO:Cross validation set to False
2024-03-05 23:51:29,137:INFO:Fitting Model
2024-03-05 23:51:43,521:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1599836895))])
2024-03-05 23:51:43,521:INFO:create_model() successfully completed......................................
2024-03-05 23:51:43,657:INFO:_master_model_container: 20
2024-03-05 23:51:43,657:INFO:_display_container: 4
2024-03-05 23:51:43,660:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1599836895))])
2024-03-05 23:51:43,661:INFO:finalize_model() successfully completed......................................
2024-03-05 23:51:43,801:INFO:Initializing predict_model()
2024-03-05 23:51:43,801:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1599836895))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:51:43,801:INFO:Checking exceptions
2024-03-05 23:51:43,801:INFO:Preloading libraries
2024-03-05 23:51:43,803:INFO:Set up data.
2024-03-05 23:51:43,857:INFO:Set up index.
2024-03-05 23:51:44,201:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:51:44,230:INFO:Initializing finalize_model()
2024-03-05 23:51:44,230:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=251777368), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:51:44,231:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=251777368)
2024-03-05 23:51:44,390:INFO:Initializing create_model()
2024-03-05 23:51:44,390:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=251777368), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:51:44,390:INFO:Checking exceptions
2024-03-05 23:51:44,391:INFO:Importing libraries
2024-03-05 23:51:44,391:INFO:Copying training dataset
2024-03-05 23:51:44,425:INFO:Defining folds
2024-03-05 23:51:44,425:INFO:Declaring metric variables
2024-03-05 23:51:44,425:INFO:Importing untrained model
2024-03-05 23:51:44,425:INFO:Declaring custom model
2024-03-05 23:51:44,426:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:51:44,426:INFO:Cross validation set to False
2024-03-05 23:51:44,426:INFO:Fitting Model
2024-03-05 23:51:58,332:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=251777368))])
2024-03-05 23:51:58,332:INFO:create_model() successfully completed......................................
2024-03-05 23:51:58,466:INFO:_master_model_container: 20
2024-03-05 23:51:58,466:INFO:_display_container: 4
2024-03-05 23:51:58,470:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=251777368))])
2024-03-05 23:51:58,470:INFO:finalize_model() successfully completed......................................
2024-03-05 23:51:58,611:INFO:Initializing predict_model()
2024-03-05 23:51:58,611:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=251777368))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:51:58,611:INFO:Checking exceptions
2024-03-05 23:51:58,611:INFO:Preloading libraries
2024-03-05 23:51:58,613:INFO:Set up data.
2024-03-05 23:51:58,665:INFO:Set up index.
2024-03-05 23:51:59,012:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:51:59,041:INFO:Initializing finalize_model()
2024-03-05 23:51:59,041:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1266387391), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:51:59,041:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1266387391)
2024-03-05 23:51:59,207:INFO:Initializing create_model()
2024-03-05 23:51:59,207:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1266387391), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:51:59,207:INFO:Checking exceptions
2024-03-05 23:51:59,208:INFO:Importing libraries
2024-03-05 23:51:59,208:INFO:Copying training dataset
2024-03-05 23:51:59,241:INFO:Defining folds
2024-03-05 23:51:59,241:INFO:Declaring metric variables
2024-03-05 23:51:59,241:INFO:Importing untrained model
2024-03-05 23:51:59,241:INFO:Declaring custom model
2024-03-05 23:51:59,241:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:51:59,242:INFO:Cross validation set to False
2024-03-05 23:51:59,242:INFO:Fitting Model
2024-03-05 23:52:13,423:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1266387391))])
2024-03-05 23:52:13,423:INFO:create_model() successfully completed......................................
2024-03-05 23:52:13,556:INFO:_master_model_container: 20
2024-03-05 23:52:13,556:INFO:_display_container: 4
2024-03-05 23:52:13,560:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1266387391))])
2024-03-05 23:52:13,560:INFO:finalize_model() successfully completed......................................
2024-03-05 23:52:13,706:INFO:Initializing predict_model()
2024-03-05 23:52:13,706:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1266387391))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:52:13,706:INFO:Checking exceptions
2024-03-05 23:52:13,706:INFO:Preloading libraries
2024-03-05 23:52:13,708:INFO:Set up data.
2024-03-05 23:52:13,760:INFO:Set up index.
2024-03-05 23:52:14,101:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:52:14,128:INFO:Initializing finalize_model()
2024-03-05 23:52:14,128:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1738368262), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:52:14,128:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1738368262)
2024-03-05 23:52:14,287:INFO:Initializing create_model()
2024-03-05 23:52:14,287:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1738368262), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:52:14,287:INFO:Checking exceptions
2024-03-05 23:52:14,288:INFO:Importing libraries
2024-03-05 23:52:14,289:INFO:Copying training dataset
2024-03-05 23:52:14,320:INFO:Defining folds
2024-03-05 23:52:14,320:INFO:Declaring metric variables
2024-03-05 23:52:14,320:INFO:Importing untrained model
2024-03-05 23:52:14,320:INFO:Declaring custom model
2024-03-05 23:52:14,320:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:52:14,321:INFO:Cross validation set to False
2024-03-05 23:52:14,321:INFO:Fitting Model
2024-03-05 23:52:28,291:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1738368262))])
2024-03-05 23:52:28,291:INFO:create_model() successfully completed......................................
2024-03-05 23:52:28,425:INFO:_master_model_container: 20
2024-03-05 23:52:28,425:INFO:_display_container: 4
2024-03-05 23:52:28,429:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1738368262))])
2024-03-05 23:52:28,429:INFO:finalize_model() successfully completed......................................
2024-03-05 23:52:28,570:INFO:Initializing predict_model()
2024-03-05 23:52:28,570:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1738368262))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:52:28,570:INFO:Checking exceptions
2024-03-05 23:52:28,571:INFO:Preloading libraries
2024-03-05 23:52:28,572:INFO:Set up data.
2024-03-05 23:52:28,625:INFO:Set up index.
2024-03-05 23:52:28,980:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:52:29,010:INFO:Initializing finalize_model()
2024-03-05 23:52:29,011:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=329846778), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:52:29,011:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=329846778)
2024-03-05 23:52:29,175:INFO:Initializing create_model()
2024-03-05 23:52:29,175:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=329846778), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:52:29,176:INFO:Checking exceptions
2024-03-05 23:52:29,177:INFO:Importing libraries
2024-03-05 23:52:29,177:INFO:Copying training dataset
2024-03-05 23:52:29,207:INFO:Defining folds
2024-03-05 23:52:29,208:INFO:Declaring metric variables
2024-03-05 23:52:29,208:INFO:Importing untrained model
2024-03-05 23:52:29,208:INFO:Declaring custom model
2024-03-05 23:52:29,208:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:52:29,209:INFO:Cross validation set to False
2024-03-05 23:52:29,209:INFO:Fitting Model
2024-03-05 23:52:43,091:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=329846778))])
2024-03-05 23:52:43,091:INFO:create_model() successfully completed......................................
2024-03-05 23:52:43,223:INFO:_master_model_container: 20
2024-03-05 23:52:43,223:INFO:_display_container: 4
2024-03-05 23:52:43,227:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=329846778))])
2024-03-05 23:52:43,227:INFO:finalize_model() successfully completed......................................
2024-03-05 23:52:43,370:INFO:Initializing predict_model()
2024-03-05 23:52:43,370:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=329846778))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC0BD80>)
2024-03-05 23:52:43,370:INFO:Checking exceptions
2024-03-05 23:52:43,370:INFO:Preloading libraries
2024-03-05 23:52:43,372:INFO:Set up data.
2024-03-05 23:52:43,425:INFO:Set up index.
2024-03-05 23:52:43,772:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:52:43,804:INFO:Initializing finalize_model()
2024-03-05 23:52:43,804:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1212594926), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:52:43,804:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1212594926)
2024-03-05 23:52:43,962:INFO:Initializing create_model()
2024-03-05 23:52:43,962:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1212594926), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:52:43,962:INFO:Checking exceptions
2024-03-05 23:52:43,963:INFO:Importing libraries
2024-03-05 23:52:43,963:INFO:Copying training dataset
2024-03-05 23:52:43,995:INFO:Defining folds
2024-03-05 23:52:43,995:INFO:Declaring metric variables
2024-03-05 23:52:43,995:INFO:Importing untrained model
2024-03-05 23:52:43,995:INFO:Declaring custom model
2024-03-05 23:52:43,996:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:52:43,996:INFO:Cross validation set to False
2024-03-05 23:52:43,996:INFO:Fitting Model
2024-03-05 23:52:57,988:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1212594926))])
2024-03-05 23:52:57,988:INFO:create_model() successfully completed......................................
2024-03-05 23:52:58,119:INFO:_master_model_container: 20
2024-03-05 23:52:58,119:INFO:_display_container: 4
2024-03-05 23:52:58,123:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1212594926))])
2024-03-05 23:52:58,123:INFO:finalize_model() successfully completed......................................
2024-03-05 23:52:58,264:INFO:Initializing predict_model()
2024-03-05 23:52:58,264:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1212594926))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:52:58,264:INFO:Checking exceptions
2024-03-05 23:52:58,264:INFO:Preloading libraries
2024-03-05 23:52:58,266:INFO:Set up data.
2024-03-05 23:52:58,317:INFO:Set up index.
2024-03-05 23:52:58,660:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:52:58,689:INFO:Initializing finalize_model()
2024-03-05 23:52:58,690:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1731766546), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:52:58,690:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1731766546)
2024-03-05 23:52:58,849:INFO:Initializing create_model()
2024-03-05 23:52:58,849:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1731766546), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:52:58,849:INFO:Checking exceptions
2024-03-05 23:52:58,850:INFO:Importing libraries
2024-03-05 23:52:58,850:INFO:Copying training dataset
2024-03-05 23:52:58,892:INFO:Defining folds
2024-03-05 23:52:58,893:INFO:Declaring metric variables
2024-03-05 23:52:58,893:INFO:Importing untrained model
2024-03-05 23:52:58,893:INFO:Declaring custom model
2024-03-05 23:52:58,893:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:52:58,894:INFO:Cross validation set to False
2024-03-05 23:52:58,894:INFO:Fitting Model
2024-03-05 23:53:12,989:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1731766546))])
2024-03-05 23:53:12,989:INFO:create_model() successfully completed......................................
2024-03-05 23:53:13,123:INFO:_master_model_container: 20
2024-03-05 23:53:13,123:INFO:_display_container: 4
2024-03-05 23:53:13,127:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1731766546))])
2024-03-05 23:53:13,127:INFO:finalize_model() successfully completed......................................
2024-03-05 23:53:13,268:INFO:Initializing predict_model()
2024-03-05 23:53:13,268:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1731766546))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:53:13,268:INFO:Checking exceptions
2024-03-05 23:53:13,268:INFO:Preloading libraries
2024-03-05 23:53:13,270:INFO:Set up data.
2024-03-05 23:53:13,324:INFO:Set up index.
2024-03-05 23:53:13,672:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:53:13,699:INFO:Initializing finalize_model()
2024-03-05 23:53:13,699:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=483763179), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:53:13,699:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=483763179)
2024-03-05 23:53:13,867:INFO:Initializing create_model()
2024-03-05 23:53:13,867:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=483763179), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:53:13,867:INFO:Checking exceptions
2024-03-05 23:53:13,868:INFO:Importing libraries
2024-03-05 23:53:13,868:INFO:Copying training dataset
2024-03-05 23:53:13,899:INFO:Defining folds
2024-03-05 23:53:13,899:INFO:Declaring metric variables
2024-03-05 23:53:13,899:INFO:Importing untrained model
2024-03-05 23:53:13,899:INFO:Declaring custom model
2024-03-05 23:53:13,900:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:53:13,900:INFO:Cross validation set to False
2024-03-05 23:53:13,900:INFO:Fitting Model
2024-03-05 23:53:27,974:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=483763179))])
2024-03-05 23:53:27,974:INFO:create_model() successfully completed......................................
2024-03-05 23:53:28,104:INFO:_master_model_container: 20
2024-03-05 23:53:28,104:INFO:_display_container: 4
2024-03-05 23:53:28,108:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=483763179))])
2024-03-05 23:53:28,108:INFO:finalize_model() successfully completed......................................
2024-03-05 23:53:28,250:INFO:Initializing predict_model()
2024-03-05 23:53:28,250:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=483763179))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:53:28,250:INFO:Checking exceptions
2024-03-05 23:53:28,250:INFO:Preloading libraries
2024-03-05 23:53:28,252:INFO:Set up data.
2024-03-05 23:53:28,316:INFO:Set up index.
2024-03-05 23:53:28,662:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:53:28,691:INFO:Initializing finalize_model()
2024-03-05 23:53:28,691:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1342992032), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:53:28,692:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1342992032)
2024-03-05 23:53:28,860:INFO:Initializing create_model()
2024-03-05 23:53:28,860:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1342992032), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:53:28,860:INFO:Checking exceptions
2024-03-05 23:53:28,861:INFO:Importing libraries
2024-03-05 23:53:28,861:INFO:Copying training dataset
2024-03-05 23:53:28,892:INFO:Defining folds
2024-03-05 23:53:28,892:INFO:Declaring metric variables
2024-03-05 23:53:28,892:INFO:Importing untrained model
2024-03-05 23:53:28,893:INFO:Declaring custom model
2024-03-05 23:53:28,893:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:53:28,893:INFO:Cross validation set to False
2024-03-05 23:53:28,893:INFO:Fitting Model
2024-03-05 23:53:42,798:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1342992032))])
2024-03-05 23:53:42,798:INFO:create_model() successfully completed......................................
2024-03-05 23:53:42,930:INFO:_master_model_container: 20
2024-03-05 23:53:42,930:INFO:_display_container: 4
2024-03-05 23:53:42,934:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1342992032))])
2024-03-05 23:53:42,934:INFO:finalize_model() successfully completed......................................
2024-03-05 23:53:43,075:INFO:Initializing predict_model()
2024-03-05 23:53:43,075:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1342992032))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:53:43,075:INFO:Checking exceptions
2024-03-05 23:53:43,075:INFO:Preloading libraries
2024-03-05 23:53:43,077:INFO:Set up data.
2024-03-05 23:53:43,129:INFO:Set up index.
2024-03-05 23:53:43,484:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:53:43,514:INFO:Initializing finalize_model()
2024-03-05 23:53:43,514:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2106529053), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:53:43,514:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2106529053)
2024-03-05 23:53:43,674:INFO:Initializing create_model()
2024-03-05 23:53:43,674:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2106529053), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:53:43,674:INFO:Checking exceptions
2024-03-05 23:53:43,675:INFO:Importing libraries
2024-03-05 23:53:43,675:INFO:Copying training dataset
2024-03-05 23:53:43,707:INFO:Defining folds
2024-03-05 23:53:43,707:INFO:Declaring metric variables
2024-03-05 23:53:43,707:INFO:Importing untrained model
2024-03-05 23:53:43,707:INFO:Declaring custom model
2024-03-05 23:53:43,708:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:53:43,708:INFO:Cross validation set to False
2024-03-05 23:53:43,708:INFO:Fitting Model
2024-03-05 23:53:57,642:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2106529053))])
2024-03-05 23:53:57,642:INFO:create_model() successfully completed......................................
2024-03-05 23:53:57,774:INFO:_master_model_container: 20
2024-03-05 23:53:57,774:INFO:_display_container: 4
2024-03-05 23:53:57,778:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2106529053))])
2024-03-05 23:53:57,778:INFO:finalize_model() successfully completed......................................
2024-03-05 23:53:57,920:INFO:Initializing predict_model()
2024-03-05 23:53:57,920:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2106529053))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:53:57,920:INFO:Checking exceptions
2024-03-05 23:53:57,920:INFO:Preloading libraries
2024-03-05 23:53:57,922:INFO:Set up data.
2024-03-05 23:53:57,973:INFO:Set up index.
2024-03-05 23:53:58,323:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:53:58,352:INFO:Initializing finalize_model()
2024-03-05 23:53:58,352:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1055792607), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:53:58,352:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1055792607)
2024-03-05 23:53:58,512:INFO:Initializing create_model()
2024-03-05 23:53:58,512:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1055792607), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:53:58,512:INFO:Checking exceptions
2024-03-05 23:53:58,513:INFO:Importing libraries
2024-03-05 23:53:58,513:INFO:Copying training dataset
2024-03-05 23:53:58,545:INFO:Defining folds
2024-03-05 23:53:58,545:INFO:Declaring metric variables
2024-03-05 23:53:58,545:INFO:Importing untrained model
2024-03-05 23:53:58,545:INFO:Declaring custom model
2024-03-05 23:53:58,546:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:53:58,546:INFO:Cross validation set to False
2024-03-05 23:53:58,546:INFO:Fitting Model
2024-03-05 23:54:12,607:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1055792607))])
2024-03-05 23:54:12,607:INFO:create_model() successfully completed......................................
2024-03-05 23:54:12,741:INFO:_master_model_container: 20
2024-03-05 23:54:12,741:INFO:_display_container: 4
2024-03-05 23:54:12,745:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1055792607))])
2024-03-05 23:54:12,745:INFO:finalize_model() successfully completed......................................
2024-03-05 23:54:12,887:INFO:Initializing predict_model()
2024-03-05 23:54:12,887:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1055792607))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:54:12,887:INFO:Checking exceptions
2024-03-05 23:54:12,887:INFO:Preloading libraries
2024-03-05 23:54:12,889:INFO:Set up data.
2024-03-05 23:54:12,941:INFO:Set up index.
2024-03-05 23:54:13,287:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:54:13,316:INFO:Initializing finalize_model()
2024-03-05 23:54:13,316:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=543603264), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:54:13,316:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=543603264)
2024-03-05 23:54:13,487:INFO:Initializing create_model()
2024-03-05 23:54:13,487:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=543603264), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:54:13,487:INFO:Checking exceptions
2024-03-05 23:54:13,489:INFO:Importing libraries
2024-03-05 23:54:13,489:INFO:Copying training dataset
2024-03-05 23:54:13,519:INFO:Defining folds
2024-03-05 23:54:13,519:INFO:Declaring metric variables
2024-03-05 23:54:13,520:INFO:Importing untrained model
2024-03-05 23:54:13,520:INFO:Declaring custom model
2024-03-05 23:54:13,520:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:54:13,521:INFO:Cross validation set to False
2024-03-05 23:54:13,521:INFO:Fitting Model
2024-03-05 23:54:27,432:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=543603264))])
2024-03-05 23:54:27,432:INFO:create_model() successfully completed......................................
2024-03-05 23:54:27,568:INFO:_master_model_container: 20
2024-03-05 23:54:27,568:INFO:_display_container: 4
2024-03-05 23:54:27,572:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=543603264))])
2024-03-05 23:54:27,573:INFO:finalize_model() successfully completed......................................
2024-03-05 23:54:27,715:INFO:Initializing predict_model()
2024-03-05 23:54:27,715:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=543603264))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:54:27,715:INFO:Checking exceptions
2024-03-05 23:54:27,715:INFO:Preloading libraries
2024-03-05 23:54:27,717:INFO:Set up data.
2024-03-05 23:54:27,768:INFO:Set up index.
2024-03-05 23:54:28,116:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:54:28,146:INFO:Initializing finalize_model()
2024-03-05 23:54:28,146:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1405477563), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:54:28,146:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1405477563)
2024-03-05 23:54:28,303:INFO:Initializing create_model()
2024-03-05 23:54:28,303:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1405477563), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:54:28,303:INFO:Checking exceptions
2024-03-05 23:54:28,305:INFO:Importing libraries
2024-03-05 23:54:28,305:INFO:Copying training dataset
2024-03-05 23:54:28,336:INFO:Defining folds
2024-03-05 23:54:28,336:INFO:Declaring metric variables
2024-03-05 23:54:28,336:INFO:Importing untrained model
2024-03-05 23:54:28,336:INFO:Declaring custom model
2024-03-05 23:54:28,337:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:54:28,337:INFO:Cross validation set to False
2024-03-05 23:54:28,337:INFO:Fitting Model
2024-03-05 23:54:42,273:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1405477563))])
2024-03-05 23:54:42,274:INFO:create_model() successfully completed......................................
2024-03-05 23:54:42,404:INFO:_master_model_container: 20
2024-03-05 23:54:42,404:INFO:_display_container: 4
2024-03-05 23:54:42,408:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1405477563))])
2024-03-05 23:54:42,408:INFO:finalize_model() successfully completed......................................
2024-03-05 23:54:42,549:INFO:Initializing predict_model()
2024-03-05 23:54:42,549:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1405477563))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC0BD80>)
2024-03-05 23:54:42,549:INFO:Checking exceptions
2024-03-05 23:54:42,549:INFO:Preloading libraries
2024-03-05 23:54:42,551:INFO:Set up data.
2024-03-05 23:54:42,603:INFO:Set up index.
2024-03-05 23:54:42,950:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:54:42,980:INFO:Initializing finalize_model()
2024-03-05 23:54:42,981:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=48211192), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:54:42,981:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=48211192)
2024-03-05 23:54:43,143:INFO:Initializing create_model()
2024-03-05 23:54:43,143:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=48211192), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:54:43,143:INFO:Checking exceptions
2024-03-05 23:54:43,144:INFO:Importing libraries
2024-03-05 23:54:43,144:INFO:Copying training dataset
2024-03-05 23:54:43,175:INFO:Defining folds
2024-03-05 23:54:43,175:INFO:Declaring metric variables
2024-03-05 23:54:43,175:INFO:Importing untrained model
2024-03-05 23:54:43,175:INFO:Declaring custom model
2024-03-05 23:54:43,176:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:54:43,177:INFO:Cross validation set to False
2024-03-05 23:54:43,177:INFO:Fitting Model
2024-03-05 23:54:57,220:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=48211192))])
2024-03-05 23:54:57,220:INFO:create_model() successfully completed......................................
2024-03-05 23:54:57,352:INFO:_master_model_container: 20
2024-03-05 23:54:57,352:INFO:_display_container: 4
2024-03-05 23:54:57,356:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=48211192))])
2024-03-05 23:54:57,356:INFO:finalize_model() successfully completed......................................
2024-03-05 23:54:57,499:INFO:Initializing predict_model()
2024-03-05 23:54:57,499:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=48211192))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:54:57,499:INFO:Checking exceptions
2024-03-05 23:54:57,499:INFO:Preloading libraries
2024-03-05 23:54:57,500:INFO:Set up data.
2024-03-05 23:54:57,550:INFO:Set up index.
2024-03-05 23:54:57,896:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:54:57,925:INFO:Initializing finalize_model()
2024-03-05 23:54:57,925:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1162380753), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:54:57,925:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1162380753)
2024-03-05 23:54:58,086:INFO:Initializing create_model()
2024-03-05 23:54:58,086:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1162380753), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:54:58,086:INFO:Checking exceptions
2024-03-05 23:54:58,088:INFO:Importing libraries
2024-03-05 23:54:58,088:INFO:Copying training dataset
2024-03-05 23:54:58,121:INFO:Defining folds
2024-03-05 23:54:58,121:INFO:Declaring metric variables
2024-03-05 23:54:58,121:INFO:Importing untrained model
2024-03-05 23:54:58,121:INFO:Declaring custom model
2024-03-05 23:54:58,121:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:54:58,122:INFO:Cross validation set to False
2024-03-05 23:54:58,122:INFO:Fitting Model
2024-03-05 23:55:11,964:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1162380753))])
2024-03-05 23:55:11,964:INFO:create_model() successfully completed......................................
2024-03-05 23:55:12,097:INFO:_master_model_container: 20
2024-03-05 23:55:12,097:INFO:_display_container: 4
2024-03-05 23:55:12,101:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1162380753))])
2024-03-05 23:55:12,101:INFO:finalize_model() successfully completed......................................
2024-03-05 23:55:12,244:INFO:Initializing predict_model()
2024-03-05 23:55:12,244:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1162380753))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:55:12,244:INFO:Checking exceptions
2024-03-05 23:55:12,244:INFO:Preloading libraries
2024-03-05 23:55:12,246:INFO:Set up data.
2024-03-05 23:55:12,297:INFO:Set up index.
2024-03-05 23:55:12,651:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:55:12,679:INFO:Initializing finalize_model()
2024-03-05 23:55:12,679:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=208969640), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:55:12,679:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=208969640)
2024-03-05 23:55:12,842:INFO:Initializing create_model()
2024-03-05 23:55:12,842:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=208969640), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:55:12,842:INFO:Checking exceptions
2024-03-05 23:55:12,844:INFO:Importing libraries
2024-03-05 23:55:12,844:INFO:Copying training dataset
2024-03-05 23:55:12,876:INFO:Defining folds
2024-03-05 23:55:12,876:INFO:Declaring metric variables
2024-03-05 23:55:12,876:INFO:Importing untrained model
2024-03-05 23:55:12,876:INFO:Declaring custom model
2024-03-05 23:55:12,876:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:55:12,877:INFO:Cross validation set to False
2024-03-05 23:55:12,877:INFO:Fitting Model
2024-03-05 23:55:26,932:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=208969640))])
2024-03-05 23:55:26,932:INFO:create_model() successfully completed......................................
2024-03-05 23:55:27,063:INFO:_master_model_container: 20
2024-03-05 23:55:27,063:INFO:_display_container: 4
2024-03-05 23:55:27,067:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=208969640))])
2024-03-05 23:55:27,067:INFO:finalize_model() successfully completed......................................
2024-03-05 23:55:27,210:INFO:Initializing predict_model()
2024-03-05 23:55:27,211:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=208969640))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:55:27,211:INFO:Checking exceptions
2024-03-05 23:55:27,211:INFO:Preloading libraries
2024-03-05 23:55:27,212:INFO:Set up data.
2024-03-05 23:55:27,264:INFO:Set up index.
2024-03-05 23:55:27,608:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:55:27,637:INFO:Initializing finalize_model()
2024-03-05 23:55:27,637:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1027390593), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:55:27,637:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1027390593)
2024-03-05 23:55:27,795:INFO:Initializing create_model()
2024-03-05 23:55:27,795:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1027390593), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:55:27,795:INFO:Checking exceptions
2024-03-05 23:55:27,796:INFO:Importing libraries
2024-03-05 23:55:27,796:INFO:Copying training dataset
2024-03-05 23:55:27,827:INFO:Defining folds
2024-03-05 23:55:27,827:INFO:Declaring metric variables
2024-03-05 23:55:27,828:INFO:Importing untrained model
2024-03-05 23:55:27,828:INFO:Declaring custom model
2024-03-05 23:55:27,828:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:55:27,829:INFO:Cross validation set to False
2024-03-05 23:55:27,829:INFO:Fitting Model
2024-03-05 23:55:41,935:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1027390593))])
2024-03-05 23:55:41,935:INFO:create_model() successfully completed......................................
2024-03-05 23:55:42,069:INFO:_master_model_container: 20
2024-03-05 23:55:42,069:INFO:_display_container: 4
2024-03-05 23:55:42,073:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1027390593))])
2024-03-05 23:55:42,073:INFO:finalize_model() successfully completed......................................
2024-03-05 23:55:42,216:INFO:Initializing predict_model()
2024-03-05 23:55:42,216:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1027390593))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE48227C40>)
2024-03-05 23:55:42,216:INFO:Checking exceptions
2024-03-05 23:55:42,216:INFO:Preloading libraries
2024-03-05 23:55:42,217:INFO:Set up data.
2024-03-05 23:55:42,284:INFO:Set up index.
2024-03-05 23:55:42,630:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:55:42,660:INFO:Initializing finalize_model()
2024-03-05 23:55:42,660:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1068772561), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:55:42,660:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1068772561)
2024-03-05 23:55:42,825:INFO:Initializing create_model()
2024-03-05 23:55:42,825:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1068772561), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:55:42,825:INFO:Checking exceptions
2024-03-05 23:55:42,826:INFO:Importing libraries
2024-03-05 23:55:42,826:INFO:Copying training dataset
2024-03-05 23:55:42,859:INFO:Defining folds
2024-03-05 23:55:42,859:INFO:Declaring metric variables
2024-03-05 23:55:42,859:INFO:Importing untrained model
2024-03-05 23:55:42,859:INFO:Declaring custom model
2024-03-05 23:55:42,859:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:55:42,860:INFO:Cross validation set to False
2024-03-05 23:55:42,860:INFO:Fitting Model
2024-03-05 23:55:57,835:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1068772561))])
2024-03-05 23:55:57,835:INFO:create_model() successfully completed......................................
2024-03-05 23:55:57,969:INFO:_master_model_container: 20
2024-03-05 23:55:57,969:INFO:_display_container: 4
2024-03-05 23:55:57,969:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1068772561))])
2024-03-05 23:55:57,969:INFO:finalize_model() successfully completed......................................
2024-03-05 23:55:58,141:INFO:Initializing predict_model()
2024-03-05 23:55:58,142:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1068772561))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:55:58,142:INFO:Checking exceptions
2024-03-05 23:55:58,142:INFO:Preloading libraries
2024-03-05 23:55:58,143:INFO:Set up data.
2024-03-05 23:55:58,204:INFO:Set up index.
2024-03-05 23:55:58,573:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:55:58,606:INFO:Initializing finalize_model()
2024-03-05 23:55:58,606:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1663734553), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:55:58,606:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1663734553)
2024-03-05 23:55:58,768:INFO:Initializing create_model()
2024-03-05 23:55:58,768:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1663734553), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:55:58,768:INFO:Checking exceptions
2024-03-05 23:55:58,768:INFO:Importing libraries
2024-03-05 23:55:58,768:INFO:Copying training dataset
2024-03-05 23:55:58,800:INFO:Defining folds
2024-03-05 23:55:58,800:INFO:Declaring metric variables
2024-03-05 23:55:58,800:INFO:Importing untrained model
2024-03-05 23:55:58,800:INFO:Declaring custom model
2024-03-05 23:55:58,800:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:55:58,800:INFO:Cross validation set to False
2024-03-05 23:55:58,800:INFO:Fitting Model
2024-03-05 23:56:13,593:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1663734553))])
2024-03-05 23:56:13,593:INFO:create_model() successfully completed......................................
2024-03-05 23:56:13,758:INFO:_master_model_container: 20
2024-03-05 23:56:13,758:INFO:_display_container: 4
2024-03-05 23:56:13,758:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1663734553))])
2024-03-05 23:56:13,758:INFO:finalize_model() successfully completed......................................
2024-03-05 23:56:13,933:INFO:Initializing predict_model()
2024-03-05 23:56:13,933:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1663734553))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC1C720>)
2024-03-05 23:56:13,933:INFO:Checking exceptions
2024-03-05 23:56:13,933:INFO:Preloading libraries
2024-03-05 23:56:13,933:INFO:Set up data.
2024-03-05 23:56:13,992:INFO:Set up index.
2024-03-05 23:56:14,408:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:56:14,442:INFO:Initializing finalize_model()
2024-03-05 23:56:14,442:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=36707965), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:56:14,442:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=36707965)
2024-03-05 23:56:14,625:INFO:Initializing create_model()
2024-03-05 23:56:14,625:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=36707965), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:56:14,625:INFO:Checking exceptions
2024-03-05 23:56:14,625:INFO:Importing libraries
2024-03-05 23:56:14,625:INFO:Copying training dataset
2024-03-05 23:56:14,658:INFO:Defining folds
2024-03-05 23:56:14,658:INFO:Declaring metric variables
2024-03-05 23:56:14,658:INFO:Importing untrained model
2024-03-05 23:56:14,658:INFO:Declaring custom model
2024-03-05 23:56:14,658:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:56:14,658:INFO:Cross validation set to False
2024-03-05 23:56:14,658:INFO:Fitting Model
2024-03-05 23:56:29,199:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=36707965))])
2024-03-05 23:56:29,199:INFO:create_model() successfully completed......................................
2024-03-05 23:56:29,370:INFO:_master_model_container: 20
2024-03-05 23:56:29,371:INFO:_display_container: 4
2024-03-05 23:56:29,372:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=36707965))])
2024-03-05 23:56:29,372:INFO:finalize_model() successfully completed......................................
2024-03-05 23:56:29,517:INFO:Initializing predict_model()
2024-03-05 23:56:29,517:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=36707965))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:56:29,517:INFO:Checking exceptions
2024-03-05 23:56:29,517:INFO:Preloading libraries
2024-03-05 23:56:29,517:INFO:Set up data.
2024-03-05 23:56:29,590:INFO:Set up index.
2024-03-05 23:56:29,967:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:56:30,000:INFO:Initializing finalize_model()
2024-03-05 23:56:30,000:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2016172597), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:56:30,000:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=2016172597)
2024-03-05 23:56:30,172:INFO:Initializing create_model()
2024-03-05 23:56:30,172:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=2016172597), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:56:30,172:INFO:Checking exceptions
2024-03-05 23:56:30,172:INFO:Importing libraries
2024-03-05 23:56:30,172:INFO:Copying training dataset
2024-03-05 23:56:30,203:INFO:Defining folds
2024-03-05 23:56:30,203:INFO:Declaring metric variables
2024-03-05 23:56:30,203:INFO:Importing untrained model
2024-03-05 23:56:30,203:INFO:Declaring custom model
2024-03-05 23:56:30,203:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:56:30,203:INFO:Cross validation set to False
2024-03-05 23:56:30,203:INFO:Fitting Model
2024-03-05 23:56:44,907:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2016172597))])
2024-03-05 23:56:44,907:INFO:create_model() successfully completed......................................
2024-03-05 23:56:45,060:INFO:_master_model_container: 20
2024-03-05 23:56:45,060:INFO:_display_container: 4
2024-03-05 23:56:45,064:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2016172597))])
2024-03-05 23:56:45,064:INFO:finalize_model() successfully completed......................................
2024-03-05 23:56:45,228:INFO:Initializing predict_model()
2024-03-05 23:56:45,228:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=2016172597))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EC0BD80>)
2024-03-05 23:56:45,228:INFO:Checking exceptions
2024-03-05 23:56:45,228:INFO:Preloading libraries
2024-03-05 23:56:45,230:INFO:Set up data.
2024-03-05 23:56:45,286:INFO:Set up index.
2024-03-05 23:56:45,637:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:56:45,671:INFO:Initializing finalize_model()
2024-03-05 23:56:45,671:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1081813434), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:56:45,671:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1081813434)
2024-03-05 23:56:45,838:INFO:Initializing create_model()
2024-03-05 23:56:45,838:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1081813434), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:56:45,838:INFO:Checking exceptions
2024-03-05 23:56:45,838:INFO:Importing libraries
2024-03-05 23:56:45,838:INFO:Copying training dataset
2024-03-05 23:56:45,870:INFO:Defining folds
2024-03-05 23:56:45,870:INFO:Declaring metric variables
2024-03-05 23:56:45,870:INFO:Importing untrained model
2024-03-05 23:56:45,870:INFO:Declaring custom model
2024-03-05 23:56:45,870:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:56:45,870:INFO:Cross validation set to False
2024-03-05 23:56:45,870:INFO:Fitting Model
2024-03-05 23:57:00,371:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1081813434))])
2024-03-05 23:57:00,371:INFO:create_model() successfully completed......................................
2024-03-05 23:57:00,515:INFO:_master_model_container: 20
2024-03-05 23:57:00,515:INFO:_display_container: 4
2024-03-05 23:57:00,515:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1081813434))])
2024-03-05 23:57:00,515:INFO:finalize_model() successfully completed......................................
2024-03-05 23:57:00,657:INFO:Initializing predict_model()
2024-03-05 23:57:00,657:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=1081813434))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE51098400>)
2024-03-05 23:57:00,657:INFO:Checking exceptions
2024-03-05 23:57:00,657:INFO:Preloading libraries
2024-03-05 23:57:00,657:INFO:Set up data.
2024-03-05 23:57:00,716:INFO:Set up index.
2024-03-05 23:57:01,053:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:57:01,086:INFO:Initializing finalize_model()
2024-03-05 23:57:01,086:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=749076981), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:57:01,086:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=749076981)
2024-03-05 23:57:01,260:INFO:Initializing create_model()
2024-03-05 23:57:01,264:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=749076981), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:57:01,264:INFO:Checking exceptions
2024-03-05 23:57:01,265:INFO:Importing libraries
2024-03-05 23:57:01,265:INFO:Copying training dataset
2024-03-05 23:57:01,302:INFO:Defining folds
2024-03-05 23:57:01,302:INFO:Declaring metric variables
2024-03-05 23:57:01,302:INFO:Importing untrained model
2024-03-05 23:57:01,302:INFO:Declaring custom model
2024-03-05 23:57:01,302:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:57:01,303:INFO:Cross validation set to False
2024-03-05 23:57:01,303:INFO:Fitting Model
2024-03-05 23:57:16,049:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=749076981))])
2024-03-05 23:57:16,049:INFO:create_model() successfully completed......................................
2024-03-05 23:57:16,200:INFO:_master_model_container: 20
2024-03-05 23:57:16,200:INFO:_display_container: 4
2024-03-05 23:57:16,205:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=749076981))])
2024-03-05 23:57:16,205:INFO:finalize_model() successfully completed......................................
2024-03-05 23:57:16,349:INFO:Initializing predict_model()
2024-03-05 23:57:16,349:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 DecisionTreeRegressor(max_features=1.0,
                                       random_state=749076981))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE50F8E340>)
2024-03-05 23:57:16,349:INFO:Checking exceptions
2024-03-05 23:57:16,349:INFO:Preloading libraries
2024-03-05 23:57:16,349:INFO:Set up data.
2024-03-05 23:57:16,417:INFO:Set up index.
2024-03-05 23:57:16,767:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-05 23:57:16,799:INFO:Initializing finalize_model()
2024-03-05 23:57:16,799:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1732591274), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-05 23:57:16,799:INFO:Finalizing DecisionTreeRegressor(max_features=1.0, random_state=1732591274)
2024-03-05 23:57:16,967:INFO:Initializing create_model()
2024-03-05 23:57:16,967:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE11664390>, estimator=DecisionTreeRegressor(max_features=1.0, random_state=1732591274), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-05 23:57:16,967:INFO:Checking exceptions
2024-03-05 23:57:16,967:INFO:Importing libraries
2024-03-05 23:57:16,967:INFO:Copying training dataset
2024-03-05 23:57:16,999:INFO:Defining folds
2024-03-05 23:57:16,999:INFO:Declaring metric variables
2024-03-05 23:57:16,999:INFO:Importing untrained model
2024-03-05 23:57:16,999:INFO:Declaring custom model
2024-03-05 23:57:16,999:INFO:Decision Tree Regressor Imported successfully
2024-03-05 23:57:16,999:INFO:Cross validation set to False
2024-03-05 23:57:16,999:INFO:Fitting Model
2024-03-06 09:10:06,258:INFO:PyCaret RegressionExperiment
2024-03-06 09:10:06,258:INFO:Logging name: reg-default-name
2024-03-06 09:10:06,258:INFO:ML Usecase: MLUsecase.REGRESSION
2024-03-06 09:10:06,258:INFO:version 3.3.0
2024-03-06 09:10:06,258:INFO:Initializing setup()
2024-03-06 09:10:06,258:INFO:self.USI: b880
2024-03-06 09:10:06,258:INFO:self._variable_keys: {'USI', 'gpu_n_jobs_param', 'fold_shuffle_param', 'y_train', 'y_test', '_ml_usecase', 'X_test', 'data', 'pipeline', 'exp_name_log', 'memory', 'X', 'log_plots_param', 'X_train', 'exp_id', 'seed', 'idx', 'n_jobs_param', 'fold_generator', 'fold_groups_param', 'transform_target_param', 'target_param', 'y', 'gpu_param', 'logging_param', '_available_plots', 'html_param'}
2024-03-06 09:10:06,258:INFO:Checking environment
2024-03-06 09:10:06,258:INFO:python_version: 3.11.5
2024-03-06 09:10:06,258:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-03-06 09:10:06,258:INFO:machine: AMD64
2024-03-06 09:10:06,258:INFO:platform: Windows-10-10.0.19045-SP0
2024-03-06 09:10:06,258:INFO:Memory: svmem(total=16889192448, available=6245347328, percent=63.0, used=10643845120, free=6245347328)
2024-03-06 09:10:06,258:INFO:Physical Core: 4
2024-03-06 09:10:06,258:INFO:Logical Core: 8
2024-03-06 09:10:06,258:INFO:Checking libraries
2024-03-06 09:10:06,258:INFO:System:
2024-03-06 09:10:06,258:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-03-06 09:10:06,258:INFO:executable: d:\anaconda\python.exe
2024-03-06 09:10:06,258:INFO:   machine: Windows-10-10.0.19045-SP0
2024-03-06 09:10:06,258:INFO:PyCaret required dependencies:
2024-03-06 09:10:06,258:INFO:                 pip: 23.2.1
2024-03-06 09:10:06,258:INFO:          setuptools: 68.0.0
2024-03-06 09:10:06,258:INFO:             pycaret: 3.3.0
2024-03-06 09:10:06,258:INFO:             IPython: 8.15.0
2024-03-06 09:10:06,258:INFO:          ipywidgets: 8.0.4
2024-03-06 09:10:06,258:INFO:                tqdm: 4.65.0
2024-03-06 09:10:06,258:INFO:               numpy: 1.24.3
2024-03-06 09:10:06,258:INFO:              pandas: 2.0.3
2024-03-06 09:10:06,258:INFO:              jinja2: 3.1.2
2024-03-06 09:10:06,258:INFO:               scipy: 1.11.1
2024-03-06 09:10:06,258:INFO:              joblib: 1.2.0
2024-03-06 09:10:06,258:INFO:             sklearn: 1.4.1.post1
2024-03-06 09:10:06,258:INFO:                pyod: 1.1.3
2024-03-06 09:10:06,258:INFO:            imblearn: 0.10.1
2024-03-06 09:10:06,258:INFO:   category_encoders: 2.6.3
2024-03-06 09:10:06,258:INFO:            lightgbm: 4.3.0
2024-03-06 09:10:06,258:INFO:               numba: 0.57.1
2024-03-06 09:10:06,258:INFO:            requests: 2.31.0
2024-03-06 09:10:06,258:INFO:          matplotlib: 3.7.2
2024-03-06 09:10:06,258:INFO:          scikitplot: 0.3.7
2024-03-06 09:10:06,258:INFO:         yellowbrick: 1.5
2024-03-06 09:10:06,258:INFO:              plotly: 5.19.0
2024-03-06 09:10:06,258:INFO:    plotly-resampler: Not installed
2024-03-06 09:10:06,258:INFO:             kaleido: 0.2.1
2024-03-06 09:10:06,258:INFO:           schemdraw: 0.15
2024-03-06 09:10:06,258:INFO:         statsmodels: 0.14.0
2024-03-06 09:10:06,258:INFO:              sktime: 0.26.1
2024-03-06 09:10:06,258:INFO:               tbats: 1.1.3
2024-03-06 09:10:06,258:INFO:            pmdarima: 2.0.4
2024-03-06 09:10:06,258:INFO:              psutil: 5.9.0
2024-03-06 09:10:06,258:INFO:          markupsafe: 2.1.1
2024-03-06 09:10:06,258:INFO:             pickle5: Not installed
2024-03-06 09:10:06,258:INFO:         cloudpickle: 2.2.1
2024-03-06 09:10:06,258:INFO:         deprecation: 2.1.0
2024-03-06 09:10:06,258:INFO:              xxhash: 2.0.2
2024-03-06 09:10:06,258:INFO:           wurlitzer: Not installed
2024-03-06 09:10:06,258:INFO:PyCaret optional dependencies:
2024-03-06 09:10:06,258:INFO:                shap: Not installed
2024-03-06 09:10:06,258:INFO:           interpret: Not installed
2024-03-06 09:10:06,258:INFO:                umap: Not installed
2024-03-06 09:10:06,258:INFO:     ydata_profiling: Not installed
2024-03-06 09:10:06,258:INFO:  explainerdashboard: Not installed
2024-03-06 09:10:06,258:INFO:             autoviz: Not installed
2024-03-06 09:10:06,258:INFO:           fairlearn: Not installed
2024-03-06 09:10:06,258:INFO:          deepchecks: Not installed
2024-03-06 09:10:06,258:INFO:             xgboost: 2.0.3
2024-03-06 09:10:06,258:INFO:            catboost: 1.2.2
2024-03-06 09:10:06,258:INFO:              kmodes: Not installed
2024-03-06 09:10:06,258:INFO:             mlxtend: Not installed
2024-03-06 09:10:06,258:INFO:       statsforecast: Not installed
2024-03-06 09:10:06,258:INFO:        tune_sklearn: Not installed
2024-03-06 09:10:06,258:INFO:                 ray: Not installed
2024-03-06 09:10:06,258:INFO:            hyperopt: Not installed
2024-03-06 09:10:06,258:INFO:              optuna: Not installed
2024-03-06 09:10:06,258:INFO:               skopt: Not installed
2024-03-06 09:10:06,258:INFO:              mlflow: Not installed
2024-03-06 09:10:06,258:INFO:              gradio: Not installed
2024-03-06 09:10:06,258:INFO:             fastapi: Not installed
2024-03-06 09:10:06,258:INFO:             uvicorn: Not installed
2024-03-06 09:10:06,258:INFO:              m2cgen: Not installed
2024-03-06 09:10:06,258:INFO:           evidently: Not installed
2024-03-06 09:10:06,258:INFO:               fugue: Not installed
2024-03-06 09:10:06,258:INFO:           streamlit: Not installed
2024-03-06 09:10:06,258:INFO:             prophet: Not installed
2024-03-06 09:10:06,258:INFO:None
2024-03-06 09:10:06,258:INFO:Set up data.
2024-03-06 09:10:33,751:INFO:Set up folding strategy.
2024-03-06 09:10:33,751:INFO:Set up train/test split.
2024-03-06 09:10:33,935:INFO:Set up index.
2024-03-06 09:10:33,968:INFO:Assigning column types.
2024-03-06 09:10:34,237:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-03-06 09:10:34,237:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-06 09:10:34,237:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 09:10:34,237:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 09:10:34,535:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 09:10:34,571:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 09:10:34,571:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:34,571:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:34,571:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-06 09:10:34,571:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 09:10:34,585:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 09:10:34,868:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 09:10:34,918:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 09:10:34,918:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:34,918:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:34,918:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-03-06 09:10:34,918:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 09:10:34,918:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 09:10:35,218:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 09:10:35,252:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 09:10:35,252:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:35,252:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:35,252:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 09:10:35,252:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 09:10:35,569:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 09:10:35,602:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 09:10:35,602:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:35,602:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:35,602:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-03-06 09:10:35,602:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 09:10:35,902:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 09:10:35,936:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 09:10:35,936:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:35,952:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:35,952:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 09:10:36,252:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 09:10:36,286:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 09:10:36,286:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:36,286:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:36,286:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-03-06 09:10:36,585:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 09:10:36,619:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 09:10:36,619:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:36,619:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:36,919:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 09:10:36,952:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 09:10:36,952:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:36,952:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:36,952:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-03-06 09:10:37,269:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 09:10:37,303:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:37,303:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:37,620:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 09:10:37,653:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:37,653:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:37,653:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-03-06 09:10:37,986:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:38,003:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:38,336:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:38,336:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:38,336:INFO:Preparing preprocessing pipeline...
2024-03-06 09:10:38,336:INFO:Set up simple imputation.
2024-03-06 09:10:38,837:INFO:Finished creating preprocessing pipeline.
2024-03-06 09:10:38,837:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\dell\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2024-03-06 09:10:38,837:INFO:Creating final display dataframe.
2024-03-06 09:10:39,972:INFO:Setup _display_container:                     Description             Value
0                    Session id              5767
1                        Target           Current
2                   Target type        Regression
3           Original data shape     (1257130, 13)
4        Transformed data shape     (1257130, 13)
5   Transformed train set shape      (879991, 13)
6    Transformed test set shape      (377139, 13)
7              Numeric features                12
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   TimeSeriesSplit
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              b880
2024-03-06 09:10:40,337:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:40,337:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:40,670:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 09:10:40,670:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 09:10:40,670:WARNING:C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\metrics.py:51: FutureWarning: The `needs_threshold` and `needs_proba` parameter are deprecated in version 1.4 and will be removed in 1.6. You can either let `response_method` be `None` or set it to `predict` to preserve the same behaviour.
  warnings.warn(

2024-03-06 09:10:40,670:INFO:setup() successfully completed in 34.41s...............
2024-03-06 09:10:40,670:INFO:Initializing compare_models()
2024-03-06 09:10:40,670:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=7, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 7, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-03-06 09:10:40,670:INFO:Checking exceptions
2024-03-06 09:10:40,808:INFO:Preparing display monitor
2024-03-06 09:10:40,820:INFO:Initializing Linear Regression
2024-03-06 09:10:40,820:INFO:Total runtime is 0.0 minutes
2024-03-06 09:10:40,838:INFO:SubProcess create_model() called ==================================
2024-03-06 09:10:40,838:INFO:Initializing create_model()
2024-03-06 09:10:40,838:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=lr, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:10:40,838:INFO:Checking exceptions
2024-03-06 09:10:40,838:INFO:Importing libraries
2024-03-06 09:10:40,838:INFO:Copying training dataset
2024-03-06 09:10:41,187:INFO:Defining folds
2024-03-06 09:10:41,187:INFO:Declaring metric variables
2024-03-06 09:10:41,187:INFO:Importing untrained model
2024-03-06 09:10:41,204:INFO:Linear Regression Imported successfully
2024-03-06 09:10:41,207:INFO:Starting cross validation
2024-03-06 09:10:41,211:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:10:50,695:INFO:Calculating mean and std
2024-03-06 09:10:50,695:INFO:Creating metrics dataframe
2024-03-06 09:10:50,700:INFO:Uploading results into container
2024-03-06 09:10:50,700:INFO:Uploading model into container now
2024-03-06 09:10:50,701:INFO:_master_model_container: 1
2024-03-06 09:10:50,701:INFO:_display_container: 2
2024-03-06 09:10:50,701:INFO:LinearRegression(n_jobs=-1)
2024-03-06 09:10:50,701:INFO:create_model() successfully completed......................................
2024-03-06 09:10:50,951:INFO:SubProcess create_model() end ==================================
2024-03-06 09:10:50,951:INFO:Creating metrics dataframe
2024-03-06 09:10:50,958:INFO:Initializing Lasso Regression
2024-03-06 09:10:50,958:INFO:Total runtime is 0.1689666986465454 minutes
2024-03-06 09:10:50,962:INFO:SubProcess create_model() called ==================================
2024-03-06 09:10:50,962:INFO:Initializing create_model()
2024-03-06 09:10:50,962:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=lasso, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:10:50,963:INFO:Checking exceptions
2024-03-06 09:10:50,963:INFO:Importing libraries
2024-03-06 09:10:50,963:INFO:Copying training dataset
2024-03-06 09:10:51,308:INFO:Defining folds
2024-03-06 09:10:51,308:INFO:Declaring metric variables
2024-03-06 09:10:51,325:INFO:Importing untrained model
2024-03-06 09:10:51,328:INFO:Lasso Regression Imported successfully
2024-03-06 09:10:51,328:INFO:Starting cross validation
2024-03-06 09:10:51,328:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:10:52,682:INFO:Calculating mean and std
2024-03-06 09:10:52,682:INFO:Creating metrics dataframe
2024-03-06 09:10:52,682:INFO:Uploading results into container
2024-03-06 09:10:52,682:INFO:Uploading model into container now
2024-03-06 09:10:52,682:INFO:_master_model_container: 2
2024-03-06 09:10:52,682:INFO:_display_container: 2
2024-03-06 09:10:52,682:INFO:Lasso(random_state=5767)
2024-03-06 09:10:52,682:INFO:create_model() successfully completed......................................
2024-03-06 09:10:52,843:INFO:SubProcess create_model() end ==================================
2024-03-06 09:10:52,844:INFO:Creating metrics dataframe
2024-03-06 09:10:52,845:INFO:Initializing Ridge Regression
2024-03-06 09:10:52,845:INFO:Total runtime is 0.2004152536392212 minutes
2024-03-06 09:10:52,845:INFO:SubProcess create_model() called ==================================
2024-03-06 09:10:52,845:INFO:Initializing create_model()
2024-03-06 09:10:52,845:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=ridge, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:10:52,845:INFO:Checking exceptions
2024-03-06 09:10:52,845:INFO:Importing libraries
2024-03-06 09:10:52,845:INFO:Copying training dataset
2024-03-06 09:10:53,192:INFO:Defining folds
2024-03-06 09:10:53,192:INFO:Declaring metric variables
2024-03-06 09:10:53,206:INFO:Importing untrained model
2024-03-06 09:10:53,211:INFO:Ridge Regression Imported successfully
2024-03-06 09:10:53,211:INFO:Starting cross validation
2024-03-06 09:10:53,211:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:10:53,433:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.28823e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 09:10:53,493:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.1328e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 09:10:53,581:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=7.00956e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 09:10:53,634:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.25128e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 09:10:53,710:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.2704e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 09:10:53,810:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.58744e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 09:10:53,843:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.00227e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 09:10:53,926:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.58174e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 09:10:54,026:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26418e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 09:10:54,059:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.04342e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 09:10:54,213:INFO:Calculating mean and std
2024-03-06 09:10:54,213:INFO:Creating metrics dataframe
2024-03-06 09:10:54,213:INFO:Uploading results into container
2024-03-06 09:10:54,213:INFO:Uploading model into container now
2024-03-06 09:10:54,213:INFO:_master_model_container: 3
2024-03-06 09:10:54,213:INFO:_display_container: 2
2024-03-06 09:10:54,213:INFO:Ridge(random_state=5767)
2024-03-06 09:10:54,213:INFO:create_model() successfully completed......................................
2024-03-06 09:10:54,405:INFO:SubProcess create_model() end ==================================
2024-03-06 09:10:54,405:INFO:Creating metrics dataframe
2024-03-06 09:10:54,411:INFO:Initializing Elastic Net
2024-03-06 09:10:54,411:INFO:Total runtime is 0.22651771704355875 minutes
2024-03-06 09:10:54,411:INFO:SubProcess create_model() called ==================================
2024-03-06 09:10:54,411:INFO:Initializing create_model()
2024-03-06 09:10:54,411:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=en, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:10:54,411:INFO:Checking exceptions
2024-03-06 09:10:54,411:INFO:Importing libraries
2024-03-06 09:10:54,411:INFO:Copying training dataset
2024-03-06 09:10:54,763:INFO:Defining folds
2024-03-06 09:10:54,763:INFO:Declaring metric variables
2024-03-06 09:10:54,763:INFO:Importing untrained model
2024-03-06 09:10:54,774:INFO:Elastic Net Imported successfully
2024-03-06 09:10:54,778:INFO:Starting cross validation
2024-03-06 09:10:54,778:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:10:56,173:INFO:Calculating mean and std
2024-03-06 09:10:56,173:INFO:Creating metrics dataframe
2024-03-06 09:10:56,176:INFO:Uploading results into container
2024-03-06 09:10:56,176:INFO:Uploading model into container now
2024-03-06 09:10:56,176:INFO:_master_model_container: 4
2024-03-06 09:10:56,176:INFO:_display_container: 2
2024-03-06 09:10:56,176:INFO:ElasticNet(random_state=5767)
2024-03-06 09:10:56,176:INFO:create_model() successfully completed......................................
2024-03-06 09:10:56,336:INFO:SubProcess create_model() end ==================================
2024-03-06 09:10:56,336:INFO:Creating metrics dataframe
2024-03-06 09:10:56,345:INFO:Initializing Least Angle Regression
2024-03-06 09:10:56,345:INFO:Total runtime is 0.2587436517079671 minutes
2024-03-06 09:10:56,345:INFO:SubProcess create_model() called ==================================
2024-03-06 09:10:56,345:INFO:Initializing create_model()
2024-03-06 09:10:56,345:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=lar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:10:56,345:INFO:Checking exceptions
2024-03-06 09:10:56,345:INFO:Importing libraries
2024-03-06 09:10:56,345:INFO:Copying training dataset
2024-03-06 09:10:56,677:INFO:Defining folds
2024-03-06 09:10:56,677:INFO:Declaring metric variables
2024-03-06 09:10:56,677:INFO:Importing untrained model
2024-03-06 09:10:56,696:INFO:Least Angle Regression Imported successfully
2024-03-06 09:10:56,697:INFO:Starting cross validation
2024-03-06 09:10:56,697:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:10:57,712:INFO:Calculating mean and std
2024-03-06 09:10:57,713:INFO:Creating metrics dataframe
2024-03-06 09:10:57,713:INFO:Uploading results into container
2024-03-06 09:10:57,713:INFO:Uploading model into container now
2024-03-06 09:10:57,713:INFO:_master_model_container: 5
2024-03-06 09:10:57,713:INFO:_display_container: 2
2024-03-06 09:10:57,713:INFO:Lars(random_state=5767)
2024-03-06 09:10:57,713:INFO:create_model() successfully completed......................................
2024-03-06 09:10:57,877:INFO:SubProcess create_model() end ==================================
2024-03-06 09:10:57,877:INFO:Creating metrics dataframe
2024-03-06 09:10:57,886:INFO:Initializing Lasso Least Angle Regression
2024-03-06 09:10:57,886:INFO:Total runtime is 0.28443211714426675 minutes
2024-03-06 09:10:57,895:INFO:SubProcess create_model() called ==================================
2024-03-06 09:10:57,896:INFO:Initializing create_model()
2024-03-06 09:10:57,896:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=llar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:10:57,896:INFO:Checking exceptions
2024-03-06 09:10:57,896:INFO:Importing libraries
2024-03-06 09:10:57,896:INFO:Copying training dataset
2024-03-06 09:10:58,261:INFO:Defining folds
2024-03-06 09:10:58,261:INFO:Declaring metric variables
2024-03-06 09:10:58,261:INFO:Importing untrained model
2024-03-06 09:10:58,270:INFO:Lasso Least Angle Regression Imported successfully
2024-03-06 09:10:58,270:INFO:Starting cross validation
2024-03-06 09:10:58,278:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:10:59,323:INFO:Calculating mean and std
2024-03-06 09:10:59,323:INFO:Creating metrics dataframe
2024-03-06 09:10:59,323:INFO:Uploading results into container
2024-03-06 09:10:59,323:INFO:Uploading model into container now
2024-03-06 09:10:59,323:INFO:_master_model_container: 6
2024-03-06 09:10:59,323:INFO:_display_container: 2
2024-03-06 09:10:59,327:INFO:LassoLars(random_state=5767)
2024-03-06 09:10:59,328:INFO:create_model() successfully completed......................................
2024-03-06 09:10:59,478:INFO:SubProcess create_model() end ==================================
2024-03-06 09:10:59,478:INFO:Creating metrics dataframe
2024-03-06 09:10:59,486:INFO:Initializing Orthogonal Matching Pursuit
2024-03-06 09:10:59,486:INFO:Total runtime is 0.3110982020696004 minutes
2024-03-06 09:10:59,486:INFO:SubProcess create_model() called ==================================
2024-03-06 09:10:59,486:INFO:Initializing create_model()
2024-03-06 09:10:59,486:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=omp, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:10:59,486:INFO:Checking exceptions
2024-03-06 09:10:59,486:INFO:Importing libraries
2024-03-06 09:10:59,486:INFO:Copying training dataset
2024-03-06 09:10:59,828:INFO:Defining folds
2024-03-06 09:10:59,828:INFO:Declaring metric variables
2024-03-06 09:10:59,847:INFO:Importing untrained model
2024-03-06 09:10:59,848:INFO:Orthogonal Matching Pursuit Imported successfully
2024-03-06 09:10:59,848:INFO:Starting cross validation
2024-03-06 09:10:59,848:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:11:00,900:INFO:Calculating mean and std
2024-03-06 09:11:00,900:INFO:Creating metrics dataframe
2024-03-06 09:11:00,900:INFO:Uploading results into container
2024-03-06 09:11:00,900:INFO:Uploading model into container now
2024-03-06 09:11:00,900:INFO:_master_model_container: 7
2024-03-06 09:11:00,900:INFO:_display_container: 2
2024-03-06 09:11:00,900:INFO:OrthogonalMatchingPursuit()
2024-03-06 09:11:00,900:INFO:create_model() successfully completed......................................
2024-03-06 09:11:01,062:INFO:SubProcess create_model() end ==================================
2024-03-06 09:11:01,062:INFO:Creating metrics dataframe
2024-03-06 09:11:01,078:INFO:Initializing Bayesian Ridge
2024-03-06 09:11:01,078:INFO:Total runtime is 0.33761963446935017 minutes
2024-03-06 09:11:01,083:INFO:SubProcess create_model() called ==================================
2024-03-06 09:11:01,083:INFO:Initializing create_model()
2024-03-06 09:11:01,083:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=br, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:11:01,083:INFO:Checking exceptions
2024-03-06 09:11:01,083:INFO:Importing libraries
2024-03-06 09:11:01,083:INFO:Copying training dataset
2024-03-06 09:11:01,445:INFO:Defining folds
2024-03-06 09:11:01,445:INFO:Declaring metric variables
2024-03-06 09:11:01,461:INFO:Importing untrained model
2024-03-06 09:11:01,464:INFO:Bayesian Ridge Imported successfully
2024-03-06 09:11:01,464:INFO:Starting cross validation
2024-03-06 09:11:01,464:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:11:02,870:INFO:Calculating mean and std
2024-03-06 09:11:02,870:INFO:Creating metrics dataframe
2024-03-06 09:11:02,870:INFO:Uploading results into container
2024-03-06 09:11:02,870:INFO:Uploading model into container now
2024-03-06 09:11:02,870:INFO:_master_model_container: 8
2024-03-06 09:11:02,870:INFO:_display_container: 2
2024-03-06 09:11:02,870:INFO:BayesianRidge()
2024-03-06 09:11:02,870:INFO:create_model() successfully completed......................................
2024-03-06 09:11:03,045:INFO:SubProcess create_model() end ==================================
2024-03-06 09:11:03,045:INFO:Creating metrics dataframe
2024-03-06 09:11:03,049:INFO:Initializing Passive Aggressive Regressor
2024-03-06 09:11:03,049:INFO:Total runtime is 0.37048475742340087 minutes
2024-03-06 09:11:03,049:INFO:SubProcess create_model() called ==================================
2024-03-06 09:11:03,049:INFO:Initializing create_model()
2024-03-06 09:11:03,049:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=par, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:11:03,049:INFO:Checking exceptions
2024-03-06 09:11:03,049:INFO:Importing libraries
2024-03-06 09:11:03,049:INFO:Copying training dataset
2024-03-06 09:11:03,428:INFO:Defining folds
2024-03-06 09:11:03,428:INFO:Declaring metric variables
2024-03-06 09:11:03,428:INFO:Importing untrained model
2024-03-06 09:11:03,446:INFO:Passive Aggressive Regressor Imported successfully
2024-03-06 09:11:03,448:INFO:Starting cross validation
2024-03-06 09:11:03,448:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:11:06,422:INFO:Calculating mean and std
2024-03-06 09:11:06,422:INFO:Creating metrics dataframe
2024-03-06 09:11:06,422:INFO:Uploading results into container
2024-03-06 09:11:06,422:INFO:Uploading model into container now
2024-03-06 09:11:06,422:INFO:_master_model_container: 9
2024-03-06 09:11:06,422:INFO:_display_container: 2
2024-03-06 09:11:06,422:INFO:PassiveAggressiveRegressor(random_state=5767)
2024-03-06 09:11:06,422:INFO:create_model() successfully completed......................................
2024-03-06 09:11:06,581:INFO:SubProcess create_model() end ==================================
2024-03-06 09:11:06,581:INFO:Creating metrics dataframe
2024-03-06 09:11:06,581:INFO:Initializing Huber Regressor
2024-03-06 09:11:06,581:INFO:Total runtime is 0.4293421785036723 minutes
2024-03-06 09:11:06,591:INFO:SubProcess create_model() called ==================================
2024-03-06 09:11:06,591:INFO:Initializing create_model()
2024-03-06 09:11:06,591:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=huber, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:11:06,591:INFO:Checking exceptions
2024-03-06 09:11:06,591:INFO:Importing libraries
2024-03-06 09:11:06,591:INFO:Copying training dataset
2024-03-06 09:11:06,929:INFO:Defining folds
2024-03-06 09:11:06,929:INFO:Declaring metric variables
2024-03-06 09:11:06,945:INFO:Importing untrained model
2024-03-06 09:11:06,951:INFO:Huber Regressor Imported successfully
2024-03-06 09:11:06,980:INFO:Starting cross validation
2024-03-06 09:11:06,982:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:11:10,884:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 09:11:16,352:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 09:11:21,720:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 09:11:24,220:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 09:11:28,873:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 09:11:31,854:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 09:11:34,492:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 09:11:39,460:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 09:11:42,581:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 09:11:42,750:INFO:Calculating mean and std
2024-03-06 09:11:42,750:INFO:Creating metrics dataframe
2024-03-06 09:11:42,750:INFO:Uploading results into container
2024-03-06 09:11:42,750:INFO:Uploading model into container now
2024-03-06 09:11:42,750:INFO:_master_model_container: 10
2024-03-06 09:11:42,750:INFO:_display_container: 2
2024-03-06 09:11:42,750:INFO:HuberRegressor()
2024-03-06 09:11:42,750:INFO:create_model() successfully completed......................................
2024-03-06 09:11:42,914:INFO:SubProcess create_model() end ==================================
2024-03-06 09:11:42,914:INFO:Creating metrics dataframe
2024-03-06 09:11:42,914:INFO:Initializing K Neighbors Regressor
2024-03-06 09:11:42,914:INFO:Total runtime is 1.0348925550778707 minutes
2024-03-06 09:11:42,931:INFO:SubProcess create_model() called ==================================
2024-03-06 09:11:42,931:INFO:Initializing create_model()
2024-03-06 09:11:42,931:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=knn, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:11:42,931:INFO:Checking exceptions
2024-03-06 09:11:42,932:INFO:Importing libraries
2024-03-06 09:11:42,932:INFO:Copying training dataset
2024-03-06 09:11:43,278:INFO:Defining folds
2024-03-06 09:11:43,278:INFO:Declaring metric variables
2024-03-06 09:11:43,278:INFO:Importing untrained model
2024-03-06 09:11:43,287:INFO:K Neighbors Regressor Imported successfully
2024-03-06 09:11:43,287:INFO:Starting cross validation
2024-03-06 09:11:43,294:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:12:15,351:INFO:Calculating mean and std
2024-03-06 09:12:15,351:INFO:Creating metrics dataframe
2024-03-06 09:12:15,351:INFO:Uploading results into container
2024-03-06 09:12:15,351:INFO:Uploading model into container now
2024-03-06 09:12:15,351:INFO:_master_model_container: 11
2024-03-06 09:12:15,351:INFO:_display_container: 2
2024-03-06 09:12:15,351:INFO:KNeighborsRegressor(n_jobs=-1)
2024-03-06 09:12:15,351:INFO:create_model() successfully completed......................................
2024-03-06 09:12:15,520:INFO:SubProcess create_model() end ==================================
2024-03-06 09:12:15,521:INFO:Creating metrics dataframe
2024-03-06 09:12:15,527:INFO:Initializing Decision Tree Regressor
2024-03-06 09:12:15,527:INFO:Total runtime is 1.5784380118052166 minutes
2024-03-06 09:12:15,527:INFO:SubProcess create_model() called ==================================
2024-03-06 09:12:15,527:INFO:Initializing create_model()
2024-03-06 09:12:15,527:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=dt, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:12:15,527:INFO:Checking exceptions
2024-03-06 09:12:15,527:INFO:Importing libraries
2024-03-06 09:12:15,527:INFO:Copying training dataset
2024-03-06 09:12:15,876:INFO:Defining folds
2024-03-06 09:12:15,876:INFO:Declaring metric variables
2024-03-06 09:12:15,894:INFO:Importing untrained model
2024-03-06 09:12:15,895:INFO:Decision Tree Regressor Imported successfully
2024-03-06 09:12:15,899:INFO:Starting cross validation
2024-03-06 09:12:15,899:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:12:34,909:INFO:Calculating mean and std
2024-03-06 09:12:34,909:INFO:Creating metrics dataframe
2024-03-06 09:12:34,909:INFO:Uploading results into container
2024-03-06 09:12:34,909:INFO:Uploading model into container now
2024-03-06 09:12:34,909:INFO:_master_model_container: 12
2024-03-06 09:12:34,909:INFO:_display_container: 2
2024-03-06 09:12:34,909:INFO:DecisionTreeRegressor(random_state=5767)
2024-03-06 09:12:34,909:INFO:create_model() successfully completed......................................
2024-03-06 09:12:35,071:INFO:SubProcess create_model() end ==================================
2024-03-06 09:12:35,071:INFO:Creating metrics dataframe
2024-03-06 09:12:35,081:INFO:Initializing Random Forest Regressor
2024-03-06 09:12:35,081:INFO:Total runtime is 1.9043367822964987 minutes
2024-03-06 09:12:35,082:INFO:SubProcess create_model() called ==================================
2024-03-06 09:12:35,082:INFO:Initializing create_model()
2024-03-06 09:12:35,082:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=rf, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:12:35,082:INFO:Checking exceptions
2024-03-06 09:12:35,082:INFO:Importing libraries
2024-03-06 09:12:35,082:INFO:Copying training dataset
2024-03-06 09:12:35,447:INFO:Defining folds
2024-03-06 09:12:35,447:INFO:Declaring metric variables
2024-03-06 09:12:35,447:INFO:Importing untrained model
2024-03-06 09:12:35,463:INFO:Random Forest Regressor Imported successfully
2024-03-06 09:12:35,466:INFO:Starting cross validation
2024-03-06 09:12:35,466:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:19:45,578:WARNING:create_model() for rf raised an exception or returned all 0.0, trying without fit_kwargs:
2024-03-06 09:19:45,603:WARNING:Traceback (most recent call last):
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 430, in cross_validate
    results = parallel(
              ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 567, in wrap_future_result
    return future.result(timeout=timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\concurrent\futures\_base.py", line 449, in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\concurrent\futures\_base.py", line 401, in __get_result
    raise self._exception
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 6.10 MiB for an array with shape (799992,) and data type int64

2024-03-06 09:19:45,628:INFO:Initializing create_model()
2024-03-06 09:19:45,628:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=rf, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:19:45,629:INFO:Checking exceptions
2024-03-06 09:19:45,632:INFO:Importing libraries
2024-03-06 09:19:45,636:INFO:Copying training dataset
2024-03-06 09:19:46,530:INFO:Defining folds
2024-03-06 09:19:46,530:INFO:Declaring metric variables
2024-03-06 09:19:46,578:INFO:Importing untrained model
2024-03-06 09:19:46,579:INFO:Random Forest Regressor Imported successfully
2024-03-06 09:19:46,579:INFO:Starting cross validation
2024-03-06 09:19:46,609:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:27:45,056:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:1011: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\metrics\_scorer.py", line 137, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\metrics\_scorer.py", line 345, in _score
    y_pred = method_caller(
             ^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\metrics\_scorer.py", line 87, in _cached_call
    result, _ = _get_response_values(
                ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\_response.py", line 238, in _get_response_values
    y_pred, pos_label = prediction_method(X), None
                        ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 328, in predict
    y = self.steps[-1][-1].predict(X, **params)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 1077, in predict
    Parallel(n_jobs=n_jobs, verbose=self.verbose, require="sharedmem")(
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 731, in _accumulate_prediction
    prediction = predict(X, check_input=False)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 530, in predict
    proba = self.tree_.predict(X)
            ^^^^^^^^^^^^^^^^^^^^^
  File "sklearn\\tree\\_tree.pyx", line 970, in sklearn.tree._tree.Tree.predict
  File "sklearn\\tree\\_tree.pyx", line 972, in sklearn.tree._tree.Tree.predict
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 625. KiB for an array with shape (79999, 1, 1) and data type float64

  warnings.warn(

2024-03-06 09:27:46,267:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
7 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 16777216 bytes

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 4194304 bytes

--------------------------------------------------------------------------------
2 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 67108864 bytes

--------------------------------------------------------------------------------
3 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 33554432 bytes

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-03-06 09:27:46,305:INFO:Calculating mean and std
2024-03-06 09:27:46,395:INFO:Creating metrics dataframe
2024-03-06 09:27:46,518:INFO:Uploading results into container
2024-03-06 09:27:46,529:INFO:Uploading model into container now
2024-03-06 09:27:46,541:INFO:_master_model_container: 13
2024-03-06 09:27:46,541:INFO:_display_container: 2
2024-03-06 09:27:46,574:INFO:RandomForestRegressor(n_jobs=-1, random_state=5767)
2024-03-06 09:27:46,574:INFO:create_model() successfully completed......................................
2024-03-06 09:27:49,034:INFO:SubProcess create_model() end ==================================
2024-03-06 09:27:49,034:INFO:Creating metrics dataframe
2024-03-06 09:27:49,074:INFO:Initializing Extra Trees Regressor
2024-03-06 09:27:49,075:INFO:Total runtime is 17.13756630420685 minutes
2024-03-06 09:27:49,082:INFO:SubProcess create_model() called ==================================
2024-03-06 09:27:49,083:INFO:Initializing create_model()
2024-03-06 09:27:49,084:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=et, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:27:49,084:INFO:Checking exceptions
2024-03-06 09:27:49,084:INFO:Importing libraries
2024-03-06 09:27:49,085:INFO:Copying training dataset
2024-03-06 09:27:50,502:INFO:Defining folds
2024-03-06 09:27:50,508:INFO:Declaring metric variables
2024-03-06 09:27:50,516:INFO:Importing untrained model
2024-03-06 09:27:50,523:INFO:Extra Trees Regressor Imported successfully
2024-03-06 09:27:50,540:INFO:Starting cross validation
2024-03-06 09:27:50,542:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:29:36,352:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:1011: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to 0.0. Details: 
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\metrics\_scorer.py", line 137, in __call__
    score = scorer._score(
            ^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py", line 1198, in r2_score
    weight * (y_true - np.average(y_true, axis=0, weights=sample_weight)) ** 2
              ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 312. KiB for an array with shape (79999, 1) and data type float32

  warnings.warn(

2024-03-06 09:31:41,540:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
9 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
3 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 33554432 bytes

--------------------------------------------------------------------------------
4 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 67108864 bytes

--------------------------------------------------------------------------------
2 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 134217728 bytes

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-03-06 09:31:41,585:INFO:Calculating mean and std
2024-03-06 09:31:41,668:INFO:Creating metrics dataframe
2024-03-06 09:31:41,765:INFO:Uploading results into container
2024-03-06 09:31:41,773:INFO:Uploading model into container now
2024-03-06 09:31:41,786:INFO:_master_model_container: 14
2024-03-06 09:31:41,787:INFO:_display_container: 2
2024-03-06 09:31:41,802:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=5767)
2024-03-06 09:31:41,802:INFO:create_model() successfully completed......................................
2024-03-06 09:31:44,305:INFO:SubProcess create_model() end ==================================
2024-03-06 09:31:44,305:INFO:Creating metrics dataframe
2024-03-06 09:31:44,323:INFO:Initializing AdaBoost Regressor
2024-03-06 09:31:44,323:INFO:Total runtime is 21.058380202452344 minutes
2024-03-06 09:31:44,323:INFO:SubProcess create_model() called ==================================
2024-03-06 09:31:44,323:INFO:Initializing create_model()
2024-03-06 09:31:44,323:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=ada, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:31:44,323:INFO:Checking exceptions
2024-03-06 09:31:44,323:INFO:Importing libraries
2024-03-06 09:31:44,323:INFO:Copying training dataset
2024-03-06 09:31:44,860:INFO:Defining folds
2024-03-06 09:31:44,860:INFO:Declaring metric variables
2024-03-06 09:31:44,875:INFO:Importing untrained model
2024-03-06 09:31:44,877:INFO:AdaBoost Regressor Imported successfully
2024-03-06 09:31:44,877:INFO:Starting cross validation
2024-03-06 09:31:44,888:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:33:06,623:INFO:Calculating mean and std
2024-03-06 09:33:06,623:INFO:Creating metrics dataframe
2024-03-06 09:33:06,623:INFO:Uploading results into container
2024-03-06 09:33:06,632:INFO:Uploading model into container now
2024-03-06 09:33:06,632:INFO:_master_model_container: 15
2024-03-06 09:33:06,633:INFO:_display_container: 2
2024-03-06 09:33:06,633:INFO:AdaBoostRegressor(random_state=5767)
2024-03-06 09:33:06,633:INFO:create_model() successfully completed......................................
2024-03-06 09:33:06,804:INFO:SubProcess create_model() end ==================================
2024-03-06 09:33:06,804:INFO:Creating metrics dataframe
2024-03-06 09:33:06,817:INFO:Initializing Gradient Boosting Regressor
2024-03-06 09:33:06,817:INFO:Total runtime is 22.433280392487845 minutes
2024-03-06 09:33:06,820:INFO:SubProcess create_model() called ==================================
2024-03-06 09:33:06,821:INFO:Initializing create_model()
2024-03-06 09:33:06,821:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=gbr, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:33:06,821:INFO:Checking exceptions
2024-03-06 09:33:06,821:INFO:Importing libraries
2024-03-06 09:33:06,821:INFO:Copying training dataset
2024-03-06 09:33:07,251:INFO:Defining folds
2024-03-06 09:33:07,251:INFO:Declaring metric variables
2024-03-06 09:33:07,254:INFO:Importing untrained model
2024-03-06 09:33:07,256:INFO:Gradient Boosting Regressor Imported successfully
2024-03-06 09:33:07,256:INFO:Starting cross validation
2024-03-06 09:33:07,256:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:36:15,114:INFO:Calculating mean and std
2024-03-06 09:36:15,116:INFO:Creating metrics dataframe
2024-03-06 09:36:15,119:INFO:Uploading results into container
2024-03-06 09:36:15,120:INFO:Uploading model into container now
2024-03-06 09:36:15,120:INFO:_master_model_container: 16
2024-03-06 09:36:15,120:INFO:_display_container: 2
2024-03-06 09:36:15,121:INFO:GradientBoostingRegressor(random_state=5767)
2024-03-06 09:36:15,121:INFO:create_model() successfully completed......................................
2024-03-06 09:36:15,274:INFO:SubProcess create_model() end ==================================
2024-03-06 09:36:15,274:INFO:Creating metrics dataframe
2024-03-06 09:36:15,285:INFO:Initializing Extreme Gradient Boosting
2024-03-06 09:36:15,286:INFO:Total runtime is 25.574433199564616 minutes
2024-03-06 09:36:15,290:INFO:SubProcess create_model() called ==================================
2024-03-06 09:36:15,290:INFO:Initializing create_model()
2024-03-06 09:36:15,291:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=xgboost, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:36:15,291:INFO:Checking exceptions
2024-03-06 09:36:15,291:INFO:Importing libraries
2024-03-06 09:36:15,291:INFO:Copying training dataset
2024-03-06 09:36:15,667:INFO:Defining folds
2024-03-06 09:36:15,668:INFO:Declaring metric variables
2024-03-06 09:36:15,674:INFO:Importing untrained model
2024-03-06 09:36:15,677:INFO:Extreme Gradient Boosting Imported successfully
2024-03-06 09:36:15,682:INFO:Starting cross validation
2024-03-06 09:36:15,683:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:36:26,458:INFO:Calculating mean and std
2024-03-06 09:36:26,460:INFO:Creating metrics dataframe
2024-03-06 09:36:26,466:INFO:Uploading results into container
2024-03-06 09:36:26,467:INFO:Uploading model into container now
2024-03-06 09:36:26,467:INFO:_master_model_container: 17
2024-03-06 09:36:26,467:INFO:_display_container: 2
2024-03-06 09:36:26,469:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=5767, ...)
2024-03-06 09:36:26,469:INFO:create_model() successfully completed......................................
2024-03-06 09:36:26,620:INFO:SubProcess create_model() end ==================================
2024-03-06 09:36:26,620:INFO:Creating metrics dataframe
2024-03-06 09:36:26,633:INFO:Initializing Light Gradient Boosting Machine
2024-03-06 09:36:26,633:INFO:Total runtime is 25.76353837251663 minutes
2024-03-06 09:36:26,636:INFO:SubProcess create_model() called ==================================
2024-03-06 09:36:26,636:INFO:Initializing create_model()
2024-03-06 09:36:26,636:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=lightgbm, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:36:26,636:INFO:Checking exceptions
2024-03-06 09:36:26,636:INFO:Importing libraries
2024-03-06 09:36:26,636:INFO:Copying training dataset
2024-03-06 09:36:26,994:INFO:Defining folds
2024-03-06 09:36:26,995:INFO:Declaring metric variables
2024-03-06 09:36:26,999:INFO:Importing untrained model
2024-03-06 09:36:27,003:INFO:Light Gradient Boosting Machine Imported successfully
2024-03-06 09:36:27,009:INFO:Starting cross validation
2024-03-06 09:36:27,010:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:36:36,360:INFO:Calculating mean and std
2024-03-06 09:36:36,361:INFO:Creating metrics dataframe
2024-03-06 09:36:36,364:INFO:Uploading results into container
2024-03-06 09:36:36,365:INFO:Uploading model into container now
2024-03-06 09:36:36,365:INFO:_master_model_container: 18
2024-03-06 09:36:36,365:INFO:_display_container: 2
2024-03-06 09:36:36,366:INFO:LGBMRegressor(n_jobs=-1, random_state=5767)
2024-03-06 09:36:36,366:INFO:create_model() successfully completed......................................
2024-03-06 09:36:36,569:INFO:SubProcess create_model() end ==================================
2024-03-06 09:36:36,569:INFO:Creating metrics dataframe
2024-03-06 09:36:36,582:INFO:Initializing CatBoost Regressor
2024-03-06 09:36:36,582:INFO:Total runtime is 25.92935717900594 minutes
2024-03-06 09:36:36,586:INFO:SubProcess create_model() called ==================================
2024-03-06 09:36:36,587:INFO:Initializing create_model()
2024-03-06 09:36:36,587:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=catboost, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:36:36,587:INFO:Checking exceptions
2024-03-06 09:36:36,587:INFO:Importing libraries
2024-03-06 09:36:36,587:INFO:Copying training dataset
2024-03-06 09:36:37,009:INFO:Defining folds
2024-03-06 09:36:37,009:INFO:Declaring metric variables
2024-03-06 09:36:37,012:INFO:Importing untrained model
2024-03-06 09:36:37,027:INFO:CatBoost Regressor Imported successfully
2024-03-06 09:36:37,031:INFO:Starting cross validation
2024-03-06 09:36:37,032:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:40:11,816:INFO:Calculating mean and std
2024-03-06 09:40:11,818:INFO:Creating metrics dataframe
2024-03-06 09:40:11,821:INFO:Uploading results into container
2024-03-06 09:40:11,822:INFO:Uploading model into container now
2024-03-06 09:40:11,822:INFO:_master_model_container: 19
2024-03-06 09:40:11,822:INFO:_display_container: 2
2024-03-06 09:40:11,822:INFO:<catboost.core.CatBoostRegressor object at 0x000001EE7E988F10>
2024-03-06 09:40:11,822:INFO:create_model() successfully completed......................................
2024-03-06 09:40:11,992:INFO:SubProcess create_model() end ==================================
2024-03-06 09:40:11,992:INFO:Creating metrics dataframe
2024-03-06 09:40:12,005:INFO:Initializing Dummy Regressor
2024-03-06 09:40:12,005:INFO:Total runtime is 29.519747122128805 minutes
2024-03-06 09:40:12,008:INFO:SubProcess create_model() called ==================================
2024-03-06 09:40:12,008:INFO:Initializing create_model()
2024-03-06 09:40:12,008:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=dummy, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EE122A79D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:40:12,009:INFO:Checking exceptions
2024-03-06 09:40:12,009:INFO:Importing libraries
2024-03-06 09:40:12,009:INFO:Copying training dataset
2024-03-06 09:40:12,384:INFO:Defining folds
2024-03-06 09:40:12,384:INFO:Declaring metric variables
2024-03-06 09:40:12,388:INFO:Importing untrained model
2024-03-06 09:40:12,391:INFO:Dummy Regressor Imported successfully
2024-03-06 09:40:12,395:INFO:Starting cross validation
2024-03-06 09:40:12,397:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 09:40:13,383:INFO:Calculating mean and std
2024-03-06 09:40:13,384:INFO:Creating metrics dataframe
2024-03-06 09:40:13,387:INFO:Uploading results into container
2024-03-06 09:40:13,388:INFO:Uploading model into container now
2024-03-06 09:40:13,389:INFO:_master_model_container: 20
2024-03-06 09:40:13,389:INFO:_display_container: 2
2024-03-06 09:40:13,389:INFO:DummyRegressor()
2024-03-06 09:40:13,389:INFO:create_model() successfully completed......................................
2024-03-06 09:40:13,559:INFO:SubProcess create_model() end ==================================
2024-03-06 09:40:13,559:INFO:Creating metrics dataframe
2024-03-06 09:40:13,581:INFO:Initializing create_model()
2024-03-06 09:40:13,581:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=<catboost.core.CatBoostRegressor object at 0x000001EE7E988F10>, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:40:13,581:INFO:Checking exceptions
2024-03-06 09:40:13,584:INFO:Importing libraries
2024-03-06 09:40:13,584:INFO:Copying training dataset
2024-03-06 09:40:13,972:INFO:Defining folds
2024-03-06 09:40:13,972:INFO:Declaring metric variables
2024-03-06 09:40:13,972:INFO:Importing untrained model
2024-03-06 09:40:13,973:INFO:Declaring custom model
2024-03-06 09:40:13,973:INFO:CatBoost Regressor Imported successfully
2024-03-06 09:40:13,973:INFO:Cross validation set to False
2024-03-06 09:40:13,973:INFO:Fitting Model
2024-03-06 09:41:02,035:INFO:<catboost.core.CatBoostRegressor object at 0x000001EE7E8D1E90>
2024-03-06 09:41:02,035:INFO:create_model() successfully completed......................................
2024-03-06 09:41:02,211:INFO:Initializing create_model()
2024-03-06 09:41:02,211:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=LGBMRegressor(n_jobs=-1, random_state=5767), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:41:02,211:INFO:Checking exceptions
2024-03-06 09:41:02,213:INFO:Importing libraries
2024-03-06 09:41:02,213:INFO:Copying training dataset
2024-03-06 09:41:02,601:INFO:Defining folds
2024-03-06 09:41:02,601:INFO:Declaring metric variables
2024-03-06 09:41:02,601:INFO:Importing untrained model
2024-03-06 09:41:02,601:INFO:Declaring custom model
2024-03-06 09:41:02,602:INFO:Light Gradient Boosting Machine Imported successfully
2024-03-06 09:41:02,602:INFO:Cross validation set to False
2024-03-06 09:41:02,602:INFO:Fitting Model
2024-03-06 09:41:02,998:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.004592 seconds.
2024-03-06 09:41:02,998:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-03-06 09:41:02,998:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-03-06 09:41:02,999:INFO:[LightGBM] [Info] Total Bins 2040
2024-03-06 09:41:02,999:INFO:[LightGBM] [Info] Number of data points in the train set: 879991, number of used features: 8
2024-03-06 09:41:03,003:INFO:[LightGBM] [Info] Start training from score 5.914811
2024-03-06 09:41:04,223:INFO:LGBMRegressor(n_jobs=-1, random_state=5767)
2024-03-06 09:41:04,224:INFO:create_model() successfully completed......................................
2024-03-06 09:41:04,438:INFO:Initializing create_model()
2024-03-06 09:41:04,438:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=5767, ...), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:41:04,438:INFO:Checking exceptions
2024-03-06 09:41:04,440:INFO:Importing libraries
2024-03-06 09:41:04,441:INFO:Copying training dataset
2024-03-06 09:41:04,839:INFO:Defining folds
2024-03-06 09:41:04,840:INFO:Declaring metric variables
2024-03-06 09:41:04,840:INFO:Importing untrained model
2024-03-06 09:41:04,840:INFO:Declaring custom model
2024-03-06 09:41:04,841:INFO:Extreme Gradient Boosting Imported successfully
2024-03-06 09:41:04,842:INFO:Cross validation set to False
2024-03-06 09:41:04,842:INFO:Fitting Model
2024-03-06 09:41:07,599:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=5767, ...)
2024-03-06 09:41:07,600:INFO:create_model() successfully completed......................................
2024-03-06 09:41:07,820:INFO:Initializing create_model()
2024-03-06 09:41:07,821:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=DecisionTreeRegressor(random_state=5767), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:41:07,821:INFO:Checking exceptions
2024-03-06 09:41:07,823:INFO:Importing libraries
2024-03-06 09:41:07,823:INFO:Copying training dataset
2024-03-06 09:41:08,213:INFO:Defining folds
2024-03-06 09:41:08,213:INFO:Declaring metric variables
2024-03-06 09:41:08,213:INFO:Importing untrained model
2024-03-06 09:41:08,213:INFO:Declaring custom model
2024-03-06 09:41:08,214:INFO:Decision Tree Regressor Imported successfully
2024-03-06 09:41:08,214:INFO:Cross validation set to False
2024-03-06 09:41:08,214:INFO:Fitting Model
2024-03-06 09:41:18,371:INFO:DecisionTreeRegressor(random_state=5767)
2024-03-06 09:41:18,371:INFO:create_model() successfully completed......................................
2024-03-06 09:41:18,526:INFO:Initializing create_model()
2024-03-06 09:41:18,526:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=KNeighborsRegressor(n_jobs=-1), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:41:18,527:INFO:Checking exceptions
2024-03-06 09:41:18,528:INFO:Importing libraries
2024-03-06 09:41:18,528:INFO:Copying training dataset
2024-03-06 09:41:18,870:INFO:Defining folds
2024-03-06 09:41:18,870:INFO:Declaring metric variables
2024-03-06 09:41:18,870:INFO:Importing untrained model
2024-03-06 09:41:18,870:INFO:Declaring custom model
2024-03-06 09:41:18,870:INFO:K Neighbors Regressor Imported successfully
2024-03-06 09:41:18,871:INFO:Cross validation set to False
2024-03-06 09:41:18,871:INFO:Fitting Model
2024-03-06 09:41:23,428:INFO:KNeighborsRegressor(n_jobs=-1)
2024-03-06 09:41:23,428:INFO:create_model() successfully completed......................................
2024-03-06 09:41:23,596:INFO:Initializing create_model()
2024-03-06 09:41:23,596:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=GradientBoostingRegressor(random_state=5767), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:41:23,596:INFO:Checking exceptions
2024-03-06 09:41:23,598:INFO:Importing libraries
2024-03-06 09:41:23,598:INFO:Copying training dataset
2024-03-06 09:41:23,961:INFO:Defining folds
2024-03-06 09:41:23,961:INFO:Declaring metric variables
2024-03-06 09:41:23,961:INFO:Importing untrained model
2024-03-06 09:41:23,961:INFO:Declaring custom model
2024-03-06 09:41:23,962:INFO:Gradient Boosting Regressor Imported successfully
2024-03-06 09:41:23,963:INFO:Cross validation set to False
2024-03-06 09:41:23,963:INFO:Fitting Model
2024-03-06 09:43:24,652:INFO:GradientBoostingRegressor(random_state=5767)
2024-03-06 09:43:24,652:INFO:create_model() successfully completed......................................
2024-03-06 09:43:24,855:INFO:Initializing create_model()
2024-03-06 09:43:24,856:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=RandomForestRegressor(n_jobs=-1, random_state=5767), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:43:24,856:INFO:Checking exceptions
2024-03-06 09:43:24,859:INFO:Importing libraries
2024-03-06 09:43:24,860:INFO:Copying training dataset
2024-03-06 09:43:25,263:INFO:Defining folds
2024-03-06 09:43:25,263:INFO:Declaring metric variables
2024-03-06 09:43:25,263:INFO:Importing untrained model
2024-03-06 09:43:25,263:INFO:Declaring custom model
2024-03-06 09:43:25,264:INFO:Random Forest Regressor Imported successfully
2024-03-06 09:43:25,264:INFO:Cross validation set to False
2024-03-06 09:43:25,264:INFO:Fitting Model
2024-03-06 09:46:58,096:INFO:RandomForestRegressor(n_jobs=-1, random_state=5767)
2024-03-06 09:46:58,097:INFO:create_model() successfully completed......................................
2024-03-06 09:46:58,329:INFO:_master_model_container: 20
2024-03-06 09:46:58,330:INFO:_display_container: 2
2024-03-06 09:46:58,332:INFO:[<catboost.core.CatBoostRegressor object at 0x000001EE7E8D1E90>, LGBMRegressor(n_jobs=-1, random_state=5767), XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=5767, ...), DecisionTreeRegressor(random_state=5767), KNeighborsRegressor(n_jobs=-1), GradientBoostingRegressor(random_state=5767), RandomForestRegressor(n_jobs=-1, random_state=5767)]
2024-03-06 09:46:58,332:INFO:compare_models() successfully completed......................................
2024-03-06 09:46:59,110:INFO:Initializing finalize_model()
2024-03-06 09:46:59,111:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=<catboost.core.CatBoostRegressor object at 0x000001EE7E8D1E90>, fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 09:46:59,111:INFO:Finalizing <catboost.core.CatBoostRegressor object at 0x000001EE7E8D1E90>
2024-03-06 09:46:59,358:INFO:Initializing create_model()
2024-03-06 09:46:59,358:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=<catboost.core.CatBoostRegressor object at 0x000001EE7E8D1E90>, fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:46:59,358:INFO:Checking exceptions
2024-03-06 09:46:59,360:INFO:Importing libraries
2024-03-06 09:46:59,360:INFO:Copying training dataset
2024-03-06 09:46:59,395:INFO:Defining folds
2024-03-06 09:46:59,396:INFO:Declaring metric variables
2024-03-06 09:46:59,396:INFO:Importing untrained model
2024-03-06 09:46:59,396:INFO:Declaring custom model
2024-03-06 09:46:59,396:INFO:CatBoost Regressor Imported successfully
2024-03-06 09:46:59,397:INFO:Cross validation set to False
2024-03-06 09:46:59,397:INFO:Fitting Model
2024-03-06 09:48:10,279:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x000001EE7E1C1A50>)])
2024-03-06 09:48:10,279:INFO:create_model() successfully completed......................................
2024-03-06 09:48:10,500:INFO:_master_model_container: 20
2024-03-06 09:48:10,500:INFO:_display_container: 2
2024-03-06 09:48:10,507:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x000001EE7E1C1A50>)])
2024-03-06 09:48:10,507:INFO:finalize_model() successfully completed......................................
2024-03-06 09:48:10,714:INFO:Initializing predict_model()
2024-03-06 09:48:10,714:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x000001EE7E1C1A50>)]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EDE1080>)
2024-03-06 09:48:10,715:INFO:Checking exceptions
2024-03-06 09:48:10,715:INFO:Preloading libraries
2024-03-06 09:48:10,717:INFO:Set up data.
2024-03-06 09:48:14,782:INFO:Set up index.
2024-03-06 09:48:15,276:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 09:48:15,334:INFO:Initializing finalize_model()
2024-03-06 09:48:15,334:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=LGBMRegressor(n_jobs=-1, random_state=5767), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 09:48:15,334:INFO:Finalizing LGBMRegressor(n_jobs=-1, random_state=5767)
2024-03-06 09:48:15,521:INFO:Initializing create_model()
2024-03-06 09:48:15,521:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=LGBMRegressor(n_jobs=-1, random_state=5767), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:48:15,521:INFO:Checking exceptions
2024-03-06 09:48:15,523:INFO:Importing libraries
2024-03-06 09:48:15,523:INFO:Copying training dataset
2024-03-06 09:48:15,557:INFO:Defining folds
2024-03-06 09:48:15,557:INFO:Declaring metric variables
2024-03-06 09:48:15,558:INFO:Importing untrained model
2024-03-06 09:48:15,558:INFO:Declaring custom model
2024-03-06 09:48:15,559:INFO:Light Gradient Boosting Machine Imported successfully
2024-03-06 09:48:15,559:INFO:Cross validation set to False
2024-03-06 09:48:15,559:INFO:Fitting Model
2024-03-06 09:48:16,109:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.028254 seconds.
2024-03-06 09:48:16,109:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-03-06 09:48:16,110:INFO:[LightGBM] [Info] Total Bins 2040
2024-03-06 09:48:16,111:INFO:[LightGBM] [Info] Number of data points in the train set: 1257130, number of used features: 8
2024-03-06 09:48:16,115:INFO:[LightGBM] [Info] Start training from score 5.909018
2024-03-06 09:48:17,568:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=5767))])
2024-03-06 09:48:17,568:INFO:create_model() successfully completed......................................
2024-03-06 09:48:17,801:INFO:_master_model_container: 20
2024-03-06 09:48:17,801:INFO:_display_container: 2
2024-03-06 09:48:17,812:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=5767))])
2024-03-06 09:48:17,812:INFO:finalize_model() successfully completed......................................
2024-03-06 09:48:18,018:INFO:Initializing predict_model()
2024-03-06 09:48:18,019:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=5767))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EDE1080>)
2024-03-06 09:48:18,019:INFO:Checking exceptions
2024-03-06 09:48:18,019:INFO:Preloading libraries
2024-03-06 09:48:18,021:INFO:Set up data.
2024-03-06 09:48:18,085:INFO:Set up index.
2024-03-06 09:48:18,753:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 09:48:18,793:INFO:Initializing finalize_model()
2024-03-06 09:48:18,793:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=5767, ...), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 09:48:18,794:INFO:Finalizing XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=5767, ...)
2024-03-06 09:48:18,984:INFO:Initializing create_model()
2024-03-06 09:48:18,984:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=5767, ...), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:48:18,984:INFO:Checking exceptions
2024-03-06 09:48:18,985:INFO:Importing libraries
2024-03-06 09:48:18,985:INFO:Copying training dataset
2024-03-06 09:48:19,025:INFO:Defining folds
2024-03-06 09:48:19,025:INFO:Declaring metric variables
2024-03-06 09:48:19,026:INFO:Importing untrained model
2024-03-06 09:48:19,026:INFO:Declaring custom model
2024-03-06 09:48:19,027:INFO:Extreme Gradient Boosting Imported successfully
2024-03-06 09:48:19,028:INFO:Cross validation set to False
2024-03-06 09:48:19,028:INFO:Fitting Model
2024-03-06 09:48:22,675:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent...
                              feature_types=None, gamma=None, grow_policy=None,
                              importance_type=None,
                              interaction_constraints=None, learning_rate=None,
                              max_bin=None, max_cat_threshold=None,
                              max_cat_to_onehot=None, max_delta_step=None,
                              max_depth=None, max_leaves=None,
                              min_child_weight=None, missing=nan,
                              monotone_constraints=None, multi_strategy=None,
                              n_estimators=None, n_jobs=-1,
                              num_parallel_tree=None, random_state=5767, ...))])
2024-03-06 09:48:22,675:INFO:create_model() successfully completed......................................
2024-03-06 09:48:22,941:INFO:_master_model_container: 20
2024-03-06 09:48:22,941:INFO:_display_container: 2
2024-03-06 09:48:22,952:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent...
                              feature_types=None, gamma=None, grow_policy=None,
                              importance_type=None,
                              interaction_constraints=None, learning_rate=None,
                              max_bin=None, max_cat_threshold=None,
                              max_cat_to_onehot=None, max_delta_step=None,
                              max_depth=None, max_leaves=None,
                              min_child_weight=None, missing=nan,
                              monotone_constraints=None, multi_strategy=None,
                              n_estimators=None, n_jobs=-1,
                              num_parallel_tree=None, random_state=5767, ...))])
2024-03-06 09:48:22,952:INFO:finalize_model() successfully completed......................................
2024-03-06 09:48:23,171:INFO:Initializing predict_model()
2024-03-06 09:48:23,172:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent...
                              feature_types=None, gamma=None, grow_policy=None,
                              importance_type=None,
                              interaction_constraints=None, learning_rate=None,
                              max_bin=None, max_cat_threshold=None,
                              max_cat_to_onehot=None, max_delta_step=None,
                              max_depth=None, max_leaves=None,
                              min_child_weight=None, missing=nan,
                              monotone_constraints=None, multi_strategy=None,
                              n_estimators=None, n_jobs=-1,
                              num_parallel_tree=None, random_state=5767, ...))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE13DCB240>)
2024-03-06 09:48:23,172:INFO:Checking exceptions
2024-03-06 09:48:23,172:INFO:Preloading libraries
2024-03-06 09:48:23,174:INFO:Set up data.
2024-03-06 09:48:23,243:INFO:Set up index.
2024-03-06 09:48:23,841:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 09:48:23,887:INFO:Initializing finalize_model()
2024-03-06 09:48:23,887:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=DecisionTreeRegressor(random_state=5767), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 09:48:23,887:INFO:Finalizing DecisionTreeRegressor(random_state=5767)
2024-03-06 09:48:24,155:INFO:Initializing create_model()
2024-03-06 09:48:24,155:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=DecisionTreeRegressor(random_state=5767), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:48:24,155:INFO:Checking exceptions
2024-03-06 09:48:24,157:INFO:Importing libraries
2024-03-06 09:48:24,157:INFO:Copying training dataset
2024-03-06 09:48:24,199:INFO:Defining folds
2024-03-06 09:48:24,200:INFO:Declaring metric variables
2024-03-06 09:48:24,200:INFO:Importing untrained model
2024-03-06 09:48:24,200:INFO:Declaring custom model
2024-03-06 09:48:24,200:INFO:Decision Tree Regressor Imported successfully
2024-03-06 09:48:24,201:INFO:Cross validation set to False
2024-03-06 09:48:24,201:INFO:Fitting Model
2024-03-06 09:48:41,656:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', DecisionTreeRegressor(random_state=5767))])
2024-03-06 09:48:41,656:INFO:create_model() successfully completed......................................
2024-03-06 09:48:41,865:INFO:_master_model_container: 20
2024-03-06 09:48:41,865:INFO:_display_container: 2
2024-03-06 09:48:41,869:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', DecisionTreeRegressor(random_state=5767))])
2024-03-06 09:48:41,869:INFO:finalize_model() successfully completed......................................
2024-03-06 09:48:42,045:INFO:Initializing predict_model()
2024-03-06 09:48:42,045:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', DecisionTreeRegressor(random_state=5767))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EDE1080>)
2024-03-06 09:48:42,045:INFO:Checking exceptions
2024-03-06 09:48:42,045:INFO:Preloading libraries
2024-03-06 09:48:42,047:INFO:Set up data.
2024-03-06 09:48:42,115:INFO:Set up index.
2024-03-06 09:48:42,549:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 09:48:42,599:INFO:Initializing finalize_model()
2024-03-06 09:48:42,600:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=KNeighborsRegressor(n_jobs=-1), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 09:48:42,600:INFO:Finalizing KNeighborsRegressor(n_jobs=-1)
2024-03-06 09:48:42,838:INFO:Initializing create_model()
2024-03-06 09:48:42,838:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=KNeighborsRegressor(n_jobs=-1), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:48:42,838:INFO:Checking exceptions
2024-03-06 09:48:42,839:INFO:Importing libraries
2024-03-06 09:48:42,840:INFO:Copying training dataset
2024-03-06 09:48:42,901:INFO:Defining folds
2024-03-06 09:48:42,902:INFO:Declaring metric variables
2024-03-06 09:48:42,902:INFO:Importing untrained model
2024-03-06 09:48:42,902:INFO:Declaring custom model
2024-03-06 09:48:42,903:INFO:K Neighbors Regressor Imported successfully
2024-03-06 09:48:42,903:INFO:Cross validation set to False
2024-03-06 09:48:42,903:INFO:Fitting Model
2024-03-06 09:48:51,588:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-06 09:48:51,589:INFO:create_model() successfully completed......................................
2024-03-06 09:48:51,777:INFO:_master_model_container: 20
2024-03-06 09:48:51,778:INFO:_display_container: 2
2024-03-06 09:48:51,785:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-06 09:48:51,785:INFO:finalize_model() successfully completed......................................
2024-03-06 09:48:52,003:INFO:Initializing predict_model()
2024-03-06 09:48:52,003:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE13DCB240>)
2024-03-06 09:48:52,003:INFO:Checking exceptions
2024-03-06 09:48:52,003:INFO:Preloading libraries
2024-03-06 09:48:52,006:INFO:Set up data.
2024-03-06 09:48:52,071:INFO:Set up index.
2024-03-06 09:49:37,662:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 09:49:37,715:INFO:Initializing finalize_model()
2024-03-06 09:49:37,715:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=GradientBoostingRegressor(random_state=5767), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 09:49:37,715:INFO:Finalizing GradientBoostingRegressor(random_state=5767)
2024-03-06 09:49:37,938:INFO:Initializing create_model()
2024-03-06 09:49:37,938:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=GradientBoostingRegressor(random_state=5767), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:49:37,939:INFO:Checking exceptions
2024-03-06 09:49:37,940:INFO:Importing libraries
2024-03-06 09:49:37,940:INFO:Copying training dataset
2024-03-06 09:49:37,980:INFO:Defining folds
2024-03-06 09:49:37,980:INFO:Declaring metric variables
2024-03-06 09:49:37,981:INFO:Importing untrained model
2024-03-06 09:49:37,981:INFO:Declaring custom model
2024-03-06 09:49:37,982:INFO:Gradient Boosting Regressor Imported successfully
2024-03-06 09:49:37,983:INFO:Cross validation set to False
2024-03-06 09:49:37,983:INFO:Fitting Model
2024-03-06 09:52:34,019:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=5767))])
2024-03-06 09:52:34,019:INFO:create_model() successfully completed......................................
2024-03-06 09:52:34,199:INFO:_master_model_container: 20
2024-03-06 09:52:34,199:INFO:_display_container: 2
2024-03-06 09:52:34,204:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=5767))])
2024-03-06 09:52:34,204:INFO:finalize_model() successfully completed......................................
2024-03-06 09:52:34,400:INFO:Initializing predict_model()
2024-03-06 09:52:34,400:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=5767))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE4EDE1080>)
2024-03-06 09:52:34,400:INFO:Checking exceptions
2024-03-06 09:52:34,400:INFO:Preloading libraries
2024-03-06 09:52:34,401:INFO:Set up data.
2024-03-06 09:52:34,464:INFO:Set up index.
2024-03-06 09:52:35,190:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 09:52:35,229:INFO:Initializing finalize_model()
2024-03-06 09:52:35,229:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=RandomForestRegressor(n_jobs=-1, random_state=5767), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 09:52:35,229:INFO:Finalizing RandomForestRegressor(n_jobs=-1, random_state=5767)
2024-03-06 09:52:35,440:INFO:Initializing create_model()
2024-03-06 09:52:35,440:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=RandomForestRegressor(n_jobs=-1, random_state=5767), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 09:52:35,440:INFO:Checking exceptions
2024-03-06 09:52:35,441:INFO:Importing libraries
2024-03-06 09:52:35,441:INFO:Copying training dataset
2024-03-06 09:52:35,477:INFO:Defining folds
2024-03-06 09:52:35,477:INFO:Declaring metric variables
2024-03-06 09:52:35,477:INFO:Importing untrained model
2024-03-06 09:52:35,477:INFO:Declaring custom model
2024-03-06 09:52:35,478:INFO:Random Forest Regressor Imported successfully
2024-03-06 09:52:35,479:INFO:Cross validation set to False
2024-03-06 09:52:35,479:INFO:Fitting Model
2024-03-06 09:57:59,651:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=5767))])
2024-03-06 09:57:59,656:INFO:create_model() successfully completed......................................
2024-03-06 09:58:01,166:INFO:_master_model_container: 20
2024-03-06 09:58:01,166:INFO:_display_container: 2
2024-03-06 09:58:01,175:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=5767))])
2024-03-06 09:58:01,176:INFO:finalize_model() successfully completed......................................
2024-03-06 09:58:01,382:INFO:Initializing predict_model()
2024-03-06 09:58:01,382:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EE1E08B310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=5767))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE13DCB240>)
2024-03-06 09:58:01,382:INFO:Checking exceptions
2024-03-06 09:58:01,382:INFO:Preloading libraries
2024-03-06 09:58:01,410:INFO:Set up data.
2024-03-06 09:58:04,880:INFO:Set up index.
2024-03-06 09:58:10,473:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 12:14:06,143:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-06 12:14:06,143:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-06 12:14:06,143:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-06 12:14:06,143:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-06 12:14:06,465:INFO:PyCaret RegressionExperiment
2024-03-06 12:14:06,465:INFO:Logging name: reg-default-name
2024-03-06 12:14:06,465:INFO:ML Usecase: MLUsecase.REGRESSION
2024-03-06 12:14:06,465:INFO:version 3.3.0
2024-03-06 12:14:06,465:INFO:Initializing setup()
2024-03-06 12:14:06,465:INFO:self.USI: b200
2024-03-06 12:14:06,465:INFO:self._variable_keys: {'gpu_param', 'gpu_n_jobs_param', 'log_plots_param', 'y_test', 'fold_groups_param', 'pipeline', 'idx', 'y_train', 'exp_name_log', 'transform_target_param', 'X_train', '_available_plots', '_ml_usecase', 'X', 'X_test', 'data', 'html_param', 'exp_id', 'n_jobs_param', 'fold_generator', 'target_param', 'seed', 'USI', 'fold_shuffle_param', 'y', 'memory', 'logging_param'}
2024-03-06 12:14:06,465:INFO:Checking environment
2024-03-06 12:14:06,465:INFO:python_version: 3.11.5
2024-03-06 12:14:06,465:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-03-06 12:14:06,465:INFO:machine: AMD64
2024-03-06 12:14:06,465:INFO:platform: Windows-10-10.0.19045-SP0
2024-03-06 12:14:06,465:INFO:Memory: svmem(total=16889192448, available=10883854336, percent=35.6, used=6005338112, free=10883854336)
2024-03-06 12:14:06,466:INFO:Physical Core: 4
2024-03-06 12:14:06,466:INFO:Logical Core: 8
2024-03-06 12:14:06,466:INFO:Checking libraries
2024-03-06 12:14:06,466:INFO:System:
2024-03-06 12:14:06,466:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-03-06 12:14:06,466:INFO:executable: d:\anaconda\python.exe
2024-03-06 12:14:06,466:INFO:   machine: Windows-10-10.0.19045-SP0
2024-03-06 12:14:06,466:INFO:PyCaret required dependencies:
2024-03-06 12:14:06,468:INFO:                 pip: 23.2.1
2024-03-06 12:14:06,468:INFO:          setuptools: 68.0.0
2024-03-06 12:14:06,468:INFO:             pycaret: 3.3.0
2024-03-06 12:14:06,468:INFO:             IPython: 8.15.0
2024-03-06 12:14:06,468:INFO:          ipywidgets: 8.0.4
2024-03-06 12:14:06,468:INFO:                tqdm: 4.65.0
2024-03-06 12:14:06,468:INFO:               numpy: 1.24.3
2024-03-06 12:14:06,468:INFO:              pandas: 2.0.3
2024-03-06 12:14:06,468:INFO:              jinja2: 3.1.2
2024-03-06 12:14:06,468:INFO:               scipy: 1.11.1
2024-03-06 12:14:06,468:INFO:              joblib: 1.2.0
2024-03-06 12:14:06,468:INFO:             sklearn: 1.4.1.post1
2024-03-06 12:14:06,468:INFO:                pyod: 1.1.3
2024-03-06 12:14:06,468:INFO:            imblearn: 0.10.1
2024-03-06 12:14:06,468:INFO:   category_encoders: 2.6.3
2024-03-06 12:14:06,469:INFO:            lightgbm: 4.3.0
2024-03-06 12:14:06,469:INFO:               numba: 0.57.1
2024-03-06 12:14:06,469:INFO:            requests: 2.31.0
2024-03-06 12:14:06,469:INFO:          matplotlib: 3.7.2
2024-03-06 12:14:06,469:INFO:          scikitplot: 0.3.7
2024-03-06 12:14:06,469:INFO:         yellowbrick: 1.5
2024-03-06 12:14:06,469:INFO:              plotly: 5.19.0
2024-03-06 12:14:06,469:INFO:    plotly-resampler: Not installed
2024-03-06 12:14:06,469:INFO:             kaleido: 0.2.1
2024-03-06 12:14:06,469:INFO:           schemdraw: 0.15
2024-03-06 12:14:06,469:INFO:         statsmodels: 0.14.0
2024-03-06 12:14:06,469:INFO:              sktime: 0.26.1
2024-03-06 12:14:06,469:INFO:               tbats: 1.1.3
2024-03-06 12:14:06,469:INFO:            pmdarima: 2.0.4
2024-03-06 12:14:06,469:INFO:              psutil: 5.9.0
2024-03-06 12:14:06,469:INFO:          markupsafe: 2.1.1
2024-03-06 12:14:06,469:INFO:             pickle5: Not installed
2024-03-06 12:14:06,469:INFO:         cloudpickle: 2.2.1
2024-03-06 12:14:06,469:INFO:         deprecation: 2.1.0
2024-03-06 12:14:06,469:INFO:              xxhash: 2.0.2
2024-03-06 12:14:06,469:INFO:           wurlitzer: Not installed
2024-03-06 12:14:06,469:INFO:PyCaret optional dependencies:
2024-03-06 12:14:06,484:INFO:                shap: Not installed
2024-03-06 12:14:06,484:INFO:           interpret: Not installed
2024-03-06 12:14:06,484:INFO:                umap: Not installed
2024-03-06 12:14:06,484:INFO:     ydata_profiling: Not installed
2024-03-06 12:14:06,484:INFO:  explainerdashboard: Not installed
2024-03-06 12:14:06,485:INFO:             autoviz: Not installed
2024-03-06 12:14:06,485:INFO:           fairlearn: Not installed
2024-03-06 12:14:06,485:INFO:          deepchecks: Not installed
2024-03-06 12:14:06,485:INFO:             xgboost: 2.0.3
2024-03-06 12:14:06,485:INFO:            catboost: 1.2.2
2024-03-06 12:14:06,485:INFO:              kmodes: Not installed
2024-03-06 12:14:06,485:INFO:             mlxtend: Not installed
2024-03-06 12:14:06,485:INFO:       statsforecast: Not installed
2024-03-06 12:14:06,485:INFO:        tune_sklearn: Not installed
2024-03-06 12:14:06,485:INFO:                 ray: Not installed
2024-03-06 12:14:06,485:INFO:            hyperopt: Not installed
2024-03-06 12:14:06,485:INFO:              optuna: Not installed
2024-03-06 12:14:06,485:INFO:               skopt: Not installed
2024-03-06 12:14:06,485:INFO:              mlflow: Not installed
2024-03-06 12:14:06,485:INFO:              gradio: Not installed
2024-03-06 12:14:06,485:INFO:             fastapi: Not installed
2024-03-06 12:14:06,485:INFO:             uvicorn: Not installed
2024-03-06 12:14:06,485:INFO:              m2cgen: Not installed
2024-03-06 12:14:06,485:INFO:           evidently: Not installed
2024-03-06 12:14:06,485:INFO:               fugue: Not installed
2024-03-06 12:14:06,485:INFO:           streamlit: Not installed
2024-03-06 12:14:06,485:INFO:             prophet: Not installed
2024-03-06 12:14:06,485:INFO:None
2024-03-06 12:14:06,485:INFO:Set up data.
2024-03-06 12:14:06,744:INFO:Set up folding strategy.
2024-03-06 12:14:06,744:INFO:Set up train/test split.
2024-03-06 12:14:06,953:INFO:Set up index.
2024-03-06 12:14:06,984:INFO:Assigning column types.
2024-03-06 12:14:07,227:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-03-06 12:14:07,227:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-06 12:14:07,244:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 12:14:07,244:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:14:07,576:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:14:07,608:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:14:07,608:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:07,608:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:07,608:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-06 12:14:07,624:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 12:14:07,624:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:14:07,920:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:14:07,967:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:14:07,967:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:07,967:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:07,967:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-03-06 12:14:07,983:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 12:14:07,983:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:14:08,295:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:14:08,327:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:14:08,327:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:08,327:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:08,342:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 12:14:08,342:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:14:08,652:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:14:08,700:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:14:08,700:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:08,700:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:08,700:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-03-06 12:14:08,700:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:14:09,030:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:14:09,077:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:14:09,077:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:09,077:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:09,093:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:14:09,409:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:14:09,441:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:14:09,441:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:09,441:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:09,441:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-03-06 12:14:09,768:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:14:09,800:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:14:09,800:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:09,800:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:10,125:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:14:10,156:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:14:10,156:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:10,156:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:10,156:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-03-06 12:14:10,493:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:14:10,544:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:10,544:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:10,859:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:14:10,906:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:10,906:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:10,906:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-03-06 12:14:11,268:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:11,268:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:11,608:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:11,608:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:11,624:INFO:Preparing preprocessing pipeline...
2024-03-06 12:14:11,624:INFO:Set up simple imputation.
2024-03-06 12:14:12,140:INFO:Finished creating preprocessing pipeline.
2024-03-06 12:14:12,140:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\dell\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2024-03-06 12:14:12,140:INFO:Creating final display dataframe.
2024-03-06 12:14:13,300:INFO:Setup _display_container:                     Description             Value
0                    Session id              2265
1                        Target           Current
2                   Target type        Regression
3           Original data shape     (1257130, 13)
4        Transformed data shape     (1257130, 13)
5   Transformed train set shape      (879991, 13)
6    Transformed test set shape      (377139, 13)
7              Numeric features                12
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   TimeSeriesSplit
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              b200
2024-03-06 12:14:13,697:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:13,697:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:14,047:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:14:14,047:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:14:14,047:WARNING:C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\metrics.py:51: FutureWarning: The `needs_threshold` and `needs_proba` parameter are deprecated in version 1.4 and will be removed in 1.6. You can either let `response_method` be `None` or set it to `predict` to preserve the same behaviour.
  warnings.warn(

2024-03-06 12:14:14,047:INFO:setup() successfully completed in 7.6s...............
2024-03-06 12:14:14,047:INFO:Initializing compare_models()
2024-03-06 12:14:14,047:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=7, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 7, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-03-06 12:14:14,047:INFO:Checking exceptions
2024-03-06 12:14:14,182:INFO:Preparing display monitor
2024-03-06 12:14:14,213:INFO:Initializing Linear Regression
2024-03-06 12:14:14,213:INFO:Total runtime is 0.0 minutes
2024-03-06 12:14:14,213:INFO:SubProcess create_model() called ==================================
2024-03-06 12:14:14,213:INFO:Initializing create_model()
2024-03-06 12:14:14,213:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=lr, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:14:14,213:INFO:Checking exceptions
2024-03-06 12:14:14,213:INFO:Importing libraries
2024-03-06 12:14:14,213:INFO:Copying training dataset
2024-03-06 12:14:14,580:INFO:Defining folds
2024-03-06 12:14:14,580:INFO:Declaring metric variables
2024-03-06 12:14:14,580:INFO:Importing untrained model
2024-03-06 12:14:14,580:INFO:Linear Regression Imported successfully
2024-03-06 12:14:14,597:INFO:Starting cross validation
2024-03-06 12:14:14,613:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:14:23,459:INFO:Calculating mean and std
2024-03-06 12:14:23,459:INFO:Creating metrics dataframe
2024-03-06 12:14:23,459:INFO:Uploading results into container
2024-03-06 12:14:23,459:INFO:Uploading model into container now
2024-03-06 12:14:23,459:INFO:_master_model_container: 1
2024-03-06 12:14:23,459:INFO:_display_container: 2
2024-03-06 12:14:23,459:INFO:LinearRegression(n_jobs=-1)
2024-03-06 12:14:23,459:INFO:create_model() successfully completed......................................
2024-03-06 12:14:23,552:INFO:SubProcess create_model() end ==================================
2024-03-06 12:14:23,552:INFO:Creating metrics dataframe
2024-03-06 12:14:23,568:INFO:Initializing Lasso Regression
2024-03-06 12:14:23,568:INFO:Total runtime is 0.1559194008509318 minutes
2024-03-06 12:14:23,568:INFO:SubProcess create_model() called ==================================
2024-03-06 12:14:23,568:INFO:Initializing create_model()
2024-03-06 12:14:23,568:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=lasso, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:14:23,568:INFO:Checking exceptions
2024-03-06 12:14:23,568:INFO:Importing libraries
2024-03-06 12:14:23,568:INFO:Copying training dataset
2024-03-06 12:14:23,949:INFO:Defining folds
2024-03-06 12:14:23,949:INFO:Declaring metric variables
2024-03-06 12:14:23,965:INFO:Importing untrained model
2024-03-06 12:14:23,967:INFO:Lasso Regression Imported successfully
2024-03-06 12:14:23,967:INFO:Starting cross validation
2024-03-06 12:14:23,967:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:14:25,448:INFO:Calculating mean and std
2024-03-06 12:14:25,448:INFO:Creating metrics dataframe
2024-03-06 12:14:25,448:INFO:Uploading results into container
2024-03-06 12:14:25,448:INFO:Uploading model into container now
2024-03-06 12:14:25,448:INFO:_master_model_container: 2
2024-03-06 12:14:25,448:INFO:_display_container: 2
2024-03-06 12:14:25,448:INFO:Lasso(random_state=2265)
2024-03-06 12:14:25,448:INFO:create_model() successfully completed......................................
2024-03-06 12:14:25,537:INFO:SubProcess create_model() end ==================================
2024-03-06 12:14:25,537:INFO:Creating metrics dataframe
2024-03-06 12:14:25,537:INFO:Initializing Ridge Regression
2024-03-06 12:14:25,537:INFO:Total runtime is 0.18873661359151206 minutes
2024-03-06 12:14:25,553:INFO:SubProcess create_model() called ==================================
2024-03-06 12:14:25,553:INFO:Initializing create_model()
2024-03-06 12:14:25,553:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=ridge, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:14:25,553:INFO:Checking exceptions
2024-03-06 12:14:25,553:INFO:Importing libraries
2024-03-06 12:14:25,553:INFO:Copying training dataset
2024-03-06 12:14:25,958:INFO:Defining folds
2024-03-06 12:14:25,958:INFO:Declaring metric variables
2024-03-06 12:14:25,958:INFO:Importing untrained model
2024-03-06 12:14:25,958:INFO:Ridge Regression Imported successfully
2024-03-06 12:14:25,958:INFO:Starting cross validation
2024-03-06 12:14:25,971:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:14:26,207:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.28823e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:14:26,251:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.1328e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:14:26,314:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=7.00956e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:14:26,385:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.25128e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:14:26,469:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=4.2704e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:14:26,603:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.58744e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:14:26,651:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.00227e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:14:26,735:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.58174e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:14:26,818:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26418e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:14:26,850:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.04342e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:14:27,001:INFO:Calculating mean and std
2024-03-06 12:14:27,001:INFO:Creating metrics dataframe
2024-03-06 12:14:27,001:INFO:Uploading results into container
2024-03-06 12:14:27,001:INFO:Uploading model into container now
2024-03-06 12:14:27,001:INFO:_master_model_container: 3
2024-03-06 12:14:27,001:INFO:_display_container: 2
2024-03-06 12:14:27,001:INFO:Ridge(random_state=2265)
2024-03-06 12:14:27,001:INFO:create_model() successfully completed......................................
2024-03-06 12:14:27,085:INFO:SubProcess create_model() end ==================================
2024-03-06 12:14:27,085:INFO:Creating metrics dataframe
2024-03-06 12:14:27,102:INFO:Initializing Elastic Net
2024-03-06 12:14:27,102:INFO:Total runtime is 0.21482011874516807 minutes
2024-03-06 12:14:27,102:INFO:SubProcess create_model() called ==================================
2024-03-06 12:14:27,102:INFO:Initializing create_model()
2024-03-06 12:14:27,102:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=en, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:14:27,102:INFO:Checking exceptions
2024-03-06 12:14:27,102:INFO:Importing libraries
2024-03-06 12:14:27,102:INFO:Copying training dataset
2024-03-06 12:14:27,495:INFO:Defining folds
2024-03-06 12:14:27,495:INFO:Declaring metric variables
2024-03-06 12:14:27,495:INFO:Importing untrained model
2024-03-06 12:14:27,495:INFO:Elastic Net Imported successfully
2024-03-06 12:14:27,510:INFO:Starting cross validation
2024-03-06 12:14:27,510:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:14:28,980:INFO:Calculating mean and std
2024-03-06 12:14:28,980:INFO:Creating metrics dataframe
2024-03-06 12:14:28,980:INFO:Uploading results into container
2024-03-06 12:14:28,980:INFO:Uploading model into container now
2024-03-06 12:14:28,980:INFO:_master_model_container: 4
2024-03-06 12:14:28,980:INFO:_display_container: 2
2024-03-06 12:14:28,980:INFO:ElasticNet(random_state=2265)
2024-03-06 12:14:28,980:INFO:create_model() successfully completed......................................
2024-03-06 12:14:29,071:INFO:SubProcess create_model() end ==================================
2024-03-06 12:14:29,071:INFO:Creating metrics dataframe
2024-03-06 12:14:29,071:INFO:Initializing Least Angle Regression
2024-03-06 12:14:29,071:INFO:Total runtime is 0.24763832887013754 minutes
2024-03-06 12:14:29,071:INFO:SubProcess create_model() called ==================================
2024-03-06 12:14:29,071:INFO:Initializing create_model()
2024-03-06 12:14:29,071:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=lar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:14:29,087:INFO:Checking exceptions
2024-03-06 12:14:29,087:INFO:Importing libraries
2024-03-06 12:14:29,087:INFO:Copying training dataset
2024-03-06 12:14:29,469:INFO:Defining folds
2024-03-06 12:14:29,469:INFO:Declaring metric variables
2024-03-06 12:14:29,469:INFO:Importing untrained model
2024-03-06 12:14:29,469:INFO:Least Angle Regression Imported successfully
2024-03-06 12:14:29,469:INFO:Starting cross validation
2024-03-06 12:14:29,469:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:14:30,504:INFO:Calculating mean and std
2024-03-06 12:14:30,505:INFO:Creating metrics dataframe
2024-03-06 12:14:30,507:INFO:Uploading results into container
2024-03-06 12:14:30,507:INFO:Uploading model into container now
2024-03-06 12:14:30,507:INFO:_master_model_container: 5
2024-03-06 12:14:30,507:INFO:_display_container: 2
2024-03-06 12:14:30,507:INFO:Lars(random_state=2265)
2024-03-06 12:14:30,507:INFO:create_model() successfully completed......................................
2024-03-06 12:14:30,603:INFO:SubProcess create_model() end ==================================
2024-03-06 12:14:30,603:INFO:Creating metrics dataframe
2024-03-06 12:14:30,603:INFO:Initializing Lasso Least Angle Regression
2024-03-06 12:14:30,603:INFO:Total runtime is 0.2731732686360677 minutes
2024-03-06 12:14:30,603:INFO:SubProcess create_model() called ==================================
2024-03-06 12:14:30,603:INFO:Initializing create_model()
2024-03-06 12:14:30,603:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=llar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:14:30,603:INFO:Checking exceptions
2024-03-06 12:14:30,603:INFO:Importing libraries
2024-03-06 12:14:30,603:INFO:Copying training dataset
2024-03-06 12:14:31,023:INFO:Defining folds
2024-03-06 12:14:31,023:INFO:Declaring metric variables
2024-03-06 12:14:31,038:INFO:Importing untrained model
2024-03-06 12:14:31,038:INFO:Lasso Least Angle Regression Imported successfully
2024-03-06 12:14:31,038:INFO:Starting cross validation
2024-03-06 12:14:31,038:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:14:32,089:INFO:Calculating mean and std
2024-03-06 12:14:32,089:INFO:Creating metrics dataframe
2024-03-06 12:14:32,089:INFO:Uploading results into container
2024-03-06 12:14:32,105:INFO:Uploading model into container now
2024-03-06 12:14:32,105:INFO:_master_model_container: 6
2024-03-06 12:14:32,119:INFO:_display_container: 2
2024-03-06 12:14:32,119:INFO:LassoLars(random_state=2265)
2024-03-06 12:14:32,119:INFO:create_model() successfully completed......................................
2024-03-06 12:14:32,211:INFO:SubProcess create_model() end ==================================
2024-03-06 12:14:32,211:INFO:Creating metrics dataframe
2024-03-06 12:14:32,211:INFO:Initializing Orthogonal Matching Pursuit
2024-03-06 12:14:32,211:INFO:Total runtime is 0.29997096459070843 minutes
2024-03-06 12:14:32,211:INFO:SubProcess create_model() called ==================================
2024-03-06 12:14:32,211:INFO:Initializing create_model()
2024-03-06 12:14:32,211:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=omp, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:14:32,211:INFO:Checking exceptions
2024-03-06 12:14:32,211:INFO:Importing libraries
2024-03-06 12:14:32,211:INFO:Copying training dataset
2024-03-06 12:14:32,602:INFO:Defining folds
2024-03-06 12:14:32,602:INFO:Declaring metric variables
2024-03-06 12:14:32,602:INFO:Importing untrained model
2024-03-06 12:14:32,602:INFO:Orthogonal Matching Pursuit Imported successfully
2024-03-06 12:14:32,602:INFO:Starting cross validation
2024-03-06 12:14:32,602:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:14:33,627:INFO:Calculating mean and std
2024-03-06 12:14:33,627:INFO:Creating metrics dataframe
2024-03-06 12:14:33,627:INFO:Uploading results into container
2024-03-06 12:14:33,627:INFO:Uploading model into container now
2024-03-06 12:14:33,627:INFO:_master_model_container: 7
2024-03-06 12:14:33,627:INFO:_display_container: 2
2024-03-06 12:14:33,627:INFO:OrthogonalMatchingPursuit()
2024-03-06 12:14:33,627:INFO:create_model() successfully completed......................................
2024-03-06 12:14:33,720:INFO:SubProcess create_model() end ==================================
2024-03-06 12:14:33,720:INFO:Creating metrics dataframe
2024-03-06 12:14:33,720:INFO:Initializing Bayesian Ridge
2024-03-06 12:14:33,720:INFO:Total runtime is 0.3251250227292379 minutes
2024-03-06 12:14:33,720:INFO:SubProcess create_model() called ==================================
2024-03-06 12:14:33,720:INFO:Initializing create_model()
2024-03-06 12:14:33,720:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=br, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:14:33,720:INFO:Checking exceptions
2024-03-06 12:14:33,720:INFO:Importing libraries
2024-03-06 12:14:33,720:INFO:Copying training dataset
2024-03-06 12:14:34,136:INFO:Defining folds
2024-03-06 12:14:34,136:INFO:Declaring metric variables
2024-03-06 12:14:34,136:INFO:Importing untrained model
2024-03-06 12:14:34,136:INFO:Bayesian Ridge Imported successfully
2024-03-06 12:14:34,136:INFO:Starting cross validation
2024-03-06 12:14:34,136:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:14:35,573:INFO:Calculating mean and std
2024-03-06 12:14:35,573:INFO:Creating metrics dataframe
2024-03-06 12:14:35,573:INFO:Uploading results into container
2024-03-06 12:14:35,573:INFO:Uploading model into container now
2024-03-06 12:14:35,573:INFO:_master_model_container: 8
2024-03-06 12:14:35,573:INFO:_display_container: 2
2024-03-06 12:14:35,573:INFO:BayesianRidge()
2024-03-06 12:14:35,573:INFO:create_model() successfully completed......................................
2024-03-06 12:14:35,653:INFO:SubProcess create_model() end ==================================
2024-03-06 12:14:35,653:INFO:Creating metrics dataframe
2024-03-06 12:14:35,668:INFO:Initializing Passive Aggressive Regressor
2024-03-06 12:14:35,668:INFO:Total runtime is 0.3575900713602702 minutes
2024-03-06 12:14:35,668:INFO:SubProcess create_model() called ==================================
2024-03-06 12:14:35,668:INFO:Initializing create_model()
2024-03-06 12:14:35,668:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=par, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:14:35,668:INFO:Checking exceptions
2024-03-06 12:14:35,668:INFO:Importing libraries
2024-03-06 12:14:35,668:INFO:Copying training dataset
2024-03-06 12:14:36,055:INFO:Defining folds
2024-03-06 12:14:36,055:INFO:Declaring metric variables
2024-03-06 12:14:36,055:INFO:Importing untrained model
2024-03-06 12:14:36,071:INFO:Passive Aggressive Regressor Imported successfully
2024-03-06 12:14:36,071:INFO:Starting cross validation
2024-03-06 12:14:36,071:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:14:39,165:INFO:Calculating mean and std
2024-03-06 12:14:39,165:INFO:Creating metrics dataframe
2024-03-06 12:14:39,165:INFO:Uploading results into container
2024-03-06 12:14:39,165:INFO:Uploading model into container now
2024-03-06 12:14:39,165:INFO:_master_model_container: 9
2024-03-06 12:14:39,165:INFO:_display_container: 2
2024-03-06 12:14:39,165:INFO:PassiveAggressiveRegressor(random_state=2265)
2024-03-06 12:14:39,165:INFO:create_model() successfully completed......................................
2024-03-06 12:14:39,243:INFO:SubProcess create_model() end ==================================
2024-03-06 12:14:39,243:INFO:Creating metrics dataframe
2024-03-06 12:14:39,259:INFO:Initializing Huber Regressor
2024-03-06 12:14:39,259:INFO:Total runtime is 0.41744089921315514 minutes
2024-03-06 12:14:39,259:INFO:SubProcess create_model() called ==================================
2024-03-06 12:14:39,259:INFO:Initializing create_model()
2024-03-06 12:14:39,259:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=huber, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:14:39,259:INFO:Checking exceptions
2024-03-06 12:14:39,259:INFO:Importing libraries
2024-03-06 12:14:39,259:INFO:Copying training dataset
2024-03-06 12:14:39,634:INFO:Defining folds
2024-03-06 12:14:39,634:INFO:Declaring metric variables
2024-03-06 12:14:39,634:INFO:Importing untrained model
2024-03-06 12:14:39,634:INFO:Huber Regressor Imported successfully
2024-03-06 12:14:39,649:INFO:Starting cross validation
2024-03-06 12:14:39,649:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:14:43,772:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:14:48,861:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:14:54,092:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:14:57,074:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:15:01,756:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:15:05,738:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:15:08,851:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:15:14,488:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:15:17,897:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:15:18,090:INFO:Calculating mean and std
2024-03-06 12:15:18,090:INFO:Creating metrics dataframe
2024-03-06 12:15:18,090:INFO:Uploading results into container
2024-03-06 12:15:18,090:INFO:Uploading model into container now
2024-03-06 12:15:18,090:INFO:_master_model_container: 10
2024-03-06 12:15:18,090:INFO:_display_container: 2
2024-03-06 12:15:18,090:INFO:HuberRegressor()
2024-03-06 12:15:18,090:INFO:create_model() successfully completed......................................
2024-03-06 12:15:18,190:INFO:SubProcess create_model() end ==================================
2024-03-06 12:15:18,190:INFO:Creating metrics dataframe
2024-03-06 12:15:18,190:INFO:Initializing K Neighbors Regressor
2024-03-06 12:15:18,190:INFO:Total runtime is 1.0662954807281495 minutes
2024-03-06 12:15:18,190:INFO:SubProcess create_model() called ==================================
2024-03-06 12:15:18,190:INFO:Initializing create_model()
2024-03-06 12:15:18,190:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=knn, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:15:18,190:INFO:Checking exceptions
2024-03-06 12:15:18,190:INFO:Importing libraries
2024-03-06 12:15:18,190:INFO:Copying training dataset
2024-03-06 12:15:18,570:INFO:Defining folds
2024-03-06 12:15:18,570:INFO:Declaring metric variables
2024-03-06 12:15:18,570:INFO:Importing untrained model
2024-03-06 12:15:18,582:INFO:K Neighbors Regressor Imported successfully
2024-03-06 12:15:18,588:INFO:Starting cross validation
2024-03-06 12:15:18,588:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:15:54,580:INFO:Calculating mean and std
2024-03-06 12:15:54,584:INFO:Creating metrics dataframe
2024-03-06 12:15:54,587:INFO:Uploading results into container
2024-03-06 12:15:54,587:INFO:Uploading model into container now
2024-03-06 12:15:54,587:INFO:_master_model_container: 11
2024-03-06 12:15:54,587:INFO:_display_container: 2
2024-03-06 12:15:54,587:INFO:KNeighborsRegressor(n_jobs=-1)
2024-03-06 12:15:54,587:INFO:create_model() successfully completed......................................
2024-03-06 12:15:54,669:INFO:SubProcess create_model() end ==================================
2024-03-06 12:15:54,669:INFO:Creating metrics dataframe
2024-03-06 12:15:54,687:INFO:Initializing Decision Tree Regressor
2024-03-06 12:15:54,687:INFO:Total runtime is 1.6745718359947206 minutes
2024-03-06 12:15:54,687:INFO:SubProcess create_model() called ==================================
2024-03-06 12:15:54,687:INFO:Initializing create_model()
2024-03-06 12:15:54,687:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=dt, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:15:54,687:INFO:Checking exceptions
2024-03-06 12:15:54,687:INFO:Importing libraries
2024-03-06 12:15:54,687:INFO:Copying training dataset
2024-03-06 12:15:55,119:INFO:Defining folds
2024-03-06 12:15:55,120:INFO:Declaring metric variables
2024-03-06 12:15:55,123:INFO:Importing untrained model
2024-03-06 12:15:55,126:INFO:Decision Tree Regressor Imported successfully
2024-03-06 12:15:55,131:INFO:Starting cross validation
2024-03-06 12:15:55,133:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:16:15,708:INFO:Calculating mean and std
2024-03-06 12:16:15,709:INFO:Creating metrics dataframe
2024-03-06 12:16:15,709:INFO:Uploading results into container
2024-03-06 12:16:15,714:INFO:Uploading model into container now
2024-03-06 12:16:15,716:INFO:_master_model_container: 12
2024-03-06 12:16:15,716:INFO:_display_container: 2
2024-03-06 12:16:15,716:INFO:DecisionTreeRegressor(random_state=2265)
2024-03-06 12:16:15,716:INFO:create_model() successfully completed......................................
2024-03-06 12:16:15,793:INFO:SubProcess create_model() end ==================================
2024-03-06 12:16:15,793:INFO:Creating metrics dataframe
2024-03-06 12:16:15,808:INFO:Initializing Random Forest Regressor
2024-03-06 12:16:15,809:INFO:Total runtime is 2.026595664024353 minutes
2024-03-06 12:16:15,809:INFO:SubProcess create_model() called ==================================
2024-03-06 12:16:15,809:INFO:Initializing create_model()
2024-03-06 12:16:15,809:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=rf, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:16:15,809:INFO:Checking exceptions
2024-03-06 12:16:15,809:INFO:Importing libraries
2024-03-06 12:16:15,809:INFO:Copying training dataset
2024-03-06 12:16:16,163:INFO:Defining folds
2024-03-06 12:16:16,163:INFO:Declaring metric variables
2024-03-06 12:16:16,163:INFO:Importing untrained model
2024-03-06 12:16:16,174:INFO:Random Forest Regressor Imported successfully
2024-03-06 12:16:16,178:INFO:Starting cross validation
2024-03-06 12:16:16,178:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:29:28,558:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
5 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
3 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 33554432 bytes

--------------------------------------------------------------------------------
2 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 192, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 67108864 bytes

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-03-06 12:29:28,641:INFO:Calculating mean and std
2024-03-06 12:29:28,762:INFO:Creating metrics dataframe
2024-03-06 12:29:28,900:INFO:Uploading results into container
2024-03-06 12:29:28,905:INFO:Uploading model into container now
2024-03-06 12:29:28,926:INFO:_master_model_container: 13
2024-03-06 12:29:28,926:INFO:_display_container: 2
2024-03-06 12:29:28,945:INFO:RandomForestRegressor(n_jobs=-1, random_state=2265)
2024-03-06 12:29:28,945:INFO:create_model() successfully completed......................................
2024-03-06 12:29:29,787:INFO:SubProcess create_model() end ==================================
2024-03-06 12:29:29,787:INFO:Creating metrics dataframe
2024-03-06 12:29:29,806:INFO:Initializing Extra Trees Regressor
2024-03-06 12:29:29,806:INFO:Total runtime is 15.259893198808033 minutes
2024-03-06 12:29:29,812:INFO:SubProcess create_model() called ==================================
2024-03-06 12:29:29,813:INFO:Initializing create_model()
2024-03-06 12:29:29,814:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000151C0C54C10>, estimator=et, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000151E0C4B350>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:29:29,814:INFO:Checking exceptions
2024-03-06 12:29:29,814:INFO:Importing libraries
2024-03-06 12:29:29,814:INFO:Copying training dataset
2024-03-06 12:29:30,596:INFO:Defining folds
2024-03-06 12:29:30,596:INFO:Declaring metric variables
2024-03-06 12:29:30,604:INFO:Importing untrained model
2024-03-06 12:29:30,605:INFO:Extra Trees Regressor Imported successfully
2024-03-06 12:29:30,612:INFO:Starting cross validation
2024-03-06 12:29:30,620:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=10, test_size=None), n_jobs=-1
2024-03-06 12:34:04,266:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
6 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 67108864 bytes

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 33554432 bytes

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-03-06 12:34:04,480:INFO:Calculating mean and std
2024-03-06 12:34:04,927:INFO:Creating metrics dataframe
2024-03-06 12:34:05,085:INFO:Uploading results into container
2024-03-06 12:34:05,098:INFO:Uploading model into container now
2024-03-06 12:34:05,103:INFO:_master_model_container: 14
2024-03-06 12:34:05,103:INFO:_display_container: 2
2024-03-06 12:34:05,129:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=2265)
2024-03-06 12:34:05,129:INFO:create_model() successfully completed......................................
2024-03-06 12:37:04,141:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-06 12:37:04,141:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-06 12:37:04,141:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-06 12:37:04,141:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-06 12:37:04,454:INFO:PyCaret RegressionExperiment
2024-03-06 12:37:04,454:INFO:Logging name: reg-default-name
2024-03-06 12:37:04,454:INFO:ML Usecase: MLUsecase.REGRESSION
2024-03-06 12:37:04,454:INFO:version 3.3.0
2024-03-06 12:37:04,454:INFO:Initializing setup()
2024-03-06 12:37:04,454:INFO:self.USI: 9431
2024-03-06 12:37:04,454:INFO:self._variable_keys: {'target_param', 'y_test', 'exp_id', 'X_test', 'idx', 'y', 'seed', 'log_plots_param', 'y_train', 'gpu_n_jobs_param', 'html_param', 'logging_param', 'exp_name_log', '_available_plots', 'transform_target_param', 'memory', '_ml_usecase', 'data', 'fold_shuffle_param', 'gpu_param', 'pipeline', 'n_jobs_param', 'X', 'fold_groups_param', 'USI', 'X_train', 'fold_generator'}
2024-03-06 12:37:04,454:INFO:Checking environment
2024-03-06 12:37:04,454:INFO:python_version: 3.11.5
2024-03-06 12:37:04,454:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-03-06 12:37:04,455:INFO:machine: AMD64
2024-03-06 12:37:04,455:INFO:platform: Windows-10-10.0.19045-SP0
2024-03-06 12:37:04,455:INFO:Memory: svmem(total=16889192448, available=9938477056, percent=41.2, used=6950715392, free=9938477056)
2024-03-06 12:37:04,455:INFO:Physical Core: 4
2024-03-06 12:37:04,455:INFO:Logical Core: 8
2024-03-06 12:37:04,455:INFO:Checking libraries
2024-03-06 12:37:04,455:INFO:System:
2024-03-06 12:37:04,455:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-03-06 12:37:04,455:INFO:executable: d:\anaconda\python.exe
2024-03-06 12:37:04,455:INFO:   machine: Windows-10-10.0.19045-SP0
2024-03-06 12:37:04,455:INFO:PyCaret required dependencies:
2024-03-06 12:37:04,455:INFO:                 pip: 23.2.1
2024-03-06 12:37:04,455:INFO:          setuptools: 68.0.0
2024-03-06 12:37:04,455:INFO:             pycaret: 3.3.0
2024-03-06 12:37:04,455:INFO:             IPython: 8.15.0
2024-03-06 12:37:04,455:INFO:          ipywidgets: 8.0.4
2024-03-06 12:37:04,455:INFO:                tqdm: 4.65.0
2024-03-06 12:37:04,455:INFO:               numpy: 1.24.3
2024-03-06 12:37:04,455:INFO:              pandas: 2.0.3
2024-03-06 12:37:04,455:INFO:              jinja2: 3.1.2
2024-03-06 12:37:04,455:INFO:               scipy: 1.11.1
2024-03-06 12:37:04,455:INFO:              joblib: 1.2.0
2024-03-06 12:37:04,455:INFO:             sklearn: 1.4.1.post1
2024-03-06 12:37:04,455:INFO:                pyod: 1.1.3
2024-03-06 12:37:04,455:INFO:            imblearn: 0.10.1
2024-03-06 12:37:04,455:INFO:   category_encoders: 2.6.3
2024-03-06 12:37:04,455:INFO:            lightgbm: 4.3.0
2024-03-06 12:37:04,455:INFO:               numba: 0.57.1
2024-03-06 12:37:04,455:INFO:            requests: 2.31.0
2024-03-06 12:37:04,455:INFO:          matplotlib: 3.7.2
2024-03-06 12:37:04,455:INFO:          scikitplot: 0.3.7
2024-03-06 12:37:04,455:INFO:         yellowbrick: 1.5
2024-03-06 12:37:04,455:INFO:              plotly: 5.19.0
2024-03-06 12:37:04,455:INFO:    plotly-resampler: Not installed
2024-03-06 12:37:04,455:INFO:             kaleido: 0.2.1
2024-03-06 12:37:04,455:INFO:           schemdraw: 0.15
2024-03-06 12:37:04,455:INFO:         statsmodels: 0.14.0
2024-03-06 12:37:04,455:INFO:              sktime: 0.26.1
2024-03-06 12:37:04,455:INFO:               tbats: 1.1.3
2024-03-06 12:37:04,455:INFO:            pmdarima: 2.0.4
2024-03-06 12:37:04,455:INFO:              psutil: 5.9.0
2024-03-06 12:37:04,455:INFO:          markupsafe: 2.1.1
2024-03-06 12:37:04,455:INFO:             pickle5: Not installed
2024-03-06 12:37:04,455:INFO:         cloudpickle: 2.2.1
2024-03-06 12:37:04,455:INFO:         deprecation: 2.1.0
2024-03-06 12:37:04,455:INFO:              xxhash: 2.0.2
2024-03-06 12:37:04,455:INFO:           wurlitzer: Not installed
2024-03-06 12:37:04,455:INFO:PyCaret optional dependencies:
2024-03-06 12:37:04,472:INFO:                shap: Not installed
2024-03-06 12:37:04,472:INFO:           interpret: Not installed
2024-03-06 12:37:04,472:INFO:                umap: Not installed
2024-03-06 12:37:04,472:INFO:     ydata_profiling: Not installed
2024-03-06 12:37:04,472:INFO:  explainerdashboard: Not installed
2024-03-06 12:37:04,472:INFO:             autoviz: Not installed
2024-03-06 12:37:04,472:INFO:           fairlearn: Not installed
2024-03-06 12:37:04,472:INFO:          deepchecks: Not installed
2024-03-06 12:37:04,472:INFO:             xgboost: 2.0.3
2024-03-06 12:37:04,472:INFO:            catboost: 1.2.2
2024-03-06 12:37:04,472:INFO:              kmodes: Not installed
2024-03-06 12:37:04,472:INFO:             mlxtend: Not installed
2024-03-06 12:37:04,472:INFO:       statsforecast: Not installed
2024-03-06 12:37:04,472:INFO:        tune_sklearn: Not installed
2024-03-06 12:37:04,472:INFO:                 ray: Not installed
2024-03-06 12:37:04,472:INFO:            hyperopt: Not installed
2024-03-06 12:37:04,472:INFO:              optuna: Not installed
2024-03-06 12:37:04,472:INFO:               skopt: Not installed
2024-03-06 12:37:04,472:INFO:              mlflow: Not installed
2024-03-06 12:37:04,472:INFO:              gradio: Not installed
2024-03-06 12:37:04,472:INFO:             fastapi: Not installed
2024-03-06 12:37:04,472:INFO:             uvicorn: Not installed
2024-03-06 12:37:04,472:INFO:              m2cgen: Not installed
2024-03-06 12:37:04,472:INFO:           evidently: Not installed
2024-03-06 12:37:04,472:INFO:               fugue: Not installed
2024-03-06 12:37:04,472:INFO:           streamlit: Not installed
2024-03-06 12:37:04,472:INFO:             prophet: Not installed
2024-03-06 12:37:04,472:INFO:None
2024-03-06 12:37:04,472:INFO:Set up data.
2024-03-06 12:37:04,723:INFO:Set up folding strategy.
2024-03-06 12:37:04,723:INFO:Set up train/test split.
2024-03-06 12:37:04,973:INFO:Set up index.
2024-03-06 12:37:05,006:INFO:Assigning column types.
2024-03-06 12:37:05,252:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-03-06 12:37:05,252:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-06 12:37:05,252:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 12:37:05,268:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:37:05,589:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:37:05,639:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:37:05,639:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:05,639:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:05,639:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-06 12:37:05,652:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 12:37:05,655:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:37:05,991:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:37:06,037:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:37:06,037:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:06,038:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:06,038:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-03-06 12:37:06,038:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 12:37:06,038:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:37:06,357:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:37:06,390:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:37:06,390:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:06,390:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:06,403:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-06 12:37:06,407:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:37:06,737:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:37:06,774:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:37:06,774:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:06,774:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:06,774:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-03-06 12:37:06,791:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:37:07,086:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:37:07,123:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:37:07,136:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:07,138:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:07,145:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-06 12:37:07,438:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:37:07,470:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:37:07,470:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:07,487:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:07,487:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-03-06 12:37:07,787:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:37:07,820:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:37:07,820:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:07,820:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:08,120:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:37:08,153:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-06 12:37:08,153:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:08,153:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:08,169:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-03-06 12:37:08,471:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:37:08,504:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:08,504:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:08,839:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-06 12:37:08,870:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:08,870:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:08,870:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-03-06 12:37:09,223:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:09,226:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:09,554:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:09,554:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:09,554:INFO:Preparing preprocessing pipeline...
2024-03-06 12:37:09,554:INFO:Set up simple imputation.
2024-03-06 12:37:10,054:INFO:Finished creating preprocessing pipeline.
2024-03-06 12:37:10,054:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\dell\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2024-03-06 12:37:10,054:INFO:Creating final display dataframe.
2024-03-06 12:37:11,223:INFO:Setup _display_container:                     Description             Value
0                    Session id              3939
1                        Target           Current
2                   Target type        Regression
3           Original data shape     (1257130, 13)
4        Transformed data shape     (1257130, 13)
5   Transformed train set shape      (879991, 13)
6    Transformed test set shape      (377139, 13)
7              Numeric features                12
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   TimeSeriesSplit
13                  Fold Number                 5
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              9431
2024-03-06 12:37:11,606:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:11,606:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:11,955:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-06 12:37:11,955:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-06 12:37:11,973:WARNING:C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\metrics.py:51: FutureWarning: The `needs_threshold` and `needs_proba` parameter are deprecated in version 1.4 and will be removed in 1.6. You can either let `response_method` be `None` or set it to `predict` to preserve the same behaviour.
  warnings.warn(

2024-03-06 12:37:11,973:INFO:setup() successfully completed in 7.53s...............
2024-03-06 12:37:11,973:INFO:Initializing compare_models()
2024-03-06 12:37:11,973:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=7, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 7, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-03-06 12:37:11,973:INFO:Checking exceptions
2024-03-06 12:37:12,122:INFO:Preparing display monitor
2024-03-06 12:37:12,138:INFO:Initializing Linear Regression
2024-03-06 12:37:12,138:INFO:Total runtime is 0.0 minutes
2024-03-06 12:37:12,154:INFO:SubProcess create_model() called ==================================
2024-03-06 12:37:12,154:INFO:Initializing create_model()
2024-03-06 12:37:12,154:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=lr, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:37:12,154:INFO:Checking exceptions
2024-03-06 12:37:12,154:INFO:Importing libraries
2024-03-06 12:37:12,155:INFO:Copying training dataset
2024-03-06 12:37:12,505:INFO:Defining folds
2024-03-06 12:37:12,505:INFO:Declaring metric variables
2024-03-06 12:37:12,505:INFO:Importing untrained model
2024-03-06 12:37:12,524:INFO:Linear Regression Imported successfully
2024-03-06 12:37:12,524:INFO:Starting cross validation
2024-03-06 12:37:12,539:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:37:18,643:INFO:Calculating mean and std
2024-03-06 12:37:18,644:INFO:Creating metrics dataframe
2024-03-06 12:37:18,646:INFO:Uploading results into container
2024-03-06 12:37:18,647:INFO:Uploading model into container now
2024-03-06 12:37:18,647:INFO:_master_model_container: 1
2024-03-06 12:37:18,647:INFO:_display_container: 2
2024-03-06 12:37:18,648:INFO:LinearRegression(n_jobs=-1)
2024-03-06 12:37:18,648:INFO:create_model() successfully completed......................................
2024-03-06 12:37:18,752:INFO:SubProcess create_model() end ==================================
2024-03-06 12:37:18,752:INFO:Creating metrics dataframe
2024-03-06 12:37:18,760:INFO:Initializing Lasso Regression
2024-03-06 12:37:18,760:INFO:Total runtime is 0.11037225325902303 minutes
2024-03-06 12:37:18,763:INFO:SubProcess create_model() called ==================================
2024-03-06 12:37:18,764:INFO:Initializing create_model()
2024-03-06 12:37:18,764:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=lasso, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:37:18,764:INFO:Checking exceptions
2024-03-06 12:37:18,764:INFO:Importing libraries
2024-03-06 12:37:18,764:INFO:Copying training dataset
2024-03-06 12:37:19,141:INFO:Defining folds
2024-03-06 12:37:19,141:INFO:Declaring metric variables
2024-03-06 12:37:19,141:INFO:Importing untrained model
2024-03-06 12:37:19,159:INFO:Lasso Regression Imported successfully
2024-03-06 12:37:19,159:INFO:Starting cross validation
2024-03-06 12:37:19,159:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:37:23,631:INFO:Calculating mean and std
2024-03-06 12:37:23,631:INFO:Creating metrics dataframe
2024-03-06 12:37:23,639:INFO:Uploading results into container
2024-03-06 12:37:23,640:INFO:Uploading model into container now
2024-03-06 12:37:23,640:INFO:_master_model_container: 2
2024-03-06 12:37:23,640:INFO:_display_container: 2
2024-03-06 12:37:23,640:INFO:Lasso(random_state=3939)
2024-03-06 12:37:23,640:INFO:create_model() successfully completed......................................
2024-03-06 12:37:23,727:INFO:SubProcess create_model() end ==================================
2024-03-06 12:37:23,727:INFO:Creating metrics dataframe
2024-03-06 12:37:23,727:INFO:Initializing Ridge Regression
2024-03-06 12:37:23,727:INFO:Total runtime is 0.19314452012379962 minutes
2024-03-06 12:37:23,727:INFO:SubProcess create_model() called ==================================
2024-03-06 12:37:23,727:INFO:Initializing create_model()
2024-03-06 12:37:23,727:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=ridge, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:37:23,727:INFO:Checking exceptions
2024-03-06 12:37:23,727:INFO:Importing libraries
2024-03-06 12:37:23,727:INFO:Copying training dataset
2024-03-06 12:37:24,133:INFO:Defining folds
2024-03-06 12:37:24,133:INFO:Declaring metric variables
2024-03-06 12:37:24,147:INFO:Importing untrained model
2024-03-06 12:37:24,147:INFO:Ridge Regression Imported successfully
2024-03-06 12:37:24,147:INFO:Starting cross validation
2024-03-06 12:37:24,147:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:37:24,428:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.13321e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:37:24,493:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=5.8851e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:37:24,559:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.82576e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:37:24,629:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.82842e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:37:24,709:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26399e-13): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-06 12:37:24,871:INFO:Calculating mean and std
2024-03-06 12:37:24,871:INFO:Creating metrics dataframe
2024-03-06 12:37:24,876:INFO:Uploading results into container
2024-03-06 12:37:24,877:INFO:Uploading model into container now
2024-03-06 12:37:24,878:INFO:_master_model_container: 3
2024-03-06 12:37:24,878:INFO:_display_container: 2
2024-03-06 12:37:24,878:INFO:Ridge(random_state=3939)
2024-03-06 12:37:24,878:INFO:create_model() successfully completed......................................
2024-03-06 12:37:24,963:INFO:SubProcess create_model() end ==================================
2024-03-06 12:37:24,963:INFO:Creating metrics dataframe
2024-03-06 12:37:24,963:INFO:Initializing Elastic Net
2024-03-06 12:37:24,963:INFO:Total runtime is 0.21375401417414347 minutes
2024-03-06 12:37:24,963:INFO:SubProcess create_model() called ==================================
2024-03-06 12:37:24,963:INFO:Initializing create_model()
2024-03-06 12:37:24,963:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=en, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:37:24,963:INFO:Checking exceptions
2024-03-06 12:37:24,979:INFO:Importing libraries
2024-03-06 12:37:24,979:INFO:Copying training dataset
2024-03-06 12:37:25,358:INFO:Defining folds
2024-03-06 12:37:25,358:INFO:Declaring metric variables
2024-03-06 12:37:25,358:INFO:Importing untrained model
2024-03-06 12:37:25,375:INFO:Elastic Net Imported successfully
2024-03-06 12:37:25,379:INFO:Starting cross validation
2024-03-06 12:37:25,379:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:37:26,293:INFO:Calculating mean and std
2024-03-06 12:37:26,293:INFO:Creating metrics dataframe
2024-03-06 12:37:26,293:INFO:Uploading results into container
2024-03-06 12:37:26,293:INFO:Uploading model into container now
2024-03-06 12:37:26,293:INFO:_master_model_container: 4
2024-03-06 12:37:26,293:INFO:_display_container: 2
2024-03-06 12:37:26,293:INFO:ElasticNet(random_state=3939)
2024-03-06 12:37:26,293:INFO:create_model() successfully completed......................................
2024-03-06 12:37:26,379:INFO:SubProcess create_model() end ==================================
2024-03-06 12:37:26,379:INFO:Creating metrics dataframe
2024-03-06 12:37:26,379:INFO:Initializing Least Angle Regression
2024-03-06 12:37:26,379:INFO:Total runtime is 0.23734260797500611 minutes
2024-03-06 12:37:26,379:INFO:SubProcess create_model() called ==================================
2024-03-06 12:37:26,379:INFO:Initializing create_model()
2024-03-06 12:37:26,379:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=lar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:37:26,379:INFO:Checking exceptions
2024-03-06 12:37:26,379:INFO:Importing libraries
2024-03-06 12:37:26,379:INFO:Copying training dataset
2024-03-06 12:37:26,742:INFO:Defining folds
2024-03-06 12:37:26,742:INFO:Declaring metric variables
2024-03-06 12:37:26,742:INFO:Importing untrained model
2024-03-06 12:37:26,760:INFO:Least Angle Regression Imported successfully
2024-03-06 12:37:26,762:INFO:Starting cross validation
2024-03-06 12:37:26,762:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:37:27,493:INFO:Calculating mean and std
2024-03-06 12:37:27,493:INFO:Creating metrics dataframe
2024-03-06 12:37:27,496:INFO:Uploading results into container
2024-03-06 12:37:27,497:INFO:Uploading model into container now
2024-03-06 12:37:27,497:INFO:_master_model_container: 5
2024-03-06 12:37:27,497:INFO:_display_container: 2
2024-03-06 12:37:27,498:INFO:Lars(random_state=3939)
2024-03-06 12:37:27,498:INFO:create_model() successfully completed......................................
2024-03-06 12:37:27,577:INFO:SubProcess create_model() end ==================================
2024-03-06 12:37:27,577:INFO:Creating metrics dataframe
2024-03-06 12:37:27,577:INFO:Initializing Lasso Least Angle Regression
2024-03-06 12:37:27,577:INFO:Total runtime is 0.2573127349217733 minutes
2024-03-06 12:37:27,577:INFO:SubProcess create_model() called ==================================
2024-03-06 12:37:27,577:INFO:Initializing create_model()
2024-03-06 12:37:27,577:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=llar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:37:27,577:INFO:Checking exceptions
2024-03-06 12:37:27,577:INFO:Importing libraries
2024-03-06 12:37:27,577:INFO:Copying training dataset
2024-03-06 12:37:27,997:INFO:Defining folds
2024-03-06 12:37:27,997:INFO:Declaring metric variables
2024-03-06 12:37:27,997:INFO:Importing untrained model
2024-03-06 12:37:28,012:INFO:Lasso Least Angle Regression Imported successfully
2024-03-06 12:37:28,013:INFO:Starting cross validation
2024-03-06 12:37:28,013:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:37:28,770:INFO:Calculating mean and std
2024-03-06 12:37:28,770:INFO:Creating metrics dataframe
2024-03-06 12:37:28,770:INFO:Uploading results into container
2024-03-06 12:37:28,770:INFO:Uploading model into container now
2024-03-06 12:37:28,770:INFO:_master_model_container: 6
2024-03-06 12:37:28,770:INFO:_display_container: 2
2024-03-06 12:37:28,770:INFO:LassoLars(random_state=3939)
2024-03-06 12:37:28,770:INFO:create_model() successfully completed......................................
2024-03-06 12:37:28,863:INFO:SubProcess create_model() end ==================================
2024-03-06 12:37:28,863:INFO:Creating metrics dataframe
2024-03-06 12:37:28,863:INFO:Initializing Orthogonal Matching Pursuit
2024-03-06 12:37:28,863:INFO:Total runtime is 0.2787390987078349 minutes
2024-03-06 12:37:28,863:INFO:SubProcess create_model() called ==================================
2024-03-06 12:37:28,863:INFO:Initializing create_model()
2024-03-06 12:37:28,863:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=omp, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:37:28,863:INFO:Checking exceptions
2024-03-06 12:37:28,863:INFO:Importing libraries
2024-03-06 12:37:28,863:INFO:Copying training dataset
2024-03-06 12:37:29,251:INFO:Defining folds
2024-03-06 12:37:29,251:INFO:Declaring metric variables
2024-03-06 12:37:29,251:INFO:Importing untrained model
2024-03-06 12:37:29,262:INFO:Orthogonal Matching Pursuit Imported successfully
2024-03-06 12:37:29,262:INFO:Starting cross validation
2024-03-06 12:37:29,262:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:37:30,004:INFO:Calculating mean and std
2024-03-06 12:37:30,004:INFO:Creating metrics dataframe
2024-03-06 12:37:30,004:INFO:Uploading results into container
2024-03-06 12:37:30,004:INFO:Uploading model into container now
2024-03-06 12:37:30,004:INFO:_master_model_container: 7
2024-03-06 12:37:30,004:INFO:_display_container: 2
2024-03-06 12:37:30,004:INFO:OrthogonalMatchingPursuit()
2024-03-06 12:37:30,004:INFO:create_model() successfully completed......................................
2024-03-06 12:37:30,097:INFO:SubProcess create_model() end ==================================
2024-03-06 12:37:30,097:INFO:Creating metrics dataframe
2024-03-06 12:37:30,097:INFO:Initializing Bayesian Ridge
2024-03-06 12:37:30,097:INFO:Total runtime is 0.2993116895357768 minutes
2024-03-06 12:37:30,097:INFO:SubProcess create_model() called ==================================
2024-03-06 12:37:30,097:INFO:Initializing create_model()
2024-03-06 12:37:30,097:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=br, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:37:30,097:INFO:Checking exceptions
2024-03-06 12:37:30,097:INFO:Importing libraries
2024-03-06 12:37:30,097:INFO:Copying training dataset
2024-03-06 12:37:30,462:INFO:Defining folds
2024-03-06 12:37:30,462:INFO:Declaring metric variables
2024-03-06 12:37:30,462:INFO:Importing untrained model
2024-03-06 12:37:30,474:INFO:Bayesian Ridge Imported successfully
2024-03-06 12:37:30,480:INFO:Starting cross validation
2024-03-06 12:37:30,480:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:37:31,390:INFO:Calculating mean and std
2024-03-06 12:37:31,390:INFO:Creating metrics dataframe
2024-03-06 12:37:31,390:INFO:Uploading results into container
2024-03-06 12:37:31,396:INFO:Uploading model into container now
2024-03-06 12:37:31,396:INFO:_master_model_container: 8
2024-03-06 12:37:31,396:INFO:_display_container: 2
2024-03-06 12:37:31,396:INFO:BayesianRidge()
2024-03-06 12:37:31,396:INFO:create_model() successfully completed......................................
2024-03-06 12:37:31,479:INFO:SubProcess create_model() end ==================================
2024-03-06 12:37:31,479:INFO:Creating metrics dataframe
2024-03-06 12:37:31,479:INFO:Initializing Passive Aggressive Regressor
2024-03-06 12:37:31,479:INFO:Total runtime is 0.3223477959632874 minutes
2024-03-06 12:37:31,479:INFO:SubProcess create_model() called ==================================
2024-03-06 12:37:31,479:INFO:Initializing create_model()
2024-03-06 12:37:31,479:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=par, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:37:31,479:INFO:Checking exceptions
2024-03-06 12:37:31,479:INFO:Importing libraries
2024-03-06 12:37:31,479:INFO:Copying training dataset
2024-03-06 12:37:31,856:INFO:Defining folds
2024-03-06 12:37:31,856:INFO:Declaring metric variables
2024-03-06 12:37:31,859:INFO:Importing untrained model
2024-03-06 12:37:31,864:INFO:Passive Aggressive Regressor Imported successfully
2024-03-06 12:37:31,864:INFO:Starting cross validation
2024-03-06 12:37:31,864:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:37:34,701:INFO:Calculating mean and std
2024-03-06 12:37:34,701:INFO:Creating metrics dataframe
2024-03-06 12:37:34,701:INFO:Uploading results into container
2024-03-06 12:37:34,701:INFO:Uploading model into container now
2024-03-06 12:37:34,701:INFO:_master_model_container: 9
2024-03-06 12:37:34,701:INFO:_display_container: 2
2024-03-06 12:37:34,701:INFO:PassiveAggressiveRegressor(random_state=3939)
2024-03-06 12:37:34,701:INFO:create_model() successfully completed......................................
2024-03-06 12:37:34,798:INFO:SubProcess create_model() end ==================================
2024-03-06 12:37:34,798:INFO:Creating metrics dataframe
2024-03-06 12:37:34,798:INFO:Initializing Huber Regressor
2024-03-06 12:37:34,798:INFO:Total runtime is 0.37766468524932867 minutes
2024-03-06 12:37:34,798:INFO:SubProcess create_model() called ==================================
2024-03-06 12:37:34,798:INFO:Initializing create_model()
2024-03-06 12:37:34,811:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=huber, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:37:34,811:INFO:Checking exceptions
2024-03-06 12:37:34,811:INFO:Importing libraries
2024-03-06 12:37:34,811:INFO:Copying training dataset
2024-03-06 12:37:35,214:INFO:Defining folds
2024-03-06 12:37:35,214:INFO:Declaring metric variables
2024-03-06 12:37:35,218:INFO:Importing untrained model
2024-03-06 12:37:35,218:INFO:Huber Regressor Imported successfully
2024-03-06 12:37:35,218:INFO:Starting cross validation
2024-03-06 12:37:35,218:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:37:41,285:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:37:45,936:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:37:49,936:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:37:53,871:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:37:56,339:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-06 12:37:56,538:INFO:Calculating mean and std
2024-03-06 12:37:56,539:INFO:Creating metrics dataframe
2024-03-06 12:37:56,539:INFO:Uploading results into container
2024-03-06 12:37:56,539:INFO:Uploading model into container now
2024-03-06 12:37:56,539:INFO:_master_model_container: 10
2024-03-06 12:37:56,539:INFO:_display_container: 2
2024-03-06 12:37:56,539:INFO:HuberRegressor()
2024-03-06 12:37:56,539:INFO:create_model() successfully completed......................................
2024-03-06 12:37:56,626:INFO:SubProcess create_model() end ==================================
2024-03-06 12:37:56,626:INFO:Creating metrics dataframe
2024-03-06 12:37:56,626:INFO:Initializing K Neighbors Regressor
2024-03-06 12:37:56,626:INFO:Total runtime is 0.7414574424425762 minutes
2024-03-06 12:37:56,639:INFO:SubProcess create_model() called ==================================
2024-03-06 12:37:56,639:INFO:Initializing create_model()
2024-03-06 12:37:56,639:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=knn, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:37:56,639:INFO:Checking exceptions
2024-03-06 12:37:56,639:INFO:Importing libraries
2024-03-06 12:37:56,639:INFO:Copying training dataset
2024-03-06 12:37:57,022:INFO:Defining folds
2024-03-06 12:37:57,022:INFO:Declaring metric variables
2024-03-06 12:37:57,022:INFO:Importing untrained model
2024-03-06 12:37:57,035:INFO:K Neighbors Regressor Imported successfully
2024-03-06 12:37:57,041:INFO:Starting cross validation
2024-03-06 12:37:57,041:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:38:25,693:INFO:Calculating mean and std
2024-03-06 12:38:25,693:INFO:Creating metrics dataframe
2024-03-06 12:38:25,693:INFO:Uploading results into container
2024-03-06 12:38:25,700:INFO:Uploading model into container now
2024-03-06 12:38:25,700:INFO:_master_model_container: 11
2024-03-06 12:38:25,700:INFO:_display_container: 2
2024-03-06 12:38:25,700:INFO:KNeighborsRegressor(n_jobs=-1)
2024-03-06 12:38:25,700:INFO:create_model() successfully completed......................................
2024-03-06 12:38:25,784:INFO:SubProcess create_model() end ==================================
2024-03-06 12:38:25,784:INFO:Creating metrics dataframe
2024-03-06 12:38:25,784:INFO:Initializing Decision Tree Regressor
2024-03-06 12:38:25,784:INFO:Total runtime is 1.2274224201838178 minutes
2024-03-06 12:38:25,784:INFO:SubProcess create_model() called ==================================
2024-03-06 12:38:25,784:INFO:Initializing create_model()
2024-03-06 12:38:25,784:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=dt, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:38:25,784:INFO:Checking exceptions
2024-03-06 12:38:25,784:INFO:Importing libraries
2024-03-06 12:38:25,784:INFO:Copying training dataset
2024-03-06 12:38:26,183:INFO:Defining folds
2024-03-06 12:38:26,183:INFO:Declaring metric variables
2024-03-06 12:38:26,192:INFO:Importing untrained model
2024-03-06 12:38:26,192:INFO:Decision Tree Regressor Imported successfully
2024-03-06 12:38:26,201:INFO:Starting cross validation
2024-03-06 12:38:26,201:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:38:38,955:INFO:Calculating mean and std
2024-03-06 12:38:38,955:INFO:Creating metrics dataframe
2024-03-06 12:38:38,955:INFO:Uploading results into container
2024-03-06 12:38:38,955:INFO:Uploading model into container now
2024-03-06 12:38:38,955:INFO:_master_model_container: 12
2024-03-06 12:38:38,955:INFO:_display_container: 2
2024-03-06 12:38:38,955:INFO:DecisionTreeRegressor(random_state=3939)
2024-03-06 12:38:38,955:INFO:create_model() successfully completed......................................
2024-03-06 12:38:39,043:INFO:SubProcess create_model() end ==================================
2024-03-06 12:38:39,043:INFO:Creating metrics dataframe
2024-03-06 12:38:39,043:INFO:Initializing Random Forest Regressor
2024-03-06 12:38:39,043:INFO:Total runtime is 1.448417663574219 minutes
2024-03-06 12:38:39,057:INFO:SubProcess create_model() called ==================================
2024-03-06 12:38:39,057:INFO:Initializing create_model()
2024-03-06 12:38:39,057:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=rf, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:38:39,057:INFO:Checking exceptions
2024-03-06 12:38:39,057:INFO:Importing libraries
2024-03-06 12:38:39,057:INFO:Copying training dataset
2024-03-06 12:38:39,438:INFO:Defining folds
2024-03-06 12:38:39,438:INFO:Declaring metric variables
2024-03-06 12:38:39,438:INFO:Importing untrained model
2024-03-06 12:38:39,451:INFO:Random Forest Regressor Imported successfully
2024-03-06 12:38:39,457:INFO:Starting cross validation
2024-03-06 12:38:39,457:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:47:35,446:INFO:Calculating mean and std
2024-03-06 12:47:35,476:INFO:Creating metrics dataframe
2024-03-06 12:47:35,493:INFO:Uploading results into container
2024-03-06 12:47:35,493:INFO:Uploading model into container now
2024-03-06 12:47:35,502:INFO:_master_model_container: 13
2024-03-06 12:47:35,502:INFO:_display_container: 2
2024-03-06 12:47:35,509:INFO:RandomForestRegressor(n_jobs=-1, random_state=3939)
2024-03-06 12:47:35,509:INFO:create_model() successfully completed......................................
2024-03-06 12:47:35,934:INFO:SubProcess create_model() end ==================================
2024-03-06 12:47:35,934:INFO:Creating metrics dataframe
2024-03-06 12:47:35,943:INFO:Initializing Extra Trees Regressor
2024-03-06 12:47:35,943:INFO:Total runtime is 10.39674934943517 minutes
2024-03-06 12:47:35,960:INFO:SubProcess create_model() called ==================================
2024-03-06 12:47:35,960:INFO:Initializing create_model()
2024-03-06 12:47:35,960:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=et, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:47:35,960:INFO:Checking exceptions
2024-03-06 12:47:35,960:INFO:Importing libraries
2024-03-06 12:47:35,960:INFO:Copying training dataset
2024-03-06 12:47:36,532:INFO:Defining folds
2024-03-06 12:47:36,532:INFO:Declaring metric variables
2024-03-06 12:47:36,532:INFO:Importing untrained model
2024-03-06 12:47:36,546:INFO:Extra Trees Regressor Imported successfully
2024-03-06 12:47:36,546:INFO:Starting cross validation
2024-03-06 12:47:36,546:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:51:12,992:WARNING:d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
2 fits failed out of a total of 5.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
2 fits failed with the following error:
Traceback (most recent call last):
  File "d:\anaconda\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 276, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "d:\anaconda\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 489, in fit
    trees = Parallel(
            ^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 67, in __call__
    return super().__call__(iterable_with_config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 1098, in __call__
    self.retrieve()
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 975, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 774, in get
    raise self._value
  File "d:\anaconda\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
                    ^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\_parallel_backends.py", line 620, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in __call__
    return [func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\joblib\parallel.py", line 288, in <listcomp>
    return [func(*args, **kwargs)
            ^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\utils\parallel.py", line 129, in __call__
    return self.function(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "d:\anaconda\Lib\site-packages\sklearn\ensemble\_forest.py", line 200, in _parallel_build_trees
    tree._fit(
  File "d:\anaconda\Lib\site-packages\sklearn\tree\_classes.py", line 472, in _fit
    builder.build(self.tree_, X, y, sample_weight, missing_values_in_feature_mask)
  File "sklearn\\tree\\_tree.pyx", line 166, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 285, in sklearn.tree._tree.DepthFirstTreeBuilder.build
  File "sklearn\\tree\\_tree.pyx", line 940, in sklearn.tree._tree.Tree._add_node
  File "sklearn\\tree\\_tree.pyx", line 908, in sklearn.tree._tree.Tree._resize_c
  File "sklearn\\tree\\_utils.pyx", line 35, in sklearn.tree._utils.safe_realloc
MemoryError: could not allocate 134217728 bytes

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-03-06 12:51:13,031:INFO:Calculating mean and std
2024-03-06 12:51:13,094:INFO:Creating metrics dataframe
2024-03-06 12:51:13,167:INFO:Uploading results into container
2024-03-06 12:51:13,180:INFO:Uploading model into container now
2024-03-06 12:51:13,186:INFO:_master_model_container: 14
2024-03-06 12:51:13,186:INFO:_display_container: 2
2024-03-06 12:51:13,203:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=3939)
2024-03-06 12:51:13,203:INFO:create_model() successfully completed......................................
2024-03-06 12:51:13,796:INFO:SubProcess create_model() end ==================================
2024-03-06 12:51:13,796:INFO:Creating metrics dataframe
2024-03-06 12:51:13,812:INFO:Initializing AdaBoost Regressor
2024-03-06 12:51:13,813:INFO:Total runtime is 14.027893181641897 minutes
2024-03-06 12:51:13,817:INFO:SubProcess create_model() called ==================================
2024-03-06 12:51:13,817:INFO:Initializing create_model()
2024-03-06 12:51:13,817:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=ada, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:51:13,817:INFO:Checking exceptions
2024-03-06 12:51:13,817:INFO:Importing libraries
2024-03-06 12:51:13,818:INFO:Copying training dataset
2024-03-06 12:51:14,478:INFO:Defining folds
2024-03-06 12:51:14,478:INFO:Declaring metric variables
2024-03-06 12:51:14,478:INFO:Importing untrained model
2024-03-06 12:51:14,493:INFO:AdaBoost Regressor Imported successfully
2024-03-06 12:51:14,494:INFO:Starting cross validation
2024-03-06 12:51:14,494:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:52:01,975:INFO:Calculating mean and std
2024-03-06 12:52:01,975:INFO:Creating metrics dataframe
2024-03-06 12:52:01,975:INFO:Uploading results into container
2024-03-06 12:52:01,975:INFO:Uploading model into container now
2024-03-06 12:52:01,975:INFO:_master_model_container: 15
2024-03-06 12:52:01,975:INFO:_display_container: 2
2024-03-06 12:52:01,975:INFO:AdaBoostRegressor(random_state=3939)
2024-03-06 12:52:01,975:INFO:create_model() successfully completed......................................
2024-03-06 12:52:02,062:INFO:SubProcess create_model() end ==================================
2024-03-06 12:52:02,062:INFO:Creating metrics dataframe
2024-03-06 12:52:02,079:INFO:Initializing Gradient Boosting Regressor
2024-03-06 12:52:02,079:INFO:Total runtime is 14.832348942756653 minutes
2024-03-06 12:52:02,079:INFO:SubProcess create_model() called ==================================
2024-03-06 12:52:02,079:INFO:Initializing create_model()
2024-03-06 12:52:02,079:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=gbr, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:52:02,079:INFO:Checking exceptions
2024-03-06 12:52:02,079:INFO:Importing libraries
2024-03-06 12:52:02,079:INFO:Copying training dataset
2024-03-06 12:52:02,443:INFO:Defining folds
2024-03-06 12:52:02,443:INFO:Declaring metric variables
2024-03-06 12:52:02,451:INFO:Importing untrained model
2024-03-06 12:52:02,451:INFO:Gradient Boosting Regressor Imported successfully
2024-03-06 12:52:02,451:INFO:Starting cross validation
2024-03-06 12:52:02,451:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:54:17,675:INFO:Calculating mean and std
2024-03-06 12:54:17,675:INFO:Creating metrics dataframe
2024-03-06 12:54:17,682:INFO:Uploading results into container
2024-03-06 12:54:17,683:INFO:Uploading model into container now
2024-03-06 12:54:17,684:INFO:_master_model_container: 16
2024-03-06 12:54:17,684:INFO:_display_container: 2
2024-03-06 12:54:17,685:INFO:GradientBoostingRegressor(random_state=3939)
2024-03-06 12:54:17,686:INFO:create_model() successfully completed......................................
2024-03-06 12:54:17,796:INFO:SubProcess create_model() end ==================================
2024-03-06 12:54:17,796:INFO:Creating metrics dataframe
2024-03-06 12:54:17,813:INFO:Initializing Extreme Gradient Boosting
2024-03-06 12:54:17,813:INFO:Total runtime is 17.094580562909442 minutes
2024-03-06 12:54:17,813:INFO:SubProcess create_model() called ==================================
2024-03-06 12:54:17,813:INFO:Initializing create_model()
2024-03-06 12:54:17,813:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=xgboost, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:54:17,813:INFO:Checking exceptions
2024-03-06 12:54:17,813:INFO:Importing libraries
2024-03-06 12:54:17,813:INFO:Copying training dataset
2024-03-06 12:54:18,247:INFO:Defining folds
2024-03-06 12:54:18,247:INFO:Declaring metric variables
2024-03-06 12:54:18,258:INFO:Importing untrained model
2024-03-06 12:54:18,265:INFO:Extreme Gradient Boosting Imported successfully
2024-03-06 12:54:18,265:INFO:Starting cross validation
2024-03-06 12:54:18,265:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:54:24,840:INFO:Calculating mean and std
2024-03-06 12:54:24,840:INFO:Creating metrics dataframe
2024-03-06 12:54:24,840:INFO:Uploading results into container
2024-03-06 12:54:24,840:INFO:Uploading model into container now
2024-03-06 12:54:24,849:INFO:_master_model_container: 17
2024-03-06 12:54:24,849:INFO:_display_container: 2
2024-03-06 12:54:24,853:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=3939, ...)
2024-03-06 12:54:24,853:INFO:create_model() successfully completed......................................
2024-03-06 12:54:24,941:INFO:SubProcess create_model() end ==================================
2024-03-06 12:54:24,942:INFO:Creating metrics dataframe
2024-03-06 12:54:24,959:INFO:Initializing Light Gradient Boosting Machine
2024-03-06 12:54:24,959:INFO:Total runtime is 17.213686796029407 minutes
2024-03-06 12:54:24,962:INFO:SubProcess create_model() called ==================================
2024-03-06 12:54:24,963:INFO:Initializing create_model()
2024-03-06 12:54:24,963:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=lightgbm, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:54:24,963:INFO:Checking exceptions
2024-03-06 12:54:24,963:INFO:Importing libraries
2024-03-06 12:54:24,963:INFO:Copying training dataset
2024-03-06 12:54:25,366:INFO:Defining folds
2024-03-06 12:54:25,366:INFO:Declaring metric variables
2024-03-06 12:54:25,366:INFO:Importing untrained model
2024-03-06 12:54:25,388:INFO:Light Gradient Boosting Machine Imported successfully
2024-03-06 12:54:25,388:INFO:Starting cross validation
2024-03-06 12:54:25,388:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:54:30,047:INFO:Calculating mean and std
2024-03-06 12:54:30,047:INFO:Creating metrics dataframe
2024-03-06 12:54:30,054:INFO:Uploading results into container
2024-03-06 12:54:30,055:INFO:Uploading model into container now
2024-03-06 12:54:30,056:INFO:_master_model_container: 18
2024-03-06 12:54:30,057:INFO:_display_container: 2
2024-03-06 12:54:30,057:INFO:LGBMRegressor(n_jobs=-1, random_state=3939)
2024-03-06 12:54:30,058:INFO:create_model() successfully completed......................................
2024-03-06 12:54:30,202:INFO:SubProcess create_model() end ==================================
2024-03-06 12:54:30,202:INFO:Creating metrics dataframe
2024-03-06 12:54:30,218:INFO:Initializing CatBoost Regressor
2024-03-06 12:54:30,218:INFO:Total runtime is 17.301338164011636 minutes
2024-03-06 12:54:30,218:INFO:SubProcess create_model() called ==================================
2024-03-06 12:54:30,218:INFO:Initializing create_model()
2024-03-06 12:54:30,218:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=catboost, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:54:30,218:INFO:Checking exceptions
2024-03-06 12:54:30,218:INFO:Importing libraries
2024-03-06 12:54:30,218:INFO:Copying training dataset
2024-03-06 12:54:30,804:INFO:Defining folds
2024-03-06 12:54:30,804:INFO:Declaring metric variables
2024-03-06 12:54:30,804:INFO:Importing untrained model
2024-03-06 12:54:30,819:INFO:CatBoost Regressor Imported successfully
2024-03-06 12:54:30,819:INFO:Starting cross validation
2024-03-06 12:54:30,819:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:56:25,305:INFO:Calculating mean and std
2024-03-06 12:56:25,305:INFO:Creating metrics dataframe
2024-03-06 12:56:25,313:INFO:Uploading results into container
2024-03-06 12:56:25,313:INFO:Uploading model into container now
2024-03-06 12:56:25,313:INFO:_master_model_container: 19
2024-03-06 12:56:25,313:INFO:_display_container: 2
2024-03-06 12:56:25,313:INFO:<catboost.core.CatBoostRegressor object at 0x0000011F425156D0>
2024-03-06 12:56:25,313:INFO:create_model() successfully completed......................................
2024-03-06 12:56:25,448:INFO:SubProcess create_model() end ==================================
2024-03-06 12:56:25,449:INFO:Creating metrics dataframe
2024-03-06 12:56:25,462:INFO:Initializing Dummy Regressor
2024-03-06 12:56:25,462:INFO:Total runtime is 19.22206407388051 minutes
2024-03-06 12:56:25,466:INFO:SubProcess create_model() called ==================================
2024-03-06 12:56:25,466:INFO:Initializing create_model()
2024-03-06 12:56:25,466:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=dummy, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000011F425273D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:56:25,466:INFO:Checking exceptions
2024-03-06 12:56:25,466:INFO:Importing libraries
2024-03-06 12:56:25,466:INFO:Copying training dataset
2024-03-06 12:56:26,029:INFO:Defining folds
2024-03-06 12:56:26,029:INFO:Declaring metric variables
2024-03-06 12:56:26,029:INFO:Importing untrained model
2024-03-06 12:56:26,029:INFO:Dummy Regressor Imported successfully
2024-03-06 12:56:26,045:INFO:Starting cross validation
2024-03-06 12:56:26,045:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-06 12:56:27,495:INFO:Calculating mean and std
2024-03-06 12:56:27,497:INFO:Creating metrics dataframe
2024-03-06 12:56:27,500:INFO:Uploading results into container
2024-03-06 12:56:27,500:INFO:Uploading model into container now
2024-03-06 12:56:27,500:INFO:_master_model_container: 20
2024-03-06 12:56:27,500:INFO:_display_container: 2
2024-03-06 12:56:27,500:INFO:DummyRegressor()
2024-03-06 12:56:27,500:INFO:create_model() successfully completed......................................
2024-03-06 12:56:27,605:INFO:SubProcess create_model() end ==================================
2024-03-06 12:56:27,606:INFO:Creating metrics dataframe
2024-03-06 12:56:27,634:INFO:Initializing create_model()
2024-03-06 12:56:27,634:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=RandomForestRegressor(n_jobs=-1, random_state=3939), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 12:56:27,634:INFO:Checking exceptions
2024-03-06 12:56:27,639:INFO:Importing libraries
2024-03-06 12:56:27,639:INFO:Copying training dataset
2024-03-06 12:56:28,070:INFO:Defining folds
2024-03-06 12:56:28,070:INFO:Declaring metric variables
2024-03-06 12:56:28,070:INFO:Importing untrained model
2024-03-06 12:56:28,070:INFO:Declaring custom model
2024-03-06 12:56:28,070:INFO:Random Forest Regressor Imported successfully
2024-03-06 12:56:28,070:INFO:Cross validation set to False
2024-03-06 12:56:28,070:INFO:Fitting Model
2024-03-06 13:00:24,110:INFO:RandomForestRegressor(n_jobs=-1, random_state=3939)
2024-03-06 13:00:24,110:INFO:create_model() successfully completed......................................
2024-03-06 13:00:24,233:INFO:Initializing create_model()
2024-03-06 13:00:24,233:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=<catboost.core.CatBoostRegressor object at 0x0000011F425156D0>, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:00:24,233:INFO:Checking exceptions
2024-03-06 13:00:24,237:INFO:Importing libraries
2024-03-06 13:00:24,237:INFO:Copying training dataset
2024-03-06 13:00:24,737:INFO:Defining folds
2024-03-06 13:00:24,737:INFO:Declaring metric variables
2024-03-06 13:00:24,737:INFO:Importing untrained model
2024-03-06 13:00:24,737:INFO:Declaring custom model
2024-03-06 13:00:24,737:INFO:CatBoost Regressor Imported successfully
2024-03-06 13:00:24,737:INFO:Cross validation set to False
2024-03-06 13:00:24,737:INFO:Fitting Model
2024-03-06 13:01:16,581:INFO:<catboost.core.CatBoostRegressor object at 0x0000011F4237DA10>
2024-03-06 13:01:16,581:INFO:create_model() successfully completed......................................
2024-03-06 13:01:16,728:INFO:Initializing create_model()
2024-03-06 13:01:16,728:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=LGBMRegressor(n_jobs=-1, random_state=3939), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:01:16,728:INFO:Checking exceptions
2024-03-06 13:01:16,731:INFO:Importing libraries
2024-03-06 13:01:16,732:INFO:Copying training dataset
2024-03-06 13:01:17,273:INFO:Defining folds
2024-03-06 13:01:17,273:INFO:Declaring metric variables
2024-03-06 13:01:17,273:INFO:Importing untrained model
2024-03-06 13:01:17,273:INFO:Declaring custom model
2024-03-06 13:01:17,273:INFO:Light Gradient Boosting Machine Imported successfully
2024-03-06 13:01:17,273:INFO:Cross validation set to False
2024-03-06 13:01:17,273:INFO:Fitting Model
2024-03-06 13:01:17,714:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.004725 seconds.
2024-03-06 13:01:17,714:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-03-06 13:01:17,714:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-03-06 13:01:17,714:INFO:[LightGBM] [Info] Total Bins 2040
2024-03-06 13:01:17,714:INFO:[LightGBM] [Info] Number of data points in the train set: 879991, number of used features: 8
2024-03-06 13:01:17,714:INFO:[LightGBM] [Info] Start training from score 5.914811
2024-03-06 13:01:18,927:INFO:LGBMRegressor(n_jobs=-1, random_state=3939)
2024-03-06 13:01:18,927:INFO:create_model() successfully completed......................................
2024-03-06 13:01:19,078:INFO:Initializing create_model()
2024-03-06 13:01:19,078:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=3939, ...), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:01:19,078:INFO:Checking exceptions
2024-03-06 13:01:19,080:INFO:Importing libraries
2024-03-06 13:01:19,080:INFO:Copying training dataset
2024-03-06 13:01:19,657:INFO:Defining folds
2024-03-06 13:01:19,657:INFO:Declaring metric variables
2024-03-06 13:01:19,657:INFO:Importing untrained model
2024-03-06 13:01:19,657:INFO:Declaring custom model
2024-03-06 13:01:19,657:INFO:Extreme Gradient Boosting Imported successfully
2024-03-06 13:01:19,657:INFO:Cross validation set to False
2024-03-06 13:01:19,657:INFO:Fitting Model
2024-03-06 13:01:22,710:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=3939, ...)
2024-03-06 13:01:22,710:INFO:create_model() successfully completed......................................
2024-03-06 13:01:22,859:INFO:Initializing create_model()
2024-03-06 13:01:22,859:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=KNeighborsRegressor(n_jobs=-1), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:01:22,859:INFO:Checking exceptions
2024-03-06 13:01:22,866:INFO:Importing libraries
2024-03-06 13:01:22,866:INFO:Copying training dataset
2024-03-06 13:01:23,459:INFO:Defining folds
2024-03-06 13:01:23,459:INFO:Declaring metric variables
2024-03-06 13:01:23,459:INFO:Importing untrained model
2024-03-06 13:01:23,459:INFO:Declaring custom model
2024-03-06 13:01:23,475:INFO:K Neighbors Regressor Imported successfully
2024-03-06 13:01:23,476:INFO:Cross validation set to False
2024-03-06 13:01:23,476:INFO:Fitting Model
2024-03-06 13:01:29,342:INFO:KNeighborsRegressor(n_jobs=-1)
2024-03-06 13:01:29,342:INFO:create_model() successfully completed......................................
2024-03-06 13:01:29,460:INFO:Initializing create_model()
2024-03-06 13:01:29,461:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=DecisionTreeRegressor(random_state=3939), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:01:29,461:INFO:Checking exceptions
2024-03-06 13:01:29,466:INFO:Importing libraries
2024-03-06 13:01:29,466:INFO:Copying training dataset
2024-03-06 13:01:29,995:INFO:Defining folds
2024-03-06 13:01:29,995:INFO:Declaring metric variables
2024-03-06 13:01:29,995:INFO:Importing untrained model
2024-03-06 13:01:29,995:INFO:Declaring custom model
2024-03-06 13:01:29,995:INFO:Decision Tree Regressor Imported successfully
2024-03-06 13:01:29,995:INFO:Cross validation set to False
2024-03-06 13:01:29,995:INFO:Fitting Model
2024-03-06 13:01:43,103:INFO:DecisionTreeRegressor(random_state=3939)
2024-03-06 13:01:43,103:INFO:create_model() successfully completed......................................
2024-03-06 13:01:43,217:INFO:Initializing create_model()
2024-03-06 13:01:43,217:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=GradientBoostingRegressor(random_state=3939), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:01:43,218:INFO:Checking exceptions
2024-03-06 13:01:43,220:INFO:Importing libraries
2024-03-06 13:01:43,220:INFO:Copying training dataset
2024-03-06 13:01:43,668:INFO:Defining folds
2024-03-06 13:01:43,668:INFO:Declaring metric variables
2024-03-06 13:01:43,669:INFO:Importing untrained model
2024-03-06 13:01:43,669:INFO:Declaring custom model
2024-03-06 13:01:43,670:INFO:Gradient Boosting Regressor Imported successfully
2024-03-06 13:01:43,671:INFO:Cross validation set to False
2024-03-06 13:01:43,671:INFO:Fitting Model
2024-03-06 13:03:50,665:INFO:GradientBoostingRegressor(random_state=3939)
2024-03-06 13:03:50,665:INFO:create_model() successfully completed......................................
2024-03-06 13:03:50,808:INFO:_master_model_container: 20
2024-03-06 13:03:50,809:INFO:_display_container: 2
2024-03-06 13:03:50,811:INFO:[RandomForestRegressor(n_jobs=-1, random_state=3939), <catboost.core.CatBoostRegressor object at 0x0000011F4237DA10>, LGBMRegressor(n_jobs=-1, random_state=3939), XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=3939, ...), KNeighborsRegressor(n_jobs=-1), DecisionTreeRegressor(random_state=3939), GradientBoostingRegressor(random_state=3939)]
2024-03-06 13:03:50,811:INFO:compare_models() successfully completed......................................
2024-03-06 13:05:24,109:INFO:Initializing finalize_model()
2024-03-06 13:05:24,109:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=RandomForestRegressor(n_jobs=-1, random_state=3939), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:05:24,110:INFO:Finalizing RandomForestRegressor(n_jobs=-1, random_state=3939)
2024-03-06 13:05:24,301:INFO:Initializing create_model()
2024-03-06 13:05:24,301:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=RandomForestRegressor(n_jobs=-1, random_state=3939), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:05:24,301:INFO:Checking exceptions
2024-03-06 13:05:24,301:INFO:Importing libraries
2024-03-06 13:05:24,301:INFO:Copying training dataset
2024-03-06 13:05:24,336:INFO:Defining folds
2024-03-06 13:05:24,336:INFO:Declaring metric variables
2024-03-06 13:05:24,336:INFO:Importing untrained model
2024-03-06 13:05:24,336:INFO:Declaring custom model
2024-03-06 13:05:24,336:INFO:Random Forest Regressor Imported successfully
2024-03-06 13:05:24,336:INFO:Cross validation set to False
2024-03-06 13:05:24,336:INFO:Fitting Model
2024-03-06 13:11:10,254:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=3939))])
2024-03-06 13:11:10,266:INFO:create_model() successfully completed......................................
2024-03-06 13:11:10,766:INFO:_master_model_container: 20
2024-03-06 13:11:10,766:INFO:_display_container: 2
2024-03-06 13:11:10,766:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=3939))])
2024-03-06 13:11:10,766:INFO:finalize_model() successfully completed......................................
2024-03-06 13:11:10,867:INFO:Initializing predict_model()
2024-03-06 13:11:10,867:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=3939))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F15B80720>)
2024-03-06 13:11:10,867:INFO:Checking exceptions
2024-03-06 13:11:10,867:INFO:Preloading libraries
2024-03-06 13:11:10,867:INFO:Set up data.
2024-03-06 13:11:11,073:INFO:Set up index.
2024-03-06 13:11:20,942:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:11:20,989:INFO:Initializing finalize_model()
2024-03-06 13:11:20,989:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=<catboost.core.CatBoostRegressor object at 0x0000011F4237DA10>, fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:11:20,989:INFO:Finalizing <catboost.core.CatBoostRegressor object at 0x0000011F4237DA10>
2024-03-06 13:11:21,327:INFO:Initializing create_model()
2024-03-06 13:11:21,327:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=<catboost.core.CatBoostRegressor object at 0x0000011F4237DA10>, fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:11:21,327:INFO:Checking exceptions
2024-03-06 13:11:21,327:INFO:Importing libraries
2024-03-06 13:11:21,327:INFO:Copying training dataset
2024-03-06 13:11:21,363:INFO:Defining folds
2024-03-06 13:11:21,363:INFO:Declaring metric variables
2024-03-06 13:11:21,363:INFO:Importing untrained model
2024-03-06 13:11:21,363:INFO:Declaring custom model
2024-03-06 13:11:21,379:INFO:CatBoost Regressor Imported successfully
2024-03-06 13:11:21,379:INFO:Cross validation set to False
2024-03-06 13:11:21,379:INFO:Fitting Model
2024-03-06 13:12:32,964:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x0000011F1AA79950>)])
2024-03-06 13:12:32,964:INFO:create_model() successfully completed......................................
2024-03-06 13:12:33,065:INFO:_master_model_container: 20
2024-03-06 13:12:33,065:INFO:_display_container: 2
2024-03-06 13:12:33,065:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x0000011F1AA79950>)])
2024-03-06 13:12:33,065:INFO:finalize_model() successfully completed......................................
2024-03-06 13:12:34,316:INFO:Initializing predict_model()
2024-03-06 13:12:34,316:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x0000011F1AA79950>)]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F43248360>)
2024-03-06 13:12:34,316:INFO:Checking exceptions
2024-03-06 13:12:34,316:INFO:Preloading libraries
2024-03-06 13:12:34,332:INFO:Set up data.
2024-03-06 13:12:34,428:INFO:Set up index.
2024-03-06 13:12:34,841:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:12:34,867:INFO:Initializing finalize_model()
2024-03-06 13:12:34,867:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=LGBMRegressor(n_jobs=-1, random_state=3939), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:12:34,867:INFO:Finalizing LGBMRegressor(n_jobs=-1, random_state=3939)
2024-03-06 13:12:35,150:INFO:Initializing create_model()
2024-03-06 13:12:35,150:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=LGBMRegressor(n_jobs=-1, random_state=3939), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:12:35,150:INFO:Checking exceptions
2024-03-06 13:12:35,150:INFO:Importing libraries
2024-03-06 13:12:35,150:INFO:Copying training dataset
2024-03-06 13:12:35,206:INFO:Defining folds
2024-03-06 13:12:35,206:INFO:Declaring metric variables
2024-03-06 13:12:35,206:INFO:Importing untrained model
2024-03-06 13:12:35,206:INFO:Declaring custom model
2024-03-06 13:12:35,207:INFO:Light Gradient Boosting Machine Imported successfully
2024-03-06 13:12:35,208:INFO:Cross validation set to False
2024-03-06 13:12:35,208:INFO:Fitting Model
2024-03-06 13:12:36,832:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022554 seconds.
2024-03-06 13:12:36,832:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-03-06 13:12:36,833:INFO:[LightGBM] [Info] Total Bins 2040
2024-03-06 13:12:36,834:INFO:[LightGBM] [Info] Number of data points in the train set: 1257130, number of used features: 8
2024-03-06 13:12:36,840:INFO:[LightGBM] [Info] Start training from score 5.909018
2024-03-06 13:12:38,899:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=3939))])
2024-03-06 13:12:38,901:INFO:create_model() successfully completed......................................
2024-03-06 13:12:39,023:INFO:_master_model_container: 20
2024-03-06 13:12:39,023:INFO:_display_container: 2
2024-03-06 13:12:39,038:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=3939))])
2024-03-06 13:12:39,038:INFO:finalize_model() successfully completed......................................
2024-03-06 13:12:39,122:INFO:Initializing predict_model()
2024-03-06 13:12:39,122:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=3939))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F4268F060>)
2024-03-06 13:12:39,122:INFO:Checking exceptions
2024-03-06 13:12:39,122:INFO:Preloading libraries
2024-03-06 13:12:39,122:INFO:Set up data.
2024-03-06 13:12:39,190:INFO:Set up index.
2024-03-06 13:12:40,254:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:12:40,287:INFO:Initializing finalize_model()
2024-03-06 13:12:40,287:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=3939, ...), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:12:40,287:INFO:Finalizing XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=3939, ...)
2024-03-06 13:12:40,454:INFO:Initializing create_model()
2024-03-06 13:12:40,454:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=3939, ...), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:12:40,454:INFO:Checking exceptions
2024-03-06 13:12:40,454:INFO:Importing libraries
2024-03-06 13:12:40,454:INFO:Copying training dataset
2024-03-06 13:12:40,485:INFO:Defining folds
2024-03-06 13:12:40,485:INFO:Declaring metric variables
2024-03-06 13:12:40,485:INFO:Importing untrained model
2024-03-06 13:12:40,485:INFO:Declaring custom model
2024-03-06 13:12:40,501:INFO:Extreme Gradient Boosting Imported successfully
2024-03-06 13:12:40,501:INFO:Cross validation set to False
2024-03-06 13:12:40,501:INFO:Fitting Model
2024-03-06 13:12:44,766:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent...
                              feature_types=None, gamma=None, grow_policy=None,
                              importance_type=None,
                              interaction_constraints=None, learning_rate=None,
                              max_bin=None, max_cat_threshold=None,
                              max_cat_to_onehot=None, max_delta_step=None,
                              max_depth=None, max_leaves=None,
                              min_child_weight=None, missing=nan,
                              monotone_constraints=None, multi_strategy=None,
                              n_estimators=None, n_jobs=-1,
                              num_parallel_tree=None, random_state=3939, ...))])
2024-03-06 13:12:44,767:INFO:create_model() successfully completed......................................
2024-03-06 13:12:44,885:INFO:_master_model_container: 20
2024-03-06 13:12:44,885:INFO:_display_container: 2
2024-03-06 13:12:44,902:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent...
                              feature_types=None, gamma=None, grow_policy=None,
                              importance_type=None,
                              interaction_constraints=None, learning_rate=None,
                              max_bin=None, max_cat_threshold=None,
                              max_cat_to_onehot=None, max_delta_step=None,
                              max_depth=None, max_leaves=None,
                              min_child_weight=None, missing=nan,
                              monotone_constraints=None, multi_strategy=None,
                              n_estimators=None, n_jobs=-1,
                              num_parallel_tree=None, random_state=3939, ...))])
2024-03-06 13:12:44,903:INFO:finalize_model() successfully completed......................................
2024-03-06 13:12:44,986:INFO:Initializing predict_model()
2024-03-06 13:12:44,986:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent...
                              feature_types=None, gamma=None, grow_policy=None,
                              importance_type=None,
                              interaction_constraints=None, learning_rate=None,
                              max_bin=None, max_cat_threshold=None,
                              max_cat_to_onehot=None, max_delta_step=None,
                              max_depth=None, max_leaves=None,
                              min_child_weight=None, missing=nan,
                              monotone_constraints=None, multi_strategy=None,
                              n_estimators=None, n_jobs=-1,
                              num_parallel_tree=None, random_state=3939, ...))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F0F097100>)
2024-03-06 13:12:44,986:INFO:Checking exceptions
2024-03-06 13:12:44,986:INFO:Preloading libraries
2024-03-06 13:12:45,003:INFO:Set up data.
2024-03-06 13:12:45,061:INFO:Set up index.
2024-03-06 13:12:45,537:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:12:45,569:INFO:Initializing finalize_model()
2024-03-06 13:12:45,569:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=KNeighborsRegressor(n_jobs=-1), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:12:45,569:INFO:Finalizing KNeighborsRegressor(n_jobs=-1)
2024-03-06 13:12:45,769:INFO:Initializing create_model()
2024-03-06 13:12:45,769:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=KNeighborsRegressor(n_jobs=-1), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:12:45,769:INFO:Checking exceptions
2024-03-06 13:12:45,769:INFO:Importing libraries
2024-03-06 13:12:45,769:INFO:Copying training dataset
2024-03-06 13:12:45,804:INFO:Defining folds
2024-03-06 13:12:45,804:INFO:Declaring metric variables
2024-03-06 13:12:45,804:INFO:Importing untrained model
2024-03-06 13:12:45,804:INFO:Declaring custom model
2024-03-06 13:12:45,804:INFO:K Neighbors Regressor Imported successfully
2024-03-06 13:12:45,804:INFO:Cross validation set to False
2024-03-06 13:12:45,804:INFO:Fitting Model
2024-03-06 13:12:53,236:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-06 13:12:53,236:INFO:create_model() successfully completed......................................
2024-03-06 13:12:53,308:INFO:_master_model_container: 20
2024-03-06 13:12:53,308:INFO:_display_container: 2
2024-03-06 13:12:53,324:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-06 13:12:53,324:INFO:finalize_model() successfully completed......................................
2024-03-06 13:12:53,391:INFO:Initializing predict_model()
2024-03-06 13:12:53,391:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F1A1FD080>)
2024-03-06 13:12:53,391:INFO:Checking exceptions
2024-03-06 13:12:53,391:INFO:Preloading libraries
2024-03-06 13:12:53,407:INFO:Set up data.
2024-03-06 13:12:53,455:INFO:Set up index.
2024-03-06 13:13:39,840:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:13:39,857:INFO:Initializing finalize_model()
2024-03-06 13:13:39,857:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=DecisionTreeRegressor(random_state=3939), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:13:39,857:INFO:Finalizing DecisionTreeRegressor(random_state=3939)
2024-03-06 13:13:40,074:INFO:Initializing create_model()
2024-03-06 13:13:40,074:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=DecisionTreeRegressor(random_state=3939), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:13:40,074:INFO:Checking exceptions
2024-03-06 13:13:40,074:INFO:Importing libraries
2024-03-06 13:13:40,074:INFO:Copying training dataset
2024-03-06 13:13:40,107:INFO:Defining folds
2024-03-06 13:13:40,107:INFO:Declaring metric variables
2024-03-06 13:13:40,107:INFO:Importing untrained model
2024-03-06 13:13:40,107:INFO:Declaring custom model
2024-03-06 13:13:40,107:INFO:Decision Tree Regressor Imported successfully
2024-03-06 13:13:40,107:INFO:Cross validation set to False
2024-03-06 13:13:40,107:INFO:Fitting Model
2024-03-06 13:13:54,262:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', DecisionTreeRegressor(random_state=3939))])
2024-03-06 13:13:54,262:INFO:create_model() successfully completed......................................
2024-03-06 13:13:54,346:INFO:_master_model_container: 20
2024-03-06 13:13:54,346:INFO:_display_container: 2
2024-03-06 13:13:54,346:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', DecisionTreeRegressor(random_state=3939))])
2024-03-06 13:13:54,361:INFO:finalize_model() successfully completed......................................
2024-03-06 13:13:54,462:INFO:Initializing predict_model()
2024-03-06 13:13:54,462:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', DecisionTreeRegressor(random_state=3939))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F4268F060>)
2024-03-06 13:13:54,462:INFO:Checking exceptions
2024-03-06 13:13:54,462:INFO:Preloading libraries
2024-03-06 13:13:54,462:INFO:Set up data.
2024-03-06 13:13:54,513:INFO:Set up index.
2024-03-06 13:13:54,801:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:13:54,835:INFO:Initializing finalize_model()
2024-03-06 13:13:54,835:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=GradientBoostingRegressor(random_state=3939), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:13:54,835:INFO:Finalizing GradientBoostingRegressor(random_state=3939)
2024-03-06 13:13:54,997:INFO:Initializing create_model()
2024-03-06 13:13:54,997:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=GradientBoostingRegressor(random_state=3939), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:13:54,997:INFO:Checking exceptions
2024-03-06 13:13:54,997:INFO:Importing libraries
2024-03-06 13:13:54,997:INFO:Copying training dataset
2024-03-06 13:13:55,029:INFO:Defining folds
2024-03-06 13:13:55,029:INFO:Declaring metric variables
2024-03-06 13:13:55,029:INFO:Importing untrained model
2024-03-06 13:13:55,029:INFO:Declaring custom model
2024-03-06 13:13:55,029:INFO:Gradient Boosting Regressor Imported successfully
2024-03-06 13:13:55,029:INFO:Cross validation set to False
2024-03-06 13:13:55,029:INFO:Fitting Model
2024-03-06 13:16:16,666:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=3939))])
2024-03-06 13:16:16,666:INFO:create_model() successfully completed......................................
2024-03-06 13:16:16,766:INFO:_master_model_container: 20
2024-03-06 13:16:16,766:INFO:_display_container: 2
2024-03-06 13:16:16,783:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=3939))])
2024-03-06 13:16:16,783:INFO:finalize_model() successfully completed......................................
2024-03-06 13:16:16,883:INFO:Initializing predict_model()
2024-03-06 13:16:16,883:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=3939))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F0F097100>)
2024-03-06 13:16:16,883:INFO:Checking exceptions
2024-03-06 13:16:16,883:INFO:Preloading libraries
2024-03-06 13:16:16,883:INFO:Set up data.
2024-03-06 13:16:16,973:INFO:Set up index.
2024-03-06 13:16:17,484:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:16:22,305:INFO:Initializing finalize_model()
2024-03-06 13:16:22,305:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=RandomForestRegressor(n_jobs=-1, random_state=3939), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:16:22,305:INFO:Finalizing RandomForestRegressor(n_jobs=-1, random_state=3939)
2024-03-06 13:16:22,489:INFO:Initializing create_model()
2024-03-06 13:16:22,489:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=RandomForestRegressor(n_jobs=-1, random_state=3939), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:16:22,489:INFO:Checking exceptions
2024-03-06 13:16:22,490:INFO:Importing libraries
2024-03-06 13:16:22,490:INFO:Copying training dataset
2024-03-06 13:16:22,519:INFO:Defining folds
2024-03-06 13:16:22,519:INFO:Declaring metric variables
2024-03-06 13:16:22,519:INFO:Importing untrained model
2024-03-06 13:16:22,519:INFO:Declaring custom model
2024-03-06 13:16:22,519:INFO:Random Forest Regressor Imported successfully
2024-03-06 13:16:22,519:INFO:Cross validation set to False
2024-03-06 13:16:22,519:INFO:Fitting Model
2024-03-06 13:21:42,207:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=3939))])
2024-03-06 13:21:42,207:INFO:create_model() successfully completed......................................
2024-03-06 13:21:42,674:INFO:_master_model_container: 20
2024-03-06 13:21:42,674:INFO:_display_container: 2
2024-03-06 13:21:42,692:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=3939))])
2024-03-06 13:21:42,692:INFO:finalize_model() successfully completed......................................
2024-03-06 13:21:42,775:INFO:Initializing predict_model()
2024-03-06 13:21:42,775:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=3939))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F423887C0>)
2024-03-06 13:21:42,775:INFO:Checking exceptions
2024-03-06 13:21:42,775:INFO:Preloading libraries
2024-03-06 13:21:42,775:INFO:Set up data.
2024-03-06 13:21:42,861:INFO:Set up index.
2024-03-06 13:21:47,966:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:21:48,014:INFO:Initializing finalize_model()
2024-03-06 13:21:48,014:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=<catboost.core.CatBoostRegressor object at 0x0000011F4237DA10>, fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:21:48,014:INFO:Finalizing <catboost.core.CatBoostRegressor object at 0x0000011F4237DA10>
2024-03-06 13:21:48,313:INFO:Initializing create_model()
2024-03-06 13:21:48,313:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=<catboost.core.CatBoostRegressor object at 0x0000011F4237DA10>, fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:21:48,313:INFO:Checking exceptions
2024-03-06 13:21:48,315:INFO:Importing libraries
2024-03-06 13:21:48,315:INFO:Copying training dataset
2024-03-06 13:21:48,362:INFO:Defining folds
2024-03-06 13:21:48,362:INFO:Declaring metric variables
2024-03-06 13:21:48,363:INFO:Importing untrained model
2024-03-06 13:21:48,363:INFO:Declaring custom model
2024-03-06 13:21:48,363:INFO:CatBoost Regressor Imported successfully
2024-03-06 13:21:48,363:INFO:Cross validation set to False
2024-03-06 13:21:48,363:INFO:Fitting Model
2024-03-06 13:22:57,303:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x0000011F1AEDDA50>)])
2024-03-06 13:22:57,303:INFO:create_model() successfully completed......................................
2024-03-06 13:22:57,403:INFO:_master_model_container: 20
2024-03-06 13:22:57,403:INFO:_display_container: 2
2024-03-06 13:22:57,403:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x0000011F1AEDDA50>)])
2024-03-06 13:22:57,403:INFO:finalize_model() successfully completed......................................
2024-03-06 13:22:58,587:INFO:Initializing predict_model()
2024-03-06 13:22:58,587:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x0000011F1AEDDA50>)]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F42388400>)
2024-03-06 13:22:58,587:INFO:Checking exceptions
2024-03-06 13:22:58,587:INFO:Preloading libraries
2024-03-06 13:22:58,587:INFO:Set up data.
2024-03-06 13:22:58,658:INFO:Set up index.
2024-03-06 13:22:59,055:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:22:59,086:INFO:Initializing finalize_model()
2024-03-06 13:22:59,086:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=LGBMRegressor(n_jobs=-1, random_state=3939), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:22:59,086:INFO:Finalizing LGBMRegressor(n_jobs=-1, random_state=3939)
2024-03-06 13:22:59,319:INFO:Initializing create_model()
2024-03-06 13:22:59,320:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=LGBMRegressor(n_jobs=-1, random_state=3939), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:22:59,320:INFO:Checking exceptions
2024-03-06 13:22:59,320:INFO:Importing libraries
2024-03-06 13:22:59,320:INFO:Copying training dataset
2024-03-06 13:22:59,358:INFO:Defining folds
2024-03-06 13:22:59,361:INFO:Declaring metric variables
2024-03-06 13:22:59,361:INFO:Importing untrained model
2024-03-06 13:22:59,361:INFO:Declaring custom model
2024-03-06 13:22:59,362:INFO:Light Gradient Boosting Machine Imported successfully
2024-03-06 13:22:59,362:INFO:Cross validation set to False
2024-03-06 13:22:59,362:INFO:Fitting Model
2024-03-06 13:22:59,915:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.008176 seconds.
2024-03-06 13:22:59,915:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-03-06 13:22:59,915:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-03-06 13:22:59,924:INFO:[LightGBM] [Info] Total Bins 2040
2024-03-06 13:22:59,925:INFO:[LightGBM] [Info] Number of data points in the train set: 1257130, number of used features: 8
2024-03-06 13:22:59,925:INFO:[LightGBM] [Info] Start training from score 5.909018
2024-03-06 13:23:02,019:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=3939))])
2024-03-06 13:23:02,019:INFO:create_model() successfully completed......................................
2024-03-06 13:23:02,147:INFO:_master_model_container: 20
2024-03-06 13:23:02,147:INFO:_display_container: 2
2024-03-06 13:23:02,147:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=3939))])
2024-03-06 13:23:02,147:INFO:finalize_model() successfully completed......................................
2024-03-06 13:23:02,241:INFO:Initializing predict_model()
2024-03-06 13:23:02,241:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 LGBMRegressor(n_jobs=-1, random_state=3939))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F15B80720>)
2024-03-06 13:23:02,241:INFO:Checking exceptions
2024-03-06 13:23:02,241:INFO:Preloading libraries
2024-03-06 13:23:02,241:INFO:Set up data.
2024-03-06 13:23:02,313:INFO:Set up index.
2024-03-06 13:23:02,955:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:23:02,995:INFO:Initializing finalize_model()
2024-03-06 13:23:02,995:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=3939, ...), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:23:02,995:INFO:Finalizing XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=3939, ...)
2024-03-06 13:23:03,221:INFO:Initializing create_model()
2024-03-06 13:23:03,221:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=3939, ...), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:23:03,221:INFO:Checking exceptions
2024-03-06 13:23:03,221:INFO:Importing libraries
2024-03-06 13:23:03,221:INFO:Copying training dataset
2024-03-06 13:23:03,269:INFO:Defining folds
2024-03-06 13:23:03,270:INFO:Declaring metric variables
2024-03-06 13:23:03,270:INFO:Importing untrained model
2024-03-06 13:23:03,270:INFO:Declaring custom model
2024-03-06 13:23:03,270:INFO:Extreme Gradient Boosting Imported successfully
2024-03-06 13:23:03,270:INFO:Cross validation set to False
2024-03-06 13:23:03,270:INFO:Fitting Model
2024-03-06 13:23:06,996:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent...
                              feature_types=None, gamma=None, grow_policy=None,
                              importance_type=None,
                              interaction_constraints=None, learning_rate=None,
                              max_bin=None, max_cat_threshold=None,
                              max_cat_to_onehot=None, max_delta_step=None,
                              max_depth=None, max_leaves=None,
                              min_child_weight=None, missing=nan,
                              monotone_constraints=None, multi_strategy=None,
                              n_estimators=None, n_jobs=-1,
                              num_parallel_tree=None, random_state=3939, ...))])
2024-03-06 13:23:06,996:INFO:create_model() successfully completed......................................
2024-03-06 13:23:07,125:INFO:_master_model_container: 20
2024-03-06 13:23:07,125:INFO:_display_container: 2
2024-03-06 13:23:07,125:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent...
                              feature_types=None, gamma=None, grow_policy=None,
                              importance_type=None,
                              interaction_constraints=None, learning_rate=None,
                              max_bin=None, max_cat_threshold=None,
                              max_cat_to_onehot=None, max_delta_step=None,
                              max_depth=None, max_leaves=None,
                              min_child_weight=None, missing=nan,
                              monotone_constraints=None, multi_strategy=None,
                              n_estimators=None, n_jobs=-1,
                              num_parallel_tree=None, random_state=3939, ...))])
2024-03-06 13:23:07,125:INFO:finalize_model() successfully completed......................................
2024-03-06 13:23:07,225:INFO:Initializing predict_model()
2024-03-06 13:23:07,225:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent...
                              feature_types=None, gamma=None, grow_policy=None,
                              importance_type=None,
                              interaction_constraints=None, learning_rate=None,
                              max_bin=None, max_cat_threshold=None,
                              max_cat_to_onehot=None, max_delta_step=None,
                              max_depth=None, max_leaves=None,
                              min_child_weight=None, missing=nan,
                              monotone_constraints=None, multi_strategy=None,
                              n_estimators=None, n_jobs=-1,
                              num_parallel_tree=None, random_state=3939, ...))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F0F0EDDA0>)
2024-03-06 13:23:07,225:INFO:Checking exceptions
2024-03-06 13:23:07,225:INFO:Preloading libraries
2024-03-06 13:23:07,241:INFO:Set up data.
2024-03-06 13:23:07,296:INFO:Set up index.
2024-03-06 13:23:07,745:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:23:07,776:INFO:Initializing finalize_model()
2024-03-06 13:23:07,776:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=KNeighborsRegressor(n_jobs=-1), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:23:07,776:INFO:Finalizing KNeighborsRegressor(n_jobs=-1)
2024-03-06 13:23:07,996:INFO:Initializing create_model()
2024-03-06 13:23:07,996:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=KNeighborsRegressor(n_jobs=-1), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:23:07,996:INFO:Checking exceptions
2024-03-06 13:23:08,011:INFO:Importing libraries
2024-03-06 13:23:08,011:INFO:Copying training dataset
2024-03-06 13:23:08,044:INFO:Defining folds
2024-03-06 13:23:08,044:INFO:Declaring metric variables
2024-03-06 13:23:08,045:INFO:Importing untrained model
2024-03-06 13:23:08,045:INFO:Declaring custom model
2024-03-06 13:23:08,045:INFO:K Neighbors Regressor Imported successfully
2024-03-06 13:23:08,046:INFO:Cross validation set to False
2024-03-06 13:23:08,046:INFO:Fitting Model
2024-03-06 13:23:15,296:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-06 13:23:15,296:INFO:create_model() successfully completed......................................
2024-03-06 13:23:15,375:INFO:_master_model_container: 20
2024-03-06 13:23:15,375:INFO:_display_container: 2
2024-03-06 13:23:15,392:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-06 13:23:15,392:INFO:finalize_model() successfully completed......................................
2024-03-06 13:23:15,474:INFO:Initializing predict_model()
2024-03-06 13:23:15,474:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F15B80720>)
2024-03-06 13:23:15,474:INFO:Checking exceptions
2024-03-06 13:23:15,474:INFO:Preloading libraries
2024-03-06 13:23:15,474:INFO:Set up data.
2024-03-06 13:23:15,530:INFO:Set up index.
2024-03-06 13:24:05,312:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:24:05,353:INFO:Initializing finalize_model()
2024-03-06 13:24:05,353:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=DecisionTreeRegressor(random_state=3939), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:24:05,353:INFO:Finalizing DecisionTreeRegressor(random_state=3939)
2024-03-06 13:24:05,545:INFO:Initializing create_model()
2024-03-06 13:24:05,545:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=DecisionTreeRegressor(random_state=3939), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:24:05,545:INFO:Checking exceptions
2024-03-06 13:24:05,545:INFO:Importing libraries
2024-03-06 13:24:05,545:INFO:Copying training dataset
2024-03-06 13:24:05,579:INFO:Defining folds
2024-03-06 13:24:05,579:INFO:Declaring metric variables
2024-03-06 13:24:05,579:INFO:Importing untrained model
2024-03-06 13:24:05,579:INFO:Declaring custom model
2024-03-06 13:24:05,579:INFO:Decision Tree Regressor Imported successfully
2024-03-06 13:24:05,579:INFO:Cross validation set to False
2024-03-06 13:24:05,579:INFO:Fitting Model
2024-03-06 13:24:20,801:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', DecisionTreeRegressor(random_state=3939))])
2024-03-06 13:24:20,801:INFO:create_model() successfully completed......................................
2024-03-06 13:24:20,885:INFO:_master_model_container: 20
2024-03-06 13:24:20,885:INFO:_display_container: 2
2024-03-06 13:24:20,885:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', DecisionTreeRegressor(random_state=3939))])
2024-03-06 13:24:20,885:INFO:finalize_model() successfully completed......................................
2024-03-06 13:24:20,989:INFO:Initializing predict_model()
2024-03-06 13:24:20,989:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', DecisionTreeRegressor(random_state=3939))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F43248360>)
2024-03-06 13:24:20,989:INFO:Checking exceptions
2024-03-06 13:24:20,989:INFO:Preloading libraries
2024-03-06 13:24:20,989:INFO:Set up data.
2024-03-06 13:24:21,046:INFO:Set up index.
2024-03-06 13:24:21,335:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-06 13:24:21,351:INFO:Initializing finalize_model()
2024-03-06 13:24:21,351:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=GradientBoostingRegressor(random_state=3939), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-06 13:24:21,351:INFO:Finalizing GradientBoostingRegressor(random_state=3939)
2024-03-06 13:24:21,520:INFO:Initializing create_model()
2024-03-06 13:24:21,520:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=GradientBoostingRegressor(random_state=3939), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-06 13:24:21,520:INFO:Checking exceptions
2024-03-06 13:24:21,520:INFO:Importing libraries
2024-03-06 13:24:21,520:INFO:Copying training dataset
2024-03-06 13:24:21,571:INFO:Defining folds
2024-03-06 13:24:21,571:INFO:Declaring metric variables
2024-03-06 13:24:21,571:INFO:Importing untrained model
2024-03-06 13:24:21,571:INFO:Declaring custom model
2024-03-06 13:24:21,571:INFO:Gradient Boosting Regressor Imported successfully
2024-03-06 13:24:21,587:INFO:Cross validation set to False
2024-03-06 13:24:21,587:INFO:Fitting Model
2024-03-06 13:26:48,341:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=3939))])
2024-03-06 13:26:48,341:INFO:create_model() successfully completed......................................
2024-03-06 13:26:48,441:INFO:_master_model_container: 20
2024-03-06 13:26:48,441:INFO:_display_container: 2
2024-03-06 13:26:48,441:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=3939))])
2024-03-06 13:26:48,441:INFO:finalize_model() successfully completed......................................
2024-03-06 13:26:48,555:INFO:Initializing predict_model()
2024-03-06 13:26:48,555:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011F1812E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=3939))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011F15D41260>)
2024-03-06 13:26:48,555:INFO:Checking exceptions
2024-03-06 13:26:48,555:INFO:Preloading libraries
2024-03-06 13:26:48,555:INFO:Set up data.
2024-03-06 13:26:48,620:INFO:Set up index.
2024-03-06 13:26:49,104:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:01:21,316:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-10 18:01:21,316:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-10 18:01:21,316:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-10 18:01:21,316:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-03-10 18:01:21,665:INFO:PyCaret RegressionExperiment
2024-03-10 18:01:21,665:INFO:Logging name: reg-default-name
2024-03-10 18:01:21,665:INFO:ML Usecase: MLUsecase.REGRESSION
2024-03-10 18:01:21,665:INFO:version 3.3.0
2024-03-10 18:01:21,665:INFO:Initializing setup()
2024-03-10 18:01:21,665:INFO:self.USI: 2d61
2024-03-10 18:01:21,665:INFO:self._variable_keys: {'gpu_n_jobs_param', '_ml_usecase', 'y', 'gpu_param', 'X_train', 'X_test', 'memory', 'fold_groups_param', 'seed', '_available_plots', 'y_train', 'data', 'logging_param', 'html_param', 'fold_generator', 'fold_shuffle_param', 'exp_name_log', 'y_test', 'target_param', 'transform_target_param', 'log_plots_param', 'pipeline', 'X', 'exp_id', 'idx', 'n_jobs_param', 'USI'}
2024-03-10 18:01:21,665:INFO:Checking environment
2024-03-10 18:01:21,665:INFO:python_version: 3.11.5
2024-03-10 18:01:21,665:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-03-10 18:01:21,665:INFO:machine: AMD64
2024-03-10 18:01:21,665:INFO:platform: Windows-10-10.0.19045-SP0
2024-03-10 18:01:21,665:INFO:Memory: svmem(total=16889192448, available=7893385216, percent=53.3, used=8995807232, free=7893385216)
2024-03-10 18:01:21,665:INFO:Physical Core: 4
2024-03-10 18:01:21,665:INFO:Logical Core: 8
2024-03-10 18:01:21,665:INFO:Checking libraries
2024-03-10 18:01:21,665:INFO:System:
2024-03-10 18:01:21,665:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-03-10 18:01:21,665:INFO:executable: d:\anaconda\python.exe
2024-03-10 18:01:21,665:INFO:   machine: Windows-10-10.0.19045-SP0
2024-03-10 18:01:21,665:INFO:PyCaret required dependencies:
2024-03-10 18:01:21,665:INFO:                 pip: 23.2.1
2024-03-10 18:01:21,665:INFO:          setuptools: 68.0.0
2024-03-10 18:01:21,665:INFO:             pycaret: 3.3.0
2024-03-10 18:01:21,665:INFO:             IPython: 8.15.0
2024-03-10 18:01:21,665:INFO:          ipywidgets: 8.0.4
2024-03-10 18:01:21,665:INFO:                tqdm: 4.65.0
2024-03-10 18:01:21,665:INFO:               numpy: 1.24.3
2024-03-10 18:01:21,665:INFO:              pandas: 2.0.3
2024-03-10 18:01:21,665:INFO:              jinja2: 3.1.2
2024-03-10 18:01:21,665:INFO:               scipy: 1.11.1
2024-03-10 18:01:21,665:INFO:              joblib: 1.2.0
2024-03-10 18:01:21,665:INFO:             sklearn: 1.4.1.post1
2024-03-10 18:01:21,665:INFO:                pyod: 1.1.3
2024-03-10 18:01:21,665:INFO:            imblearn: 0.10.1
2024-03-10 18:01:21,665:INFO:   category_encoders: 2.6.3
2024-03-10 18:01:21,665:INFO:            lightgbm: 4.3.0
2024-03-10 18:01:21,665:INFO:               numba: 0.57.1
2024-03-10 18:01:21,665:INFO:            requests: 2.31.0
2024-03-10 18:01:21,665:INFO:          matplotlib: 3.7.2
2024-03-10 18:01:21,665:INFO:          scikitplot: 0.3.7
2024-03-10 18:01:21,665:INFO:         yellowbrick: 1.5
2024-03-10 18:01:21,665:INFO:              plotly: 5.19.0
2024-03-10 18:01:21,665:INFO:    plotly-resampler: Not installed
2024-03-10 18:01:21,665:INFO:             kaleido: 0.2.1
2024-03-10 18:01:21,665:INFO:           schemdraw: 0.15
2024-03-10 18:01:21,665:INFO:         statsmodels: 0.14.0
2024-03-10 18:01:21,665:INFO:              sktime: 0.26.1
2024-03-10 18:01:21,665:INFO:               tbats: 1.1.3
2024-03-10 18:01:21,665:INFO:            pmdarima: 2.0.4
2024-03-10 18:01:21,665:INFO:              psutil: 5.9.0
2024-03-10 18:01:21,665:INFO:          markupsafe: 2.1.1
2024-03-10 18:01:21,665:INFO:             pickle5: Not installed
2024-03-10 18:01:21,665:INFO:         cloudpickle: 2.2.1
2024-03-10 18:01:21,665:INFO:         deprecation: 2.1.0
2024-03-10 18:01:21,678:INFO:              xxhash: 2.0.2
2024-03-10 18:01:21,678:INFO:           wurlitzer: Not installed
2024-03-10 18:01:21,678:INFO:PyCaret optional dependencies:
2024-03-10 18:01:21,682:INFO:                shap: Not installed
2024-03-10 18:01:21,682:INFO:           interpret: Not installed
2024-03-10 18:01:21,682:INFO:                umap: Not installed
2024-03-10 18:01:21,682:INFO:     ydata_profiling: Not installed
2024-03-10 18:01:21,682:INFO:  explainerdashboard: Not installed
2024-03-10 18:01:21,682:INFO:             autoviz: Not installed
2024-03-10 18:01:21,682:INFO:           fairlearn: Not installed
2024-03-10 18:01:21,682:INFO:          deepchecks: Not installed
2024-03-10 18:01:21,682:INFO:             xgboost: 2.0.3
2024-03-10 18:01:21,682:INFO:            catboost: 1.2.2
2024-03-10 18:01:21,682:INFO:              kmodes: Not installed
2024-03-10 18:01:21,682:INFO:             mlxtend: Not installed
2024-03-10 18:01:21,682:INFO:       statsforecast: Not installed
2024-03-10 18:01:21,682:INFO:        tune_sklearn: Not installed
2024-03-10 18:01:21,682:INFO:                 ray: Not installed
2024-03-10 18:01:21,682:INFO:            hyperopt: Not installed
2024-03-10 18:01:21,682:INFO:              optuna: Not installed
2024-03-10 18:01:21,682:INFO:               skopt: Not installed
2024-03-10 18:01:21,682:INFO:              mlflow: Not installed
2024-03-10 18:01:21,682:INFO:              gradio: Not installed
2024-03-10 18:01:21,682:INFO:             fastapi: Not installed
2024-03-10 18:01:21,682:INFO:             uvicorn: Not installed
2024-03-10 18:01:21,682:INFO:              m2cgen: Not installed
2024-03-10 18:01:21,682:INFO:           evidently: Not installed
2024-03-10 18:01:21,682:INFO:               fugue: Not installed
2024-03-10 18:01:21,682:INFO:           streamlit: Not installed
2024-03-10 18:01:21,682:INFO:             prophet: Not installed
2024-03-10 18:01:21,682:INFO:None
2024-03-10 18:01:21,682:INFO:Set up data.
2024-03-10 18:01:21,716:INFO:Set up folding strategy.
2024-03-10 18:01:21,716:INFO:Set up train/test split.
2024-03-10 18:01:21,732:INFO:Set up index.
2024-03-10 18:01:21,732:INFO:Assigning column types.
2024-03-10 18:01:21,756:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-03-10 18:01:21,756:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-10 18:01:21,775:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-10 18:01:21,783:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-10 18:01:21,847:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-10 18:01:21,882:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-10 18:01:21,883:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:21,886:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:21,886:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-03-10 18:01:21,890:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-10 18:01:21,893:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-10 18:01:21,948:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-10 18:01:21,979:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-10 18:01:21,979:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:21,979:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:21,979:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-03-10 18:01:21,979:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-10 18:01:21,979:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,059:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,104:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,104:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:22,113:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:22,117:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,121:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,181:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,212:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,228:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:22,229:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:22,229:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-03-10 18:01:22,236:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,298:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,329:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,329:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:22,329:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:22,346:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,397:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,429:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,429:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:22,429:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:22,429:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-03-10 18:01:22,498:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,529:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,529:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:22,529:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:22,596:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,629:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,629:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:22,629:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:22,645:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-03-10 18:01:22,696:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,731:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:22,731:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:22,795:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-03-10 18:01:22,831:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:22,831:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:22,831:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-03-10 18:01:22,931:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:22,931:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:23,029:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:23,029:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:23,029:INFO:Preparing preprocessing pipeline...
2024-03-10 18:01:23,029:INFO:Set up simple imputation.
2024-03-10 18:01:23,079:INFO:Finished creating preprocessing pipeline.
2024-03-10 18:01:23,096:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\dell\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2024-03-10 18:01:23,096:INFO:Creating final display dataframe.
2024-03-10 18:01:23,212:INFO:Setup _display_container:                     Description             Value
0                    Session id               175
1                        Target           Current
2                   Target type        Regression
3           Original data shape       (70000, 13)
4        Transformed data shape       (70000, 13)
5   Transformed train set shape       (49000, 13)
6    Transformed test set shape       (21000, 13)
7              Numeric features                12
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   TimeSeriesSplit
13                  Fold Number                 5
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              2d61
2024-03-10 18:01:23,347:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:23,350:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:23,446:INFO:Soft dependency imported: xgboost: 2.0.3
2024-03-10 18:01:23,446:INFO:Soft dependency imported: catboost: 1.2.2
2024-03-10 18:01:23,463:WARNING:C:\Users\dell\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\metrics.py:51: FutureWarning: The `needs_threshold` and `needs_proba` parameter are deprecated in version 1.4 and will be removed in 1.6. You can either let `response_method` be `None` or set it to `predict` to preserve the same behaviour.
  warnings.warn(

2024-03-10 18:01:23,463:INFO:setup() successfully completed in 1.8s...............
2024-03-10 18:01:23,463:INFO:Initializing compare_models()
2024-03-10 18:01:23,463:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=7, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 7, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-03-10 18:01:23,463:INFO:Checking exceptions
2024-03-10 18:01:23,463:INFO:Preparing display monitor
2024-03-10 18:01:23,479:INFO:Initializing Linear Regression
2024-03-10 18:01:23,479:INFO:Total runtime is 0.0 minutes
2024-03-10 18:01:23,497:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:23,497:INFO:Initializing create_model()
2024-03-10 18:01:23,497:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=lr, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:23,497:INFO:Checking exceptions
2024-03-10 18:01:23,497:INFO:Importing libraries
2024-03-10 18:01:23,497:INFO:Copying training dataset
2024-03-10 18:01:23,517:INFO:Defining folds
2024-03-10 18:01:23,517:INFO:Declaring metric variables
2024-03-10 18:01:23,526:INFO:Importing untrained model
2024-03-10 18:01:23,529:INFO:Linear Regression Imported successfully
2024-03-10 18:01:23,536:INFO:Starting cross validation
2024-03-10 18:01:23,552:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:29,518:INFO:Calculating mean and std
2024-03-10 18:01:29,518:INFO:Creating metrics dataframe
2024-03-10 18:01:29,532:INFO:Uploading results into container
2024-03-10 18:01:29,532:INFO:Uploading model into container now
2024-03-10 18:01:29,532:INFO:_master_model_container: 1
2024-03-10 18:01:29,532:INFO:_display_container: 2
2024-03-10 18:01:29,532:INFO:LinearRegression(n_jobs=-1)
2024-03-10 18:01:29,532:INFO:create_model() successfully completed......................................
2024-03-10 18:01:29,648:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:29,648:INFO:Creating metrics dataframe
2024-03-10 18:01:29,664:INFO:Initializing Lasso Regression
2024-03-10 18:01:29,664:INFO:Total runtime is 0.10307555596033732 minutes
2024-03-10 18:01:29,665:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:29,665:INFO:Initializing create_model()
2024-03-10 18:01:29,665:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=lasso, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:29,665:INFO:Checking exceptions
2024-03-10 18:01:29,665:INFO:Importing libraries
2024-03-10 18:01:29,665:INFO:Copying training dataset
2024-03-10 18:01:29,686:INFO:Defining folds
2024-03-10 18:01:29,686:INFO:Declaring metric variables
2024-03-10 18:01:29,686:INFO:Importing untrained model
2024-03-10 18:01:29,686:INFO:Lasso Regression Imported successfully
2024-03-10 18:01:29,704:INFO:Starting cross validation
2024-03-10 18:01:29,704:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:33,150:INFO:Calculating mean and std
2024-03-10 18:01:33,150:INFO:Creating metrics dataframe
2024-03-10 18:01:33,150:INFO:Uploading results into container
2024-03-10 18:01:33,154:INFO:Uploading model into container now
2024-03-10 18:01:33,155:INFO:_master_model_container: 2
2024-03-10 18:01:33,155:INFO:_display_container: 2
2024-03-10 18:01:33,155:INFO:Lasso(random_state=175)
2024-03-10 18:01:33,156:INFO:create_model() successfully completed......................................
2024-03-10 18:01:33,237:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:33,237:INFO:Creating metrics dataframe
2024-03-10 18:01:33,250:INFO:Initializing Ridge Regression
2024-03-10 18:01:33,250:INFO:Total runtime is 0.16284101009368895 minutes
2024-03-10 18:01:33,250:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:33,250:INFO:Initializing create_model()
2024-03-10 18:01:33,250:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ridge, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:33,250:INFO:Checking exceptions
2024-03-10 18:01:33,250:INFO:Importing libraries
2024-03-10 18:01:33,250:INFO:Copying training dataset
2024-03-10 18:01:33,271:INFO:Defining folds
2024-03-10 18:01:33,271:INFO:Declaring metric variables
2024-03-10 18:01:33,271:INFO:Importing untrained model
2024-03-10 18:01:33,283:INFO:Ridge Regression Imported successfully
2024-03-10 18:01:33,288:INFO:Starting cross validation
2024-03-10 18:01:33,288:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:33,337:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.54474e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-10 18:01:33,349:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.51701e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-10 18:01:33,349:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=6.07421e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-10 18:01:33,367:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=3.68525e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-03-10 18:01:33,383:INFO:Calculating mean and std
2024-03-10 18:01:33,383:INFO:Creating metrics dataframe
2024-03-10 18:01:33,383:INFO:Uploading results into container
2024-03-10 18:01:33,383:INFO:Uploading model into container now
2024-03-10 18:01:33,383:INFO:_master_model_container: 3
2024-03-10 18:01:33,383:INFO:_display_container: 2
2024-03-10 18:01:33,383:INFO:Ridge(random_state=175)
2024-03-10 18:01:33,383:INFO:create_model() successfully completed......................................
2024-03-10 18:01:33,466:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:33,466:INFO:Creating metrics dataframe
2024-03-10 18:01:33,466:INFO:Initializing Elastic Net
2024-03-10 18:01:33,466:INFO:Total runtime is 0.16645197470982867 minutes
2024-03-10 18:01:33,466:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:33,466:INFO:Initializing create_model()
2024-03-10 18:01:33,466:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=en, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:33,482:INFO:Checking exceptions
2024-03-10 18:01:33,482:INFO:Importing libraries
2024-03-10 18:01:33,482:INFO:Copying training dataset
2024-03-10 18:01:33,504:INFO:Defining folds
2024-03-10 18:01:33,504:INFO:Declaring metric variables
2024-03-10 18:01:33,505:INFO:Importing untrained model
2024-03-10 18:01:33,505:INFO:Elastic Net Imported successfully
2024-03-10 18:01:33,505:INFO:Starting cross validation
2024-03-10 18:01:33,516:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:33,619:INFO:Calculating mean and std
2024-03-10 18:01:33,619:INFO:Creating metrics dataframe
2024-03-10 18:01:33,619:INFO:Uploading results into container
2024-03-10 18:01:33,619:INFO:Uploading model into container now
2024-03-10 18:01:33,619:INFO:_master_model_container: 4
2024-03-10 18:01:33,619:INFO:_display_container: 2
2024-03-10 18:01:33,619:INFO:ElasticNet(random_state=175)
2024-03-10 18:01:33,619:INFO:create_model() successfully completed......................................
2024-03-10 18:01:33,700:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:33,700:INFO:Creating metrics dataframe
2024-03-10 18:01:33,700:INFO:Initializing Least Angle Regression
2024-03-10 18:01:33,700:INFO:Total runtime is 0.1703408360481262 minutes
2024-03-10 18:01:33,717:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:33,717:INFO:Initializing create_model()
2024-03-10 18:01:33,717:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=lar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:33,717:INFO:Checking exceptions
2024-03-10 18:01:33,717:INFO:Importing libraries
2024-03-10 18:01:33,717:INFO:Copying training dataset
2024-03-10 18:01:33,741:INFO:Defining folds
2024-03-10 18:01:33,741:INFO:Declaring metric variables
2024-03-10 18:01:33,741:INFO:Importing untrained model
2024-03-10 18:01:33,746:INFO:Least Angle Regression Imported successfully
2024-03-10 18:01:33,754:INFO:Starting cross validation
2024-03-10 18:01:33,754:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:33,838:INFO:Calculating mean and std
2024-03-10 18:01:33,838:INFO:Creating metrics dataframe
2024-03-10 18:01:33,838:INFO:Uploading results into container
2024-03-10 18:01:33,849:INFO:Uploading model into container now
2024-03-10 18:01:33,850:INFO:_master_model_container: 5
2024-03-10 18:01:33,850:INFO:_display_container: 2
2024-03-10 18:01:33,850:INFO:Lars(random_state=175)
2024-03-10 18:01:33,850:INFO:create_model() successfully completed......................................
2024-03-10 18:01:33,916:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:33,916:INFO:Creating metrics dataframe
2024-03-10 18:01:33,916:INFO:Initializing Lasso Least Angle Regression
2024-03-10 18:01:33,916:INFO:Total runtime is 0.17395092248916624 minutes
2024-03-10 18:01:33,933:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:33,933:INFO:Initializing create_model()
2024-03-10 18:01:33,933:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=llar, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:33,933:INFO:Checking exceptions
2024-03-10 18:01:33,933:INFO:Importing libraries
2024-03-10 18:01:33,933:INFO:Copying training dataset
2024-03-10 18:01:33,957:INFO:Defining folds
2024-03-10 18:01:33,957:INFO:Declaring metric variables
2024-03-10 18:01:33,957:INFO:Importing untrained model
2024-03-10 18:01:33,957:INFO:Lasso Least Angle Regression Imported successfully
2024-03-10 18:01:33,968:INFO:Starting cross validation
2024-03-10 18:01:33,969:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:34,050:INFO:Calculating mean and std
2024-03-10 18:01:34,050:INFO:Creating metrics dataframe
2024-03-10 18:01:34,050:INFO:Uploading results into container
2024-03-10 18:01:34,050:INFO:Uploading model into container now
2024-03-10 18:01:34,050:INFO:_master_model_container: 6
2024-03-10 18:01:34,050:INFO:_display_container: 2
2024-03-10 18:01:34,050:INFO:LassoLars(random_state=175)
2024-03-10 18:01:34,050:INFO:create_model() successfully completed......................................
2024-03-10 18:01:34,138:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:34,138:INFO:Creating metrics dataframe
2024-03-10 18:01:34,149:INFO:Initializing Orthogonal Matching Pursuit
2024-03-10 18:01:34,150:INFO:Total runtime is 0.17785273392995196 minutes
2024-03-10 18:01:34,150:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:34,150:INFO:Initializing create_model()
2024-03-10 18:01:34,150:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=omp, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:34,150:INFO:Checking exceptions
2024-03-10 18:01:34,150:INFO:Importing libraries
2024-03-10 18:01:34,150:INFO:Copying training dataset
2024-03-10 18:01:34,175:INFO:Defining folds
2024-03-10 18:01:34,175:INFO:Declaring metric variables
2024-03-10 18:01:34,175:INFO:Importing untrained model
2024-03-10 18:01:34,175:INFO:Orthogonal Matching Pursuit Imported successfully
2024-03-10 18:01:34,189:INFO:Starting cross validation
2024-03-10 18:01:34,189:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:34,267:INFO:Calculating mean and std
2024-03-10 18:01:34,267:INFO:Creating metrics dataframe
2024-03-10 18:01:34,284:INFO:Uploading results into container
2024-03-10 18:01:34,284:INFO:Uploading model into container now
2024-03-10 18:01:34,285:INFO:_master_model_container: 7
2024-03-10 18:01:34,285:INFO:_display_container: 2
2024-03-10 18:01:34,285:INFO:OrthogonalMatchingPursuit()
2024-03-10 18:01:34,285:INFO:create_model() successfully completed......................................
2024-03-10 18:01:34,350:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:34,350:INFO:Creating metrics dataframe
2024-03-10 18:01:34,367:INFO:Initializing Bayesian Ridge
2024-03-10 18:01:34,367:INFO:Total runtime is 0.1814720312754313 minutes
2024-03-10 18:01:34,370:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:34,370:INFO:Initializing create_model()
2024-03-10 18:01:34,370:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=br, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:34,370:INFO:Checking exceptions
2024-03-10 18:01:34,370:INFO:Importing libraries
2024-03-10 18:01:34,370:INFO:Copying training dataset
2024-03-10 18:01:34,389:INFO:Defining folds
2024-03-10 18:01:34,389:INFO:Declaring metric variables
2024-03-10 18:01:34,389:INFO:Importing untrained model
2024-03-10 18:01:34,400:INFO:Bayesian Ridge Imported successfully
2024-03-10 18:01:34,405:INFO:Starting cross validation
2024-03-10 18:01:34,405:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:34,516:INFO:Calculating mean and std
2024-03-10 18:01:34,516:INFO:Creating metrics dataframe
2024-03-10 18:01:34,523:INFO:Uploading results into container
2024-03-10 18:01:34,524:INFO:Uploading model into container now
2024-03-10 18:01:34,524:INFO:_master_model_container: 8
2024-03-10 18:01:34,524:INFO:_display_container: 2
2024-03-10 18:01:34,525:INFO:BayesianRidge()
2024-03-10 18:01:34,525:INFO:create_model() successfully completed......................................
2024-03-10 18:01:34,603:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:34,603:INFO:Creating metrics dataframe
2024-03-10 18:01:34,603:INFO:Initializing Passive Aggressive Regressor
2024-03-10 18:01:34,603:INFO:Total runtime is 0.1854005495707194 minutes
2024-03-10 18:01:34,617:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:34,617:INFO:Initializing create_model()
2024-03-10 18:01:34,618:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=par, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:34,618:INFO:Checking exceptions
2024-03-10 18:01:34,618:INFO:Importing libraries
2024-03-10 18:01:34,618:INFO:Copying training dataset
2024-03-10 18:01:34,639:INFO:Defining folds
2024-03-10 18:01:34,639:INFO:Declaring metric variables
2024-03-10 18:01:34,639:INFO:Importing untrained model
2024-03-10 18:01:34,650:INFO:Passive Aggressive Regressor Imported successfully
2024-03-10 18:01:34,654:INFO:Starting cross validation
2024-03-10 18:01:34,654:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:34,787:INFO:Calculating mean and std
2024-03-10 18:01:34,787:INFO:Creating metrics dataframe
2024-03-10 18:01:34,787:INFO:Uploading results into container
2024-03-10 18:01:34,787:INFO:Uploading model into container now
2024-03-10 18:01:34,787:INFO:_master_model_container: 9
2024-03-10 18:01:34,787:INFO:_display_container: 2
2024-03-10 18:01:34,787:INFO:PassiveAggressiveRegressor(random_state=175)
2024-03-10 18:01:34,787:INFO:create_model() successfully completed......................................
2024-03-10 18:01:34,869:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:34,869:INFO:Creating metrics dataframe
2024-03-10 18:01:34,888:INFO:Initializing Huber Regressor
2024-03-10 18:01:34,888:INFO:Total runtime is 0.1901487032572428 minutes
2024-03-10 18:01:34,891:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:34,891:INFO:Initializing create_model()
2024-03-10 18:01:34,891:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=huber, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:34,891:INFO:Checking exceptions
2024-03-10 18:01:34,891:INFO:Importing libraries
2024-03-10 18:01:34,891:INFO:Copying training dataset
2024-03-10 18:01:34,916:INFO:Defining folds
2024-03-10 18:01:34,916:INFO:Declaring metric variables
2024-03-10 18:01:34,920:INFO:Importing untrained model
2024-03-10 18:01:34,921:INFO:Huber Regressor Imported successfully
2024-03-10 18:01:34,921:INFO:Starting cross validation
2024-03-10 18:01:34,921:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:35,668:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-10 18:01:35,918:WARNING:d:\anaconda\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-03-10 18:01:35,941:INFO:Calculating mean and std
2024-03-10 18:01:35,941:INFO:Creating metrics dataframe
2024-03-10 18:01:35,941:INFO:Uploading results into container
2024-03-10 18:01:35,941:INFO:Uploading model into container now
2024-03-10 18:01:35,941:INFO:_master_model_container: 10
2024-03-10 18:01:35,941:INFO:_display_container: 2
2024-03-10 18:01:35,941:INFO:HuberRegressor()
2024-03-10 18:01:35,941:INFO:create_model() successfully completed......................................
2024-03-10 18:01:36,017:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:36,017:INFO:Creating metrics dataframe
2024-03-10 18:01:36,034:INFO:Initializing K Neighbors Regressor
2024-03-10 18:01:36,034:INFO:Total runtime is 0.20925270318984984 minutes
2024-03-10 18:01:36,034:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:36,034:INFO:Initializing create_model()
2024-03-10 18:01:36,034:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=knn, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:36,034:INFO:Checking exceptions
2024-03-10 18:01:36,034:INFO:Importing libraries
2024-03-10 18:01:36,034:INFO:Copying training dataset
2024-03-10 18:01:36,067:INFO:Defining folds
2024-03-10 18:01:36,067:INFO:Declaring metric variables
2024-03-10 18:01:36,072:INFO:Importing untrained model
2024-03-10 18:01:36,072:INFO:K Neighbors Regressor Imported successfully
2024-03-10 18:01:36,077:INFO:Starting cross validation
2024-03-10 18:01:36,077:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:36,922:INFO:Calculating mean and std
2024-03-10 18:01:36,922:INFO:Creating metrics dataframe
2024-03-10 18:01:36,922:INFO:Uploading results into container
2024-03-10 18:01:36,922:INFO:Uploading model into container now
2024-03-10 18:01:36,922:INFO:_master_model_container: 11
2024-03-10 18:01:36,922:INFO:_display_container: 2
2024-03-10 18:01:36,922:INFO:KNeighborsRegressor(n_jobs=-1)
2024-03-10 18:01:36,922:INFO:create_model() successfully completed......................................
2024-03-10 18:01:37,003:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:37,003:INFO:Creating metrics dataframe
2024-03-10 18:01:37,003:INFO:Initializing Decision Tree Regressor
2024-03-10 18:01:37,003:INFO:Total runtime is 0.22540103991826374 minutes
2024-03-10 18:01:37,003:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:37,003:INFO:Initializing create_model()
2024-03-10 18:01:37,003:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=dt, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:37,003:INFO:Checking exceptions
2024-03-10 18:01:37,003:INFO:Importing libraries
2024-03-10 18:01:37,003:INFO:Copying training dataset
2024-03-10 18:01:37,032:INFO:Defining folds
2024-03-10 18:01:37,032:INFO:Declaring metric variables
2024-03-10 18:01:37,032:INFO:Importing untrained model
2024-03-10 18:01:37,045:INFO:Decision Tree Regressor Imported successfully
2024-03-10 18:01:37,050:INFO:Starting cross validation
2024-03-10 18:01:37,052:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:37,652:INFO:Calculating mean and std
2024-03-10 18:01:37,653:INFO:Creating metrics dataframe
2024-03-10 18:01:37,654:INFO:Uploading results into container
2024-03-10 18:01:37,654:INFO:Uploading model into container now
2024-03-10 18:01:37,654:INFO:_master_model_container: 12
2024-03-10 18:01:37,654:INFO:_display_container: 2
2024-03-10 18:01:37,654:INFO:DecisionTreeRegressor(random_state=175)
2024-03-10 18:01:37,654:INFO:create_model() successfully completed......................................
2024-03-10 18:01:37,733:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:37,733:INFO:Creating metrics dataframe
2024-03-10 18:01:37,737:INFO:Initializing Random Forest Regressor
2024-03-10 18:01:37,737:INFO:Total runtime is 0.2376336654027303 minutes
2024-03-10 18:01:37,745:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:37,745:INFO:Initializing create_model()
2024-03-10 18:01:37,745:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=rf, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:37,745:INFO:Checking exceptions
2024-03-10 18:01:37,745:INFO:Importing libraries
2024-03-10 18:01:37,745:INFO:Copying training dataset
2024-03-10 18:01:37,770:INFO:Defining folds
2024-03-10 18:01:37,770:INFO:Declaring metric variables
2024-03-10 18:01:37,773:INFO:Importing untrained model
2024-03-10 18:01:37,777:INFO:Random Forest Regressor Imported successfully
2024-03-10 18:01:37,779:INFO:Starting cross validation
2024-03-10 18:01:37,785:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:01:55,108:INFO:Calculating mean and std
2024-03-10 18:01:55,108:INFO:Creating metrics dataframe
2024-03-10 18:01:55,108:INFO:Uploading results into container
2024-03-10 18:01:55,108:INFO:Uploading model into container now
2024-03-10 18:01:55,108:INFO:_master_model_container: 13
2024-03-10 18:01:55,108:INFO:_display_container: 2
2024-03-10 18:01:55,108:INFO:RandomForestRegressor(n_jobs=-1, random_state=175)
2024-03-10 18:01:55,108:INFO:create_model() successfully completed......................................
2024-03-10 18:01:55,239:INFO:SubProcess create_model() end ==================================
2024-03-10 18:01:55,240:INFO:Creating metrics dataframe
2024-03-10 18:01:55,242:INFO:Initializing Extra Trees Regressor
2024-03-10 18:01:55,242:INFO:Total runtime is 0.5293741464614867 minutes
2024-03-10 18:01:55,256:INFO:SubProcess create_model() called ==================================
2024-03-10 18:01:55,256:INFO:Initializing create_model()
2024-03-10 18:01:55,256:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=et, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:01:55,257:INFO:Checking exceptions
2024-03-10 18:01:55,257:INFO:Importing libraries
2024-03-10 18:01:55,257:INFO:Copying training dataset
2024-03-10 18:01:55,301:INFO:Defining folds
2024-03-10 18:01:55,301:INFO:Declaring metric variables
2024-03-10 18:01:55,308:INFO:Importing untrained model
2024-03-10 18:01:55,313:INFO:Extra Trees Regressor Imported successfully
2024-03-10 18:01:55,319:INFO:Starting cross validation
2024-03-10 18:01:55,323:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:02:04,502:INFO:Calculating mean and std
2024-03-10 18:02:04,502:INFO:Creating metrics dataframe
2024-03-10 18:02:04,513:INFO:Uploading results into container
2024-03-10 18:02:04,513:INFO:Uploading model into container now
2024-03-10 18:02:04,513:INFO:_master_model_container: 14
2024-03-10 18:02:04,513:INFO:_display_container: 2
2024-03-10 18:02:04,513:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=175)
2024-03-10 18:02:04,513:INFO:create_model() successfully completed......................................
2024-03-10 18:02:04,611:INFO:SubProcess create_model() end ==================================
2024-03-10 18:02:04,611:INFO:Creating metrics dataframe
2024-03-10 18:02:04,632:INFO:Initializing AdaBoost Regressor
2024-03-10 18:02:04,632:INFO:Total runtime is 0.6858884533246358 minutes
2024-03-10 18:02:04,638:INFO:SubProcess create_model() called ==================================
2024-03-10 18:02:04,638:INFO:Initializing create_model()
2024-03-10 18:02:04,638:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ada, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:04,638:INFO:Checking exceptions
2024-03-10 18:02:04,638:INFO:Importing libraries
2024-03-10 18:02:04,638:INFO:Copying training dataset
2024-03-10 18:02:04,668:INFO:Defining folds
2024-03-10 18:02:04,668:INFO:Declaring metric variables
2024-03-10 18:02:04,673:INFO:Importing untrained model
2024-03-10 18:02:04,678:INFO:AdaBoost Regressor Imported successfully
2024-03-10 18:02:04,687:INFO:Starting cross validation
2024-03-10 18:02:04,693:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:02:06,929:INFO:Calculating mean and std
2024-03-10 18:02:06,929:INFO:Creating metrics dataframe
2024-03-10 18:02:06,929:INFO:Uploading results into container
2024-03-10 18:02:06,929:INFO:Uploading model into container now
2024-03-10 18:02:06,929:INFO:_master_model_container: 15
2024-03-10 18:02:06,929:INFO:_display_container: 2
2024-03-10 18:02:06,929:INFO:AdaBoostRegressor(random_state=175)
2024-03-10 18:02:06,929:INFO:create_model() successfully completed......................................
2024-03-10 18:02:07,029:INFO:SubProcess create_model() end ==================================
2024-03-10 18:02:07,029:INFO:Creating metrics dataframe
2024-03-10 18:02:07,029:INFO:Initializing Gradient Boosting Regressor
2024-03-10 18:02:07,029:INFO:Total runtime is 0.7258337457974752 minutes
2024-03-10 18:02:07,029:INFO:SubProcess create_model() called ==================================
2024-03-10 18:02:07,029:INFO:Initializing create_model()
2024-03-10 18:02:07,029:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=gbr, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:07,029:INFO:Checking exceptions
2024-03-10 18:02:07,045:INFO:Importing libraries
2024-03-10 18:02:07,045:INFO:Copying training dataset
2024-03-10 18:02:07,067:INFO:Defining folds
2024-03-10 18:02:07,067:INFO:Declaring metric variables
2024-03-10 18:02:07,070:INFO:Importing untrained model
2024-03-10 18:02:07,075:INFO:Gradient Boosting Regressor Imported successfully
2024-03-10 18:02:07,082:INFO:Starting cross validation
2024-03-10 18:02:07,085:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:02:12,384:INFO:Calculating mean and std
2024-03-10 18:02:12,384:INFO:Creating metrics dataframe
2024-03-10 18:02:12,384:INFO:Uploading results into container
2024-03-10 18:02:12,384:INFO:Uploading model into container now
2024-03-10 18:02:12,384:INFO:_master_model_container: 16
2024-03-10 18:02:12,384:INFO:_display_container: 2
2024-03-10 18:02:12,384:INFO:GradientBoostingRegressor(random_state=175)
2024-03-10 18:02:12,384:INFO:create_model() successfully completed......................................
2024-03-10 18:02:12,471:INFO:SubProcess create_model() end ==================================
2024-03-10 18:02:12,471:INFO:Creating metrics dataframe
2024-03-10 18:02:12,479:INFO:Initializing Extreme Gradient Boosting
2024-03-10 18:02:12,479:INFO:Total runtime is 0.8166675925254822 minutes
2024-03-10 18:02:12,484:INFO:SubProcess create_model() called ==================================
2024-03-10 18:02:12,485:INFO:Initializing create_model()
2024-03-10 18:02:12,486:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=xgboost, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:12,486:INFO:Checking exceptions
2024-03-10 18:02:12,486:INFO:Importing libraries
2024-03-10 18:02:12,486:INFO:Copying training dataset
2024-03-10 18:02:12,499:INFO:Defining folds
2024-03-10 18:02:12,499:INFO:Declaring metric variables
2024-03-10 18:02:12,516:INFO:Importing untrained model
2024-03-10 18:02:12,517:INFO:Extreme Gradient Boosting Imported successfully
2024-03-10 18:02:12,517:INFO:Starting cross validation
2024-03-10 18:02:12,517:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:02:13,086:INFO:Calculating mean and std
2024-03-10 18:02:13,086:INFO:Creating metrics dataframe
2024-03-10 18:02:13,088:INFO:Uploading results into container
2024-03-10 18:02:13,088:INFO:Uploading model into container now
2024-03-10 18:02:13,088:INFO:_master_model_container: 17
2024-03-10 18:02:13,088:INFO:_display_container: 2
2024-03-10 18:02:13,088:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=175, ...)
2024-03-10 18:02:13,088:INFO:create_model() successfully completed......................................
2024-03-10 18:02:13,167:INFO:SubProcess create_model() end ==================================
2024-03-10 18:02:13,167:INFO:Creating metrics dataframe
2024-03-10 18:02:13,168:INFO:Initializing Light Gradient Boosting Machine
2024-03-10 18:02:13,168:INFO:Total runtime is 0.828153912226359 minutes
2024-03-10 18:02:13,179:INFO:SubProcess create_model() called ==================================
2024-03-10 18:02:13,179:INFO:Initializing create_model()
2024-03-10 18:02:13,179:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=lightgbm, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:13,179:INFO:Checking exceptions
2024-03-10 18:02:13,179:INFO:Importing libraries
2024-03-10 18:02:13,179:INFO:Copying training dataset
2024-03-10 18:02:13,203:INFO:Defining folds
2024-03-10 18:02:13,203:INFO:Declaring metric variables
2024-03-10 18:02:13,206:INFO:Importing untrained model
2024-03-10 18:02:13,209:INFO:Light Gradient Boosting Machine Imported successfully
2024-03-10 18:02:13,217:INFO:Starting cross validation
2024-03-10 18:02:13,219:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:02:13,804:INFO:Calculating mean and std
2024-03-10 18:02:13,804:INFO:Creating metrics dataframe
2024-03-10 18:02:13,813:INFO:Uploading results into container
2024-03-10 18:02:13,815:INFO:Uploading model into container now
2024-03-10 18:02:13,815:INFO:_master_model_container: 18
2024-03-10 18:02:13,815:INFO:_display_container: 2
2024-03-10 18:02:13,816:INFO:LGBMRegressor(n_jobs=-1, random_state=175)
2024-03-10 18:02:13,817:INFO:create_model() successfully completed......................................
2024-03-10 18:02:13,925:INFO:SubProcess create_model() end ==================================
2024-03-10 18:02:13,925:INFO:Creating metrics dataframe
2024-03-10 18:02:13,937:INFO:Initializing CatBoost Regressor
2024-03-10 18:02:13,937:INFO:Total runtime is 0.8409689386685689 minutes
2024-03-10 18:02:13,937:INFO:SubProcess create_model() called ==================================
2024-03-10 18:02:13,937:INFO:Initializing create_model()
2024-03-10 18:02:13,937:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=catboost, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:13,937:INFO:Checking exceptions
2024-03-10 18:02:13,937:INFO:Importing libraries
2024-03-10 18:02:13,937:INFO:Copying training dataset
2024-03-10 18:02:13,968:INFO:Defining folds
2024-03-10 18:02:13,968:INFO:Declaring metric variables
2024-03-10 18:02:13,971:INFO:Importing untrained model
2024-03-10 18:02:13,976:INFO:CatBoost Regressor Imported successfully
2024-03-10 18:02:13,986:INFO:Starting cross validation
2024-03-10 18:02:13,987:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:02:27,522:INFO:Calculating mean and std
2024-03-10 18:02:27,522:INFO:Creating metrics dataframe
2024-03-10 18:02:27,530:INFO:Uploading results into container
2024-03-10 18:02:27,531:INFO:Uploading model into container now
2024-03-10 18:02:27,532:INFO:_master_model_container: 19
2024-03-10 18:02:27,532:INFO:_display_container: 2
2024-03-10 18:02:27,532:INFO:<catboost.core.CatBoostRegressor object at 0x0000023EB88EABD0>
2024-03-10 18:02:27,532:INFO:create_model() successfully completed......................................
2024-03-10 18:02:27,620:INFO:SubProcess create_model() end ==================================
2024-03-10 18:02:27,620:INFO:Creating metrics dataframe
2024-03-10 18:02:27,637:INFO:Initializing Dummy Regressor
2024-03-10 18:02:27,637:INFO:Total runtime is 1.0693012714385985 minutes
2024-03-10 18:02:27,637:INFO:SubProcess create_model() called ==================================
2024-03-10 18:02:27,637:INFO:Initializing create_model()
2024-03-10 18:02:27,637:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=dummy, fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023ECA8C97D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:27,637:INFO:Checking exceptions
2024-03-10 18:02:27,637:INFO:Importing libraries
2024-03-10 18:02:27,637:INFO:Copying training dataset
2024-03-10 18:02:27,665:INFO:Defining folds
2024-03-10 18:02:27,665:INFO:Declaring metric variables
2024-03-10 18:02:27,674:INFO:Importing untrained model
2024-03-10 18:02:27,676:INFO:Dummy Regressor Imported successfully
2024-03-10 18:02:27,679:INFO:Starting cross validation
2024-03-10 18:02:27,679:INFO:Cross validating with TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), n_jobs=-1
2024-03-10 18:02:27,788:INFO:Calculating mean and std
2024-03-10 18:02:27,788:INFO:Creating metrics dataframe
2024-03-10 18:02:27,788:INFO:Uploading results into container
2024-03-10 18:02:27,788:INFO:Uploading model into container now
2024-03-10 18:02:27,788:INFO:_master_model_container: 20
2024-03-10 18:02:27,788:INFO:_display_container: 2
2024-03-10 18:02:27,788:INFO:DummyRegressor()
2024-03-10 18:02:27,788:INFO:create_model() successfully completed......................................
2024-03-10 18:02:27,871:INFO:SubProcess create_model() end ==================================
2024-03-10 18:02:27,871:INFO:Creating metrics dataframe
2024-03-10 18:02:27,908:INFO:Initializing create_model()
2024-03-10 18:02:27,908:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=175), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:27,908:INFO:Checking exceptions
2024-03-10 18:02:27,908:INFO:Importing libraries
2024-03-10 18:02:27,908:INFO:Copying training dataset
2024-03-10 18:02:27,934:INFO:Defining folds
2024-03-10 18:02:27,934:INFO:Declaring metric variables
2024-03-10 18:02:27,934:INFO:Importing untrained model
2024-03-10 18:02:27,934:INFO:Declaring custom model
2024-03-10 18:02:27,936:INFO:Extra Trees Regressor Imported successfully
2024-03-10 18:02:27,938:INFO:Cross validation set to False
2024-03-10 18:02:27,938:INFO:Fitting Model
2024-03-10 18:02:32,067:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=175)
2024-03-10 18:02:32,067:INFO:create_model() successfully completed......................................
2024-03-10 18:02:32,159:INFO:Initializing create_model()
2024-03-10 18:02:32,159:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=KNeighborsRegressor(n_jobs=-1), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:32,159:INFO:Checking exceptions
2024-03-10 18:02:32,167:INFO:Importing libraries
2024-03-10 18:02:32,167:INFO:Copying training dataset
2024-03-10 18:02:32,197:INFO:Defining folds
2024-03-10 18:02:32,198:INFO:Declaring metric variables
2024-03-10 18:02:32,198:INFO:Importing untrained model
2024-03-10 18:02:32,198:INFO:Declaring custom model
2024-03-10 18:02:32,198:INFO:K Neighbors Regressor Imported successfully
2024-03-10 18:02:32,199:INFO:Cross validation set to False
2024-03-10 18:02:32,199:INFO:Fitting Model
2024-03-10 18:02:32,381:INFO:KNeighborsRegressor(n_jobs=-1)
2024-03-10 18:02:32,381:INFO:create_model() successfully completed......................................
2024-03-10 18:02:32,463:INFO:Initializing create_model()
2024-03-10 18:02:32,463:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=RandomForestRegressor(n_jobs=-1, random_state=175), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:32,463:INFO:Checking exceptions
2024-03-10 18:02:32,465:INFO:Importing libraries
2024-03-10 18:02:32,465:INFO:Copying training dataset
2024-03-10 18:02:32,486:INFO:Defining folds
2024-03-10 18:02:32,486:INFO:Declaring metric variables
2024-03-10 18:02:32,486:INFO:Importing untrained model
2024-03-10 18:02:32,486:INFO:Declaring custom model
2024-03-10 18:02:32,488:INFO:Random Forest Regressor Imported successfully
2024-03-10 18:02:32,489:INFO:Cross validation set to False
2024-03-10 18:02:32,489:INFO:Fitting Model
2024-03-10 18:02:40,962:INFO:RandomForestRegressor(n_jobs=-1, random_state=175)
2024-03-10 18:02:40,962:INFO:create_model() successfully completed......................................
2024-03-10 18:02:41,052:INFO:Initializing create_model()
2024-03-10 18:02:41,052:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=GradientBoostingRegressor(random_state=175), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:41,052:INFO:Checking exceptions
2024-03-10 18:02:41,056:INFO:Importing libraries
2024-03-10 18:02:41,056:INFO:Copying training dataset
2024-03-10 18:02:41,082:INFO:Defining folds
2024-03-10 18:02:41,082:INFO:Declaring metric variables
2024-03-10 18:02:41,082:INFO:Importing untrained model
2024-03-10 18:02:41,082:INFO:Declaring custom model
2024-03-10 18:02:41,083:INFO:Gradient Boosting Regressor Imported successfully
2024-03-10 18:02:41,083:INFO:Cross validation set to False
2024-03-10 18:02:41,083:INFO:Fitting Model
2024-03-10 18:02:45,928:INFO:GradientBoostingRegressor(random_state=175)
2024-03-10 18:02:45,928:INFO:create_model() successfully completed......................................
2024-03-10 18:02:46,014:INFO:Initializing create_model()
2024-03-10 18:02:46,014:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Lasso(random_state=175), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:46,014:INFO:Checking exceptions
2024-03-10 18:02:46,025:INFO:Importing libraries
2024-03-10 18:02:46,025:INFO:Copying training dataset
2024-03-10 18:02:46,045:INFO:Defining folds
2024-03-10 18:02:46,045:INFO:Declaring metric variables
2024-03-10 18:02:46,046:INFO:Importing untrained model
2024-03-10 18:02:46,046:INFO:Declaring custom model
2024-03-10 18:02:46,046:INFO:Lasso Regression Imported successfully
2024-03-10 18:02:46,047:INFO:Cross validation set to False
2024-03-10 18:02:46,047:INFO:Fitting Model
2024-03-10 18:02:46,077:INFO:Lasso(random_state=175)
2024-03-10 18:02:46,077:INFO:create_model() successfully completed......................................
2024-03-10 18:02:46,161:INFO:Initializing create_model()
2024-03-10 18:02:46,161:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=LassoLars(random_state=175), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:46,161:INFO:Checking exceptions
2024-03-10 18:02:46,167:INFO:Importing libraries
2024-03-10 18:02:46,167:INFO:Copying training dataset
2024-03-10 18:02:46,194:INFO:Defining folds
2024-03-10 18:02:46,194:INFO:Declaring metric variables
2024-03-10 18:02:46,194:INFO:Importing untrained model
2024-03-10 18:02:46,195:INFO:Declaring custom model
2024-03-10 18:02:46,195:INFO:Lasso Least Angle Regression Imported successfully
2024-03-10 18:02:46,196:INFO:Cross validation set to False
2024-03-10 18:02:46,196:INFO:Fitting Model
2024-03-10 18:02:46,219:INFO:LassoLars(random_state=175)
2024-03-10 18:02:46,219:INFO:create_model() successfully completed......................................
2024-03-10 18:02:46,294:INFO:Initializing create_model()
2024-03-10 18:02:46,294:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ElasticNet(random_state=175), fold=TimeSeriesSplit(gap=0, max_train_size=None, n_splits=5, test_size=None), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:02:46,310:INFO:Checking exceptions
2024-03-10 18:02:46,312:INFO:Importing libraries
2024-03-10 18:02:46,312:INFO:Copying training dataset
2024-03-10 18:02:46,328:INFO:Defining folds
2024-03-10 18:02:46,328:INFO:Declaring metric variables
2024-03-10 18:02:46,328:INFO:Importing untrained model
2024-03-10 18:02:46,328:INFO:Declaring custom model
2024-03-10 18:02:46,328:INFO:Elastic Net Imported successfully
2024-03-10 18:02:46,328:INFO:Cross validation set to False
2024-03-10 18:02:46,328:INFO:Fitting Model
2024-03-10 18:02:46,368:INFO:ElasticNet(random_state=175)
2024-03-10 18:02:46,368:INFO:create_model() successfully completed......................................
2024-03-10 18:02:46,487:INFO:_master_model_container: 20
2024-03-10 18:02:46,494:INFO:_display_container: 2
2024-03-10 18:02:46,495:INFO:[ExtraTreesRegressor(n_jobs=-1, random_state=175), KNeighborsRegressor(n_jobs=-1), RandomForestRegressor(n_jobs=-1, random_state=175), GradientBoostingRegressor(random_state=175), Lasso(random_state=175), LassoLars(random_state=175), ElasticNet(random_state=175)]
2024-03-10 18:02:46,495:INFO:compare_models() successfully completed......................................
2024-03-10 18:03:00,561:INFO:Initializing finalize_model()
2024-03-10 18:03:00,561:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:03:00,562:INFO:Finalizing ExtraTreesRegressor(n_jobs=-1, random_state=175)
2024-03-10 18:03:00,577:INFO:Initializing create_model()
2024-03-10 18:03:00,577:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:03:00,577:INFO:Checking exceptions
2024-03-10 18:03:00,577:INFO:Importing libraries
2024-03-10 18:03:00,577:INFO:Copying training dataset
2024-03-10 18:03:00,584:INFO:Defining folds
2024-03-10 18:03:00,584:INFO:Declaring metric variables
2024-03-10 18:03:00,584:INFO:Importing untrained model
2024-03-10 18:03:00,584:INFO:Declaring custom model
2024-03-10 18:03:00,585:INFO:Extra Trees Regressor Imported successfully
2024-03-10 18:03:00,586:INFO:Cross validation set to False
2024-03-10 18:03:00,586:INFO:Fitting Model
2024-03-10 18:03:05,320:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=175))])
2024-03-10 18:03:05,320:INFO:create_model() successfully completed......................................
2024-03-10 18:03:05,402:INFO:_master_model_container: 20
2024-03-10 18:03:05,402:INFO:_display_container: 2
2024-03-10 18:03:05,402:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=175))])
2024-03-10 18:03:05,402:INFO:finalize_model() successfully completed......................................
2024-03-10 18:03:05,485:INFO:Initializing predict_model()
2024-03-10 18:03:05,485:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023EB2E27420>)
2024-03-10 18:03:05,485:INFO:Checking exceptions
2024-03-10 18:03:05,485:INFO:Preloading libraries
2024-03-10 18:03:05,485:INFO:Set up data.
2024-03-10 18:03:05,485:INFO:Set up index.
2024-03-10 18:03:05,768:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:03:05,769:INFO:Initializing finalize_model()
2024-03-10 18:03:05,769:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=KNeighborsRegressor(n_jobs=-1), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:03:05,769:INFO:Finalizing KNeighborsRegressor(n_jobs=-1)
2024-03-10 18:03:05,769:INFO:Initializing create_model()
2024-03-10 18:03:05,769:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=KNeighborsRegressor(n_jobs=-1), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:03:05,769:INFO:Checking exceptions
2024-03-10 18:03:05,786:INFO:Importing libraries
2024-03-10 18:03:05,786:INFO:Copying training dataset
2024-03-10 18:03:05,786:INFO:Defining folds
2024-03-10 18:03:05,786:INFO:Declaring metric variables
2024-03-10 18:03:05,786:INFO:Importing untrained model
2024-03-10 18:03:05,786:INFO:Declaring custom model
2024-03-10 18:03:05,786:INFO:K Neighbors Regressor Imported successfully
2024-03-10 18:03:05,786:INFO:Cross validation set to False
2024-03-10 18:03:05,786:INFO:Fitting Model
2024-03-10 18:03:06,094:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-10 18:03:06,094:INFO:create_model() successfully completed......................................
2024-03-10 18:03:06,188:INFO:_master_model_container: 20
2024-03-10 18:03:06,188:INFO:_display_container: 2
2024-03-10 18:03:06,188:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-10 18:03:06,188:INFO:finalize_model() successfully completed......................................
2024-03-10 18:03:06,352:INFO:Initializing predict_model()
2024-03-10 18:03:06,352:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023EBA8FCFE0>)
2024-03-10 18:03:06,352:INFO:Checking exceptions
2024-03-10 18:03:06,352:INFO:Preloading libraries
2024-03-10 18:03:06,352:INFO:Set up data.
2024-03-10 18:03:06,373:INFO:Set up index.
2024-03-10 18:03:07,187:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:03:07,190:INFO:Initializing finalize_model()
2024-03-10 18:03:07,190:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=RandomForestRegressor(n_jobs=-1, random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:03:07,191:INFO:Finalizing RandomForestRegressor(n_jobs=-1, random_state=175)
2024-03-10 18:03:07,200:INFO:Initializing create_model()
2024-03-10 18:03:07,200:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=RandomForestRegressor(n_jobs=-1, random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:03:07,200:INFO:Checking exceptions
2024-03-10 18:03:07,203:INFO:Importing libraries
2024-03-10 18:03:07,203:INFO:Copying training dataset
2024-03-10 18:03:07,205:INFO:Defining folds
2024-03-10 18:03:07,205:INFO:Declaring metric variables
2024-03-10 18:03:07,205:INFO:Importing untrained model
2024-03-10 18:03:07,205:INFO:Declaring custom model
2024-03-10 18:03:07,205:INFO:Random Forest Regressor Imported successfully
2024-03-10 18:03:07,205:INFO:Cross validation set to False
2024-03-10 18:03:07,205:INFO:Fitting Model
2024-03-10 18:03:28,512:INFO:Initializing finalize_model()
2024-03-10 18:03:28,512:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:03:28,513:INFO:Finalizing ExtraTreesRegressor(n_jobs=-1, random_state=175)
2024-03-10 18:03:28,514:INFO:Initializing create_model()
2024-03-10 18:03:28,514:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:03:28,514:INFO:Checking exceptions
2024-03-10 18:03:28,527:INFO:Importing libraries
2024-03-10 18:03:28,527:INFO:Copying training dataset
2024-03-10 18:03:28,531:INFO:Defining folds
2024-03-10 18:03:28,531:INFO:Declaring metric variables
2024-03-10 18:03:28,531:INFO:Importing untrained model
2024-03-10 18:03:28,531:INFO:Declaring custom model
2024-03-10 18:03:28,531:INFO:Extra Trees Regressor Imported successfully
2024-03-10 18:03:28,531:INFO:Cross validation set to False
2024-03-10 18:03:28,531:INFO:Fitting Model
2024-03-10 18:03:33,102:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=175))])
2024-03-10 18:03:33,102:INFO:create_model() successfully completed......................................
2024-03-10 18:03:33,229:INFO:_master_model_container: 20
2024-03-10 18:03:33,229:INFO:_display_container: 2
2024-03-10 18:03:33,238:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=175))])
2024-03-10 18:03:33,238:INFO:finalize_model() successfully completed......................................
2024-03-10 18:03:33,370:INFO:Initializing predict_model()
2024-03-10 18:03:33,370:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023ECAA5C540>)
2024-03-10 18:03:33,370:INFO:Checking exceptions
2024-03-10 18:03:33,370:INFO:Preloading libraries
2024-03-10 18:03:33,370:INFO:Set up data.
2024-03-10 18:03:33,380:INFO:Set up index.
2024-03-10 18:03:33,629:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:03:33,629:INFO:Initializing finalize_model()
2024-03-10 18:03:33,629:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=KNeighborsRegressor(n_jobs=-1), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:03:33,629:INFO:Finalizing KNeighborsRegressor(n_jobs=-1)
2024-03-10 18:03:33,645:INFO:Initializing create_model()
2024-03-10 18:03:33,645:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=KNeighborsRegressor(n_jobs=-1), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:03:33,645:INFO:Checking exceptions
2024-03-10 18:03:33,646:INFO:Importing libraries
2024-03-10 18:03:33,646:INFO:Copying training dataset
2024-03-10 18:03:33,646:INFO:Defining folds
2024-03-10 18:03:33,646:INFO:Declaring metric variables
2024-03-10 18:03:33,646:INFO:Importing untrained model
2024-03-10 18:03:33,646:INFO:Declaring custom model
2024-03-10 18:03:33,646:INFO:K Neighbors Regressor Imported successfully
2024-03-10 18:03:33,646:INFO:Cross validation set to False
2024-03-10 18:03:33,646:INFO:Fitting Model
2024-03-10 18:03:33,896:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-10 18:03:33,896:INFO:create_model() successfully completed......................................
2024-03-10 18:03:34,012:INFO:_master_model_container: 20
2024-03-10 18:03:34,012:INFO:_display_container: 2
2024-03-10 18:03:34,012:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-10 18:03:34,012:INFO:finalize_model() successfully completed......................................
2024-03-10 18:03:34,229:INFO:Initializing predict_model()
2024-03-10 18:03:34,229:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023EAE12C860>)
2024-03-10 18:03:34,229:INFO:Checking exceptions
2024-03-10 18:03:34,229:INFO:Preloading libraries
2024-03-10 18:03:34,229:INFO:Set up data.
2024-03-10 18:03:34,229:INFO:Set up index.
2024-03-10 18:03:35,088:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:03:35,090:INFO:Initializing finalize_model()
2024-03-10 18:03:35,090:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=RandomForestRegressor(n_jobs=-1, random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:03:35,090:INFO:Finalizing RandomForestRegressor(n_jobs=-1, random_state=175)
2024-03-10 18:03:35,098:INFO:Initializing create_model()
2024-03-10 18:03:35,098:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=RandomForestRegressor(n_jobs=-1, random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:03:35,098:INFO:Checking exceptions
2024-03-10 18:03:35,098:INFO:Importing libraries
2024-03-10 18:03:35,098:INFO:Copying training dataset
2024-03-10 18:03:35,098:INFO:Defining folds
2024-03-10 18:03:35,098:INFO:Declaring metric variables
2024-03-10 18:03:35,098:INFO:Importing untrained model
2024-03-10 18:03:35,098:INFO:Declaring custom model
2024-03-10 18:03:35,098:INFO:Random Forest Regressor Imported successfully
2024-03-10 18:03:35,098:INFO:Cross validation set to False
2024-03-10 18:03:35,098:INFO:Fitting Model
2024-03-10 18:03:46,434:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=175))])
2024-03-10 18:03:46,434:INFO:create_model() successfully completed......................................
2024-03-10 18:03:46,594:INFO:_master_model_container: 20
2024-03-10 18:03:46,594:INFO:_display_container: 2
2024-03-10 18:03:46,606:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=175))])
2024-03-10 18:03:46,606:INFO:finalize_model() successfully completed......................................
2024-03-10 18:03:46,768:INFO:Initializing predict_model()
2024-03-10 18:03:46,768:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023EAE12C860>)
2024-03-10 18:03:46,768:INFO:Checking exceptions
2024-03-10 18:03:46,768:INFO:Preloading libraries
2024-03-10 18:03:46,768:INFO:Set up data.
2024-03-10 18:03:46,778:INFO:Set up index.
2024-03-10 18:03:47,068:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:03:47,078:INFO:Initializing finalize_model()
2024-03-10 18:03:47,078:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=GradientBoostingRegressor(random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:03:47,078:INFO:Finalizing GradientBoostingRegressor(random_state=175)
2024-03-10 18:03:47,085:INFO:Initializing create_model()
2024-03-10 18:03:47,085:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=GradientBoostingRegressor(random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:03:47,085:INFO:Checking exceptions
2024-03-10 18:03:47,085:INFO:Importing libraries
2024-03-10 18:03:47,085:INFO:Copying training dataset
2024-03-10 18:03:47,085:INFO:Defining folds
2024-03-10 18:03:47,085:INFO:Declaring metric variables
2024-03-10 18:03:47,085:INFO:Importing untrained model
2024-03-10 18:03:47,085:INFO:Declaring custom model
2024-03-10 18:03:47,085:INFO:Gradient Boosting Regressor Imported successfully
2024-03-10 18:03:47,085:INFO:Cross validation set to False
2024-03-10 18:03:47,085:INFO:Fitting Model
2024-03-10 18:03:54,036:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=175))])
2024-03-10 18:03:54,036:INFO:create_model() successfully completed......................................
2024-03-10 18:03:54,169:INFO:_master_model_container: 20
2024-03-10 18:03:54,169:INFO:_display_container: 2
2024-03-10 18:03:54,169:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=175))])
2024-03-10 18:03:54,169:INFO:finalize_model() successfully completed......................................
2024-03-10 18:03:54,353:INFO:Initializing predict_model()
2024-03-10 18:03:54,353:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023EAD0A2520>)
2024-03-10 18:03:54,353:INFO:Checking exceptions
2024-03-10 18:03:54,353:INFO:Preloading libraries
2024-03-10 18:03:54,353:INFO:Set up data.
2024-03-10 18:03:54,369:INFO:Set up index.
2024-03-10 18:03:54,520:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:03:54,523:INFO:Initializing finalize_model()
2024-03-10 18:03:54,523:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Lasso(random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:03:54,523:INFO:Finalizing Lasso(random_state=175)
2024-03-10 18:03:54,523:INFO:Initializing create_model()
2024-03-10 18:03:54,523:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Lasso(random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:03:54,523:INFO:Checking exceptions
2024-03-10 18:03:54,523:INFO:Importing libraries
2024-03-10 18:03:54,523:INFO:Copying training dataset
2024-03-10 18:03:54,523:INFO:Defining folds
2024-03-10 18:03:54,523:INFO:Declaring metric variables
2024-03-10 18:03:54,523:INFO:Importing untrained model
2024-03-10 18:03:54,523:INFO:Declaring custom model
2024-03-10 18:03:54,523:INFO:Lasso Regression Imported successfully
2024-03-10 18:03:54,523:INFO:Cross validation set to False
2024-03-10 18:03:54,523:INFO:Fitting Model
2024-03-10 18:03:54,555:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', Lasso(random_state=175))])
2024-03-10 18:03:54,555:INFO:create_model() successfully completed......................................
2024-03-10 18:03:54,702:INFO:_master_model_container: 20
2024-03-10 18:03:54,702:INFO:_display_container: 2
2024-03-10 18:03:54,702:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', Lasso(random_state=175))])
2024-03-10 18:03:54,702:INFO:finalize_model() successfully completed......................................
2024-03-10 18:03:54,840:INFO:Initializing predict_model()
2024-03-10 18:03:54,840:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', Lasso(random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023EAE12C860>)
2024-03-10 18:03:54,840:INFO:Checking exceptions
2024-03-10 18:03:54,840:INFO:Preloading libraries
2024-03-10 18:03:54,840:INFO:Set up data.
2024-03-10 18:03:54,856:INFO:Set up index.
2024-03-10 18:03:55,005:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:03:55,005:INFO:Initializing finalize_model()
2024-03-10 18:03:55,005:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=LassoLars(random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:03:55,005:INFO:Finalizing LassoLars(random_state=175)
2024-03-10 18:03:55,021:INFO:Initializing create_model()
2024-03-10 18:03:55,021:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=LassoLars(random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:03:55,021:INFO:Checking exceptions
2024-03-10 18:03:55,021:INFO:Importing libraries
2024-03-10 18:03:55,021:INFO:Copying training dataset
2024-03-10 18:03:55,021:INFO:Defining folds
2024-03-10 18:03:55,021:INFO:Declaring metric variables
2024-03-10 18:03:55,021:INFO:Importing untrained model
2024-03-10 18:03:55,021:INFO:Declaring custom model
2024-03-10 18:03:55,021:INFO:Lasso Least Angle Regression Imported successfully
2024-03-10 18:03:55,021:INFO:Cross validation set to False
2024-03-10 18:03:55,021:INFO:Fitting Model
2024-03-10 18:03:55,052:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', LassoLars(random_state=175))])
2024-03-10 18:03:55,052:INFO:create_model() successfully completed......................................
2024-03-10 18:03:55,204:INFO:_master_model_container: 20
2024-03-10 18:03:55,204:INFO:_display_container: 2
2024-03-10 18:03:55,204:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', LassoLars(random_state=175))])
2024-03-10 18:03:55,204:INFO:finalize_model() successfully completed......................................
2024-03-10 18:03:55,339:INFO:Initializing predict_model()
2024-03-10 18:03:55,339:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', LassoLars(random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023EAF9E5F80>)
2024-03-10 18:03:55,339:INFO:Checking exceptions
2024-03-10 18:03:55,339:INFO:Preloading libraries
2024-03-10 18:03:55,339:INFO:Set up data.
2024-03-10 18:03:55,354:INFO:Set up index.
2024-03-10 18:03:55,506:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:03:55,506:INFO:Initializing finalize_model()
2024-03-10 18:03:55,506:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ElasticNet(random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:03:55,506:INFO:Finalizing ElasticNet(random_state=175)
2024-03-10 18:03:55,521:INFO:Initializing create_model()
2024-03-10 18:03:55,521:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ElasticNet(random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:03:55,521:INFO:Checking exceptions
2024-03-10 18:03:55,521:INFO:Importing libraries
2024-03-10 18:03:55,521:INFO:Copying training dataset
2024-03-10 18:03:55,521:INFO:Defining folds
2024-03-10 18:03:55,521:INFO:Declaring metric variables
2024-03-10 18:03:55,521:INFO:Importing untrained model
2024-03-10 18:03:55,521:INFO:Declaring custom model
2024-03-10 18:03:55,537:INFO:Elastic Net Imported successfully
2024-03-10 18:03:55,537:INFO:Cross validation set to False
2024-03-10 18:03:55,537:INFO:Fitting Model
2024-03-10 18:03:55,569:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', ElasticNet(random_state=175))])
2024-03-10 18:03:55,569:INFO:create_model() successfully completed......................................
2024-03-10 18:03:55,711:INFO:_master_model_container: 20
2024-03-10 18:03:55,711:INFO:_display_container: 2
2024-03-10 18:03:55,721:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', ElasticNet(random_state=175))])
2024-03-10 18:03:55,721:INFO:finalize_model() successfully completed......................................
2024-03-10 18:03:55,852:INFO:Initializing predict_model()
2024-03-10 18:03:55,852:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', ElasticNet(random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023EAE12C860>)
2024-03-10 18:03:55,852:INFO:Checking exceptions
2024-03-10 18:03:55,852:INFO:Preloading libraries
2024-03-10 18:03:55,854:INFO:Set up data.
2024-03-10 18:03:55,854:INFO:Set up index.
2024-03-10 18:03:56,025:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:04:00,451:INFO:Initializing finalize_model()
2024-03-10 18:04:00,451:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:04:00,451:INFO:Finalizing ExtraTreesRegressor(n_jobs=-1, random_state=175)
2024-03-10 18:04:00,466:INFO:Initializing create_model()
2024-03-10 18:04:00,466:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:04:00,467:INFO:Checking exceptions
2024-03-10 18:04:00,468:INFO:Importing libraries
2024-03-10 18:04:00,468:INFO:Copying training dataset
2024-03-10 18:04:00,470:INFO:Defining folds
2024-03-10 18:04:00,470:INFO:Declaring metric variables
2024-03-10 18:04:00,470:INFO:Importing untrained model
2024-03-10 18:04:00,470:INFO:Declaring custom model
2024-03-10 18:04:00,471:INFO:Extra Trees Regressor Imported successfully
2024-03-10 18:04:00,472:INFO:Cross validation set to False
2024-03-10 18:04:00,472:INFO:Fitting Model
2024-03-10 18:04:05,548:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=175))])
2024-03-10 18:04:05,548:INFO:create_model() successfully completed......................................
2024-03-10 18:04:05,664:INFO:_master_model_container: 20
2024-03-10 18:04:05,664:INFO:_display_container: 2
2024-03-10 18:04:05,664:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=175))])
2024-03-10 18:04:05,664:INFO:finalize_model() successfully completed......................................
2024-03-10 18:04:05,792:INFO:Initializing predict_model()
2024-03-10 18:04:05,792:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 ExtraTreesRegressor(n_jobs=-1, random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023ECAA5C680>)
2024-03-10 18:04:05,792:INFO:Checking exceptions
2024-03-10 18:04:05,792:INFO:Preloading libraries
2024-03-10 18:04:05,807:INFO:Set up data.
2024-03-10 18:04:05,807:INFO:Set up index.
2024-03-10 18:04:06,049:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:04:06,065:INFO:Initializing finalize_model()
2024-03-10 18:04:06,065:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=KNeighborsRegressor(n_jobs=-1), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:04:06,065:INFO:Finalizing KNeighborsRegressor(n_jobs=-1)
2024-03-10 18:04:06,077:INFO:Initializing create_model()
2024-03-10 18:04:06,078:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=KNeighborsRegressor(n_jobs=-1), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:04:06,078:INFO:Checking exceptions
2024-03-10 18:04:06,078:INFO:Importing libraries
2024-03-10 18:04:06,078:INFO:Copying training dataset
2024-03-10 18:04:06,078:INFO:Defining folds
2024-03-10 18:04:06,078:INFO:Declaring metric variables
2024-03-10 18:04:06,078:INFO:Importing untrained model
2024-03-10 18:04:06,078:INFO:Declaring custom model
2024-03-10 18:04:06,078:INFO:K Neighbors Regressor Imported successfully
2024-03-10 18:04:06,078:INFO:Cross validation set to False
2024-03-10 18:04:06,078:INFO:Fitting Model
2024-03-10 18:04:06,343:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-10 18:04:06,343:INFO:create_model() successfully completed......................................
2024-03-10 18:04:06,466:INFO:_master_model_container: 20
2024-03-10 18:04:06,466:INFO:_display_container: 2
2024-03-10 18:04:06,466:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))])
2024-03-10 18:04:06,466:INFO:finalize_model() successfully completed......................................
2024-03-10 18:04:06,682:INFO:Initializing predict_model()
2024-03-10 18:04:06,682:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', KNeighborsRegressor(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023F0C99B1A0>)
2024-03-10 18:04:06,682:INFO:Checking exceptions
2024-03-10 18:04:06,682:INFO:Preloading libraries
2024-03-10 18:04:06,682:INFO:Set up data.
2024-03-10 18:04:06,682:INFO:Set up index.
2024-03-10 18:04:07,580:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:04:07,580:INFO:Initializing finalize_model()
2024-03-10 18:04:07,580:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=RandomForestRegressor(n_jobs=-1, random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:04:07,580:INFO:Finalizing RandomForestRegressor(n_jobs=-1, random_state=175)
2024-03-10 18:04:07,593:INFO:Initializing create_model()
2024-03-10 18:04:07,593:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=RandomForestRegressor(n_jobs=-1, random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:04:07,593:INFO:Checking exceptions
2024-03-10 18:04:07,593:INFO:Importing libraries
2024-03-10 18:04:07,593:INFO:Copying training dataset
2024-03-10 18:04:07,601:INFO:Defining folds
2024-03-10 18:04:07,601:INFO:Declaring metric variables
2024-03-10 18:04:07,601:INFO:Importing untrained model
2024-03-10 18:04:07,601:INFO:Declaring custom model
2024-03-10 18:04:07,601:INFO:Random Forest Regressor Imported successfully
2024-03-10 18:04:07,601:INFO:Cross validation set to False
2024-03-10 18:04:07,601:INFO:Fitting Model
2024-03-10 18:04:19,086:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=175))])
2024-03-10 18:04:19,086:INFO:create_model() successfully completed......................................
2024-03-10 18:04:19,220:INFO:_master_model_container: 20
2024-03-10 18:04:19,220:INFO:_display_container: 2
2024-03-10 18:04:19,220:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=175))])
2024-03-10 18:04:19,220:INFO:finalize_model() successfully completed......................................
2024-03-10 18:04:19,365:INFO:Initializing predict_model()
2024-03-10 18:04:19,365:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 RandomForestRegressor(n_jobs=-1, random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023EE0E68040>)
2024-03-10 18:04:19,365:INFO:Checking exceptions
2024-03-10 18:04:19,365:INFO:Preloading libraries
2024-03-10 18:04:19,365:INFO:Set up data.
2024-03-10 18:04:19,373:INFO:Set up index.
2024-03-10 18:04:19,621:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:04:19,623:INFO:Initializing finalize_model()
2024-03-10 18:04:19,623:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=GradientBoostingRegressor(random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:04:19,623:INFO:Finalizing GradientBoostingRegressor(random_state=175)
2024-03-10 18:04:19,634:INFO:Initializing create_model()
2024-03-10 18:04:19,634:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=GradientBoostingRegressor(random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:04:19,634:INFO:Checking exceptions
2024-03-10 18:04:19,634:INFO:Importing libraries
2024-03-10 18:04:19,634:INFO:Copying training dataset
2024-03-10 18:04:19,634:INFO:Defining folds
2024-03-10 18:04:19,634:INFO:Declaring metric variables
2024-03-10 18:04:19,634:INFO:Importing untrained model
2024-03-10 18:04:19,634:INFO:Declaring custom model
2024-03-10 18:04:19,634:INFO:Gradient Boosting Regressor Imported successfully
2024-03-10 18:04:19,634:INFO:Cross validation set to False
2024-03-10 18:04:19,634:INFO:Fitting Model
2024-03-10 18:04:26,182:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=175))])
2024-03-10 18:04:26,182:INFO:create_model() successfully completed......................................
2024-03-10 18:04:26,315:INFO:_master_model_container: 20
2024-03-10 18:04:26,315:INFO:_display_container: 2
2024-03-10 18:04:26,319:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=175))])
2024-03-10 18:04:26,319:INFO:finalize_model() successfully completed......................................
2024-03-10 18:04:26,483:INFO:Initializing predict_model()
2024-03-10 18:04:26,483:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023ECAA5C680>)
2024-03-10 18:04:26,483:INFO:Checking exceptions
2024-03-10 18:04:26,483:INFO:Preloading libraries
2024-03-10 18:04:26,497:INFO:Set up data.
2024-03-10 18:04:26,499:INFO:Set up index.
2024-03-10 18:04:26,649:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:04:26,649:INFO:Initializing finalize_model()
2024-03-10 18:04:26,649:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Lasso(random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:04:26,649:INFO:Finalizing Lasso(random_state=175)
2024-03-10 18:04:26,649:INFO:Initializing create_model()
2024-03-10 18:04:26,649:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Lasso(random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:04:26,649:INFO:Checking exceptions
2024-03-10 18:04:26,665:INFO:Importing libraries
2024-03-10 18:04:26,665:INFO:Copying training dataset
2024-03-10 18:04:26,667:INFO:Defining folds
2024-03-10 18:04:26,667:INFO:Declaring metric variables
2024-03-10 18:04:26,667:INFO:Importing untrained model
2024-03-10 18:04:26,667:INFO:Declaring custom model
2024-03-10 18:04:26,667:INFO:Lasso Regression Imported successfully
2024-03-10 18:04:26,668:INFO:Cross validation set to False
2024-03-10 18:04:26,668:INFO:Fitting Model
2024-03-10 18:04:26,697:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', Lasso(random_state=175))])
2024-03-10 18:04:26,697:INFO:create_model() successfully completed......................................
2024-03-10 18:04:26,832:INFO:_master_model_container: 20
2024-03-10 18:04:26,832:INFO:_display_container: 2
2024-03-10 18:04:26,832:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', Lasso(random_state=175))])
2024-03-10 18:04:26,832:INFO:finalize_model() successfully completed......................................
2024-03-10 18:04:26,972:INFO:Initializing predict_model()
2024-03-10 18:04:26,972:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', Lasso(random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023EE0E68040>)
2024-03-10 18:04:26,972:INFO:Checking exceptions
2024-03-10 18:04:26,972:INFO:Preloading libraries
2024-03-10 18:04:26,972:INFO:Set up data.
2024-03-10 18:04:26,983:INFO:Set up index.
2024-03-10 18:04:27,130:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:04:27,133:INFO:Initializing finalize_model()
2024-03-10 18:04:27,133:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=LassoLars(random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:04:27,133:INFO:Finalizing LassoLars(random_state=175)
2024-03-10 18:04:27,136:INFO:Initializing create_model()
2024-03-10 18:04:27,136:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=LassoLars(random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:04:27,136:INFO:Checking exceptions
2024-03-10 18:04:27,136:INFO:Importing libraries
2024-03-10 18:04:27,136:INFO:Copying training dataset
2024-03-10 18:04:27,136:INFO:Defining folds
2024-03-10 18:04:27,136:INFO:Declaring metric variables
2024-03-10 18:04:27,136:INFO:Importing untrained model
2024-03-10 18:04:27,136:INFO:Declaring custom model
2024-03-10 18:04:27,136:INFO:Lasso Least Angle Regression Imported successfully
2024-03-10 18:04:27,136:INFO:Cross validation set to False
2024-03-10 18:04:27,136:INFO:Fitting Model
2024-03-10 18:04:27,182:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', LassoLars(random_state=175))])
2024-03-10 18:04:27,183:INFO:create_model() successfully completed......................................
2024-03-10 18:04:27,325:INFO:_master_model_container: 20
2024-03-10 18:04:27,325:INFO:_display_container: 2
2024-03-10 18:04:27,330:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', LassoLars(random_state=175))])
2024-03-10 18:04:27,330:INFO:finalize_model() successfully completed......................................
2024-03-10 18:04:27,466:INFO:Initializing predict_model()
2024-03-10 18:04:27,466:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', LassoLars(random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023ECAA5C540>)
2024-03-10 18:04:27,466:INFO:Checking exceptions
2024-03-10 18:04:27,466:INFO:Preloading libraries
2024-03-10 18:04:27,466:INFO:Set up data.
2024-03-10 18:04:27,466:INFO:Set up index.
2024-03-10 18:04:27,633:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:04:27,633:INFO:Initializing finalize_model()
2024-03-10 18:04:27,633:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ElasticNet(random_state=175), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-03-10 18:04:27,633:INFO:Finalizing ElasticNet(random_state=175)
2024-03-10 18:04:27,649:INFO:Initializing create_model()
2024-03-10 18:04:27,649:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=ElasticNet(random_state=175), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-03-10 18:04:27,649:INFO:Checking exceptions
2024-03-10 18:04:27,649:INFO:Importing libraries
2024-03-10 18:04:27,649:INFO:Copying training dataset
2024-03-10 18:04:27,649:INFO:Defining folds
2024-03-10 18:04:27,649:INFO:Declaring metric variables
2024-03-10 18:04:27,649:INFO:Importing untrained model
2024-03-10 18:04:27,649:INFO:Declaring custom model
2024-03-10 18:04:27,649:INFO:Elastic Net Imported successfully
2024-03-10 18:04:27,649:INFO:Cross validation set to False
2024-03-10 18:04:27,649:INFO:Fitting Model
2024-03-10 18:04:27,683:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', ElasticNet(random_state=175))])
2024-03-10 18:04:27,683:INFO:create_model() successfully completed......................................
2024-03-10 18:04:27,836:INFO:_master_model_container: 20
2024-03-10 18:04:27,836:INFO:_display_container: 2
2024-03-10 18:04:27,836:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', ElasticNet(random_state=175))])
2024-03-10 18:04:27,836:INFO:finalize_model() successfully completed......................................
2024-03-10 18:04:27,967:INFO:Initializing predict_model()
2024-03-10 18:04:27,967:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023EB8A69290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Speed_X', 'Speed_Y', 'Speed_Z',
                                             'Speed_SP', 'Accel_X', 'Accel_Y',
                                             'Accel_Z', 'Accel_SP', 'Power_X',
                                             'Power_Y', 'Power_Z', 'Power_SP'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator', ElasticNet(random_state=175))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023ECAA5C680>)
2024-03-10 18:04:27,967:INFO:Checking exceptions
2024-03-10 18:04:27,967:INFO:Preloading libraries
2024-03-10 18:04:27,983:INFO:Set up data.
2024-03-10 18:04:27,983:INFO:Set up index.
2024-03-10 18:04:28,137:WARNING:d:\anaconda\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2024-03-10 18:41:17,997:WARNING:d:\anaconda\Lib\site-packages\keras\src\layers\core\dense.py:85: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

2024-03-10 18:44:34,360:WARNING:d:\anaconda\Lib\site-packages\keras\src\layers\core\dense.py:85: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

2024-03-10 18:45:42,214:WARNING:C:\Users\dell\AppData\Local\Temp\ipykernel_80860\1247152962.py:15: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  X_test.loc[:, 'Current'] = y_test

2024-03-12 21:28:56,728:WARNING:C:\Users\dell\AppData\Local\Temp\ipykernel_80860\3550175529.py:9: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  X_train.loc[:, 'Current'] = y_train

